/*************************************************************************************************\
* Наименование: Формирование/выполнение экземпляра запроса с формирование JSON                    *
* Контур/Модуль: Абстрактный конструктор JSON                                                     *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

#include Query.vih
#include QRY_OUT.vih
#include odecl.vih
#include QRY_ALG_USER.vih
#include StrFunc.vih
//#include SpecialPropetiesForG.vih
//#include CatFunc.vih
//************************************************************
const
  coMaxElemets = 256;
end;

type String_xMaxEl  = Array [1..coMaxElemets] of string ;

var _arrQRY_USER_ALG : Array [1..1] of IQRY_ALG_USER;

Table Struct tmp_UserAlt
(
   Name : string[100]
 , num  : word
)
with index
(
 tmp_UserAlt01=Name
);

Table Struct Tmp_Alg
(
   Npp  : word        "Порядковый номер"
 , Key  : string[100] "Ключ"
 , Prim : String      "Использование"
)
With Index
( Tmp_Alg01 = Npp
 ,Tmp_Alg02 = Key
);

table struct tCheckFields
(
     nrec : comp
   , FieldNam     : string
   , FieldSynonim : string
   , FieldJSON    : string
   , cLevel       : comp
)
with index
(
 ind0 = nrec
)
;


table struct tAbstrResultValues
(
     nrec     : comp
   , value    : String_xMaxEl
)
with index
(
   ind0 = nrec (unique, surrogate)
)
;
table struct tForExportJSON
(
     nrec    : comp
   , cParent : comp
   , cLVL    : comp
   , value   : String_xMaxEl
)
with index
(
   ind0 = nrec (unique, surrogate)
 , ind1 = cParent + cLVL
// , ind2 = cLVL
)
;
Interface QRY_OUT 'Генерация запросов и файлов на основе шаблонов и инстансов';


var arrAbstrResultFldNames : array [1..1] of string;
var arrFldFormulas         : array [1..1] of string;
Function Fill_Tmp_alg : boolean; forward;
create view
var
  m_service : TPTR;
  odecl : declension ; // склонение фио
  _iStrFunc : StringFunctions; // Функции работы со строками
//  JSONObj_ArrayOneElement : tptr;
//  JSONObj_Array : tptr;
  JSONObj : TPtr;
as select
  tCheckFields_1.FieldNam
from
   tCheckFields tCheckFields_1
 , tCheckFields tCheckFields_2
 , tForExportJSON
 , tForExportJSON tForExportJSON_1
 , Tmp_Alg
 , tAbstrResultValues
 , QRY_Instance QRY_Instance_1
 , QRY_Instance_FLD QRY_INST_FLD_CHECK_LVL
 , QRY_Instance_FLD_LVL QRY_INST_FLD_LVL_LOOP
 , QRY_Instance_FLD_LVL QRY_INST_FLD_LVL_LOOP_1
 , QRY_Instance_FLD_LVL QRY_INST_FLD_LVL_LOOP_2
 , QRY_Instance_FLD QRY_INST_FLD_LOOP
 , Persons Persons_DECL
 , catalogs cat_search

 , tmp_UserAlt

;

window winTmp_Alg 'Выбор алгоритма', cyan;
browse brTmp_Alg;
 table Tmp_Alg;
  Fields
   Tmp_Alg.Npp  '№','п/п'            : [1], Protect, NoPickButton;
   Tmp_Alg.Key  'Ключ','формула'     : [6], Protect, NoPickButton;
   Tmp_Alg.Prim 'Описание','формулы' : [12], Protect, NoPickButton;
end;
end;
windowevent winTmp_Alg ;
 cminit:{
  Fill_Tmp_alg;
 }
 cmdefault: {
   closewindowex(winTmp_Alg, cmDefault)
 }
end;
function GetFormula : string; {
 result := '';
 if runwindowmodal(winTmp_Alg) = cmDefault {
   result := Tmp_Alg.Key;
 }
}



function TestQueryTemplate(_fcQRY_TMPLT : comp; var _err : string): boolean; {
   if BoundActive(tbbyQRY_TMPLTNrec) {
     popbounds(tbbyQRY_TMPLTNrec);
   }
  set _cQRY_TMPLT := _fcQRY_TMPLT;
  pushbounds(tbbyQRY_TMPLTNrec);

 if getfirst QRY_TMPLT <> tsOK {
   _err := 'Не найден шаблон запроса ' + string(_fcQRY_TMPLT ,0,0);
   result := false;
 }

  var objQuery: iQuery;
  var _qryID   : tPtR;
  var oResultSet : IResultSet;

  sqlFreeStr(_qryID);
  _qryID := 0;

  MysqlAddStr(_qryID, ' select top 1 1                                    ');

  MysqlAddStr(_qryID, ' from '+GetTableNameByCode(QRY_TMPLT.TABLECODE));
  _loop QRY_TMPLTSP {
      if QRY_TMPLTSP.TABLECODE > 0 // на случай если нет спецификации т.е. JOIN
       MysqlAddStr(_qryID, QRY_TMPLTSP.join_type + ' ' +TblTMPLTSP.XF$NAME + ' ' + QRY_TMPLTSP.SynonimName + ' on ' + QRY_TMPLTSP.JoinTerms);
    }
  MysqlAddStr(_qryID, ' where');
   MemoFile.OpenMemo(QRY_TMPLT.WhereTerms);
   do {
      var StringValue1 : string = '';
      MemoFile.readln(StringValue1);
      MysqlAddStr(_qryID, StringValue1);
    } while (not MemoFile.EOF);
   MemoFile.Close;

  objQuery := queryManager.createQuery(_qryID);
  if (objQuery.execute.errorCode != tsOk) then {
    _err := 'Ошибка проверки записей'+ objQuery.ErrorCode;
    mylog(_err);
    result := false;
    sqlFreeStr(_qryID);
    Exit;
  }
  else{
    result := true;
  }
}

Procedure addSysFieldsForLevels; {
  _loop QRY_INST_FLD_LVL {
    if getfirst QRY_INST_FLD_CHECK_LVL where ((QRY_INST.nrec == QRY_INST_FLD_CHECK_LVL.cInstance
                                   and QRY_INST_FLD_LVL.nrec == QRY_INST_FLD_CHECK_LVL.cLevel )) <> tsOK {
      var _sysYOUDONTHAVETOSEETHIS : string = coYOUDONTHAVETOSEETHIS + replaceProhibitSymbols(OleGenerateGUID);
      insert current QRY_INST_FLD_CHECK_LVL set
         QRY_INST_FLD_CHECK_LVL.cLevel       := QRY_INST_FLD_LVL.nrec
       , QRY_INST_FLD_CHECK_LVL.cInstance    := QRY_INST.nrec
       , QRY_INST_FLD_CHECK_LVL.TableName    := 'NO TABLE'
       , QRY_INST_FLD_CHECK_LVL.TableCode    := word(-1)
       , QRY_INST_FLD_CHECK_LVL.FieldSynonim := _sysYOUDONTHAVETOSEETHIS
       , QRY_INST_FLD_CHECK_LVL.FieldJSON    := _sysYOUDONTHAVETOSEETHIS
       , QRY_INST_FLD_CHECK_LVL.FieldName    := ''''''
      ;
    }
  }
}

function checkFieldsDuplicate(var _err: string) : boolean; {
   if VisualizationActive then setvisualheader('проверка полей запроса');
    addSysFieldsForLevels;
    mylog('проверка полей запроса');
  delete all tCheckFields_1;
  _loop QRY_INST_FLD {
    insert tCheckFields_1 set
       tCheckFields_1.nrec         := QRY_INST_FLD.nrec
     , tCheckFields_1.FieldNam     := QRY_INST_FLD.FieldName
     , tCheckFields_1.FieldSynonim := QRY_INST_FLD.FieldSynonim
     , tCheckFields_1.FieldJSON    := QRY_INST_FLD.FieldJSON
     , tCheckFields_1.cLevel       := QRY_INST_FLD.cLevel
    ;
  }

  _Loop tCheckFields_1 {
      var _prohstr : string = '';
      if trim(tCheckFields_1.cLevel) = 0h {
          _err := 'Не указан уровень вложенности поля JSON "'+tCheckFields_1.FieldNam+'"';
          result := false;
          exit;
        }

      if trim(tCheckFields_1.FieldJSON) = '' {
          _err := 'Не указано наименование поля JSON "'+tCheckFields_1.FieldNam+'"';
          result := false;
          exit;
        }

      if(getfirst tCheckFields_2 where
                              tCheckFields_2.nrec         <> tCheckFields_1.nrec
                          and tCheckFields_2.cLevel      = tCheckFields_1.cLevel
                          and trim(tCheckFields_2.FieldJSON) = trim(tCheckFields_1.FieldJSON)
        ) = tsok {
          _err := 'Дубль наименование поля JSON "'+tCheckFields_1.FieldJSON+'" на одном уровне вложенности "'+
              if(getfirst QRY_INST_FLD_LVL_LOOP_1 where ((tCheckFields_1.cLevel == QRY_INST_FLD_LVL_LOOP_1.nrec)) = tsOK,QRY_INST_FLD_LVL_LOOP_1.fld_json_name,'НЕ ВЫБРАН')+'"';
          result := false;
          exit;
        }

      if IsStrHaveProhibitSymbols(trim(tCheckFields_1.FieldSynonim), _prohstr) {
        _err := 'Поле "'+tCheckFields_1.FieldNam+'" синоним "'+ trim(tCheckFields_1.FieldSynonim)+'" содержит запрещенный символ "'+_prohstr+'"';
        result := false;
        exit;
      }

      if trim(tCheckFields_1.FieldNam) = '' {
          _err := 'Есть пустое поле в запросе nrec = ' + string(tCheckFields_1.nrec,0,0);
          result := false;
          exit;
        }


      if trim(tCheckFields_1.FieldSynonim) = '' {
          _err := 'Не указан синоним поля "'+tCheckFields_1.FieldNam+'"';
          result := false;
          exit;
        }

      if(getfirst tCheckFields_2 where
                              tCheckFields_2.nrec         <> tCheckFields_1.nrec
                          and trim(tCheckFields_2.FieldSynonim) = trim(tCheckFields_1.FieldSynonim)
        ) = tsok {
          _err := 'Дубль синонима поля "'+tCheckFields_2.FieldSynonim+'"';
          result := false;
          exit;
        }

  }
  result := True;
}

function getinsertUniqValuesByLVL(_cLevel : comp; _arrOneValue : String_xMaxEl; _cParentJSON : comp): comp; {
 result := 0h;
  var _arrNumsOfValue : array[1..1] of word;
    _loop QRY_INST_FLD_LOOP where(( _cQRY_INST == QRY_INST_FLD_LOOP.cInstance
                                and _cLevel == QRY_INST_FLD_LOOP.cLevel)) {
        var _i : word = 0;
        for (_i := 1; _i<= getlimit(arrAbstrResultFldNames); _i++) {
          if arrAbstrResultFldNames[_i] = QRY_INST_FLD_LOOP.FieldSynonim
           then {
             _arrNumsOfValue[getlimit(_arrNumsOfValue)] := _i;
             setlimit(_arrNumsOfValue,getlimit(_arrNumsOfValue)+1);
           }
        }
      }
    setlimit(_arrNumsOfValue,getlimit(_arrNumsOfValue)-1);
    if getlimit(_arrNumsOfValue) = 0 then exit;
    var _isequal : boolean = False;
    var _i : word = 0;
       _loop tForExportJSON where ((_cLevel == tForExportJSON.cLVL
                           and _cParentJSON == tForExportJSON.cParent))
                   and tForExportJSON.value[_arrNumsOfValue[1]] = _arrOneValue[_arrNumsOfValue[1]] // встаем на позицию по первому значению, а потом сравним в строке остальные
         {
          _isequal := True;
          if getlimit(_arrNumsOfValue) > 1 then {
              for (_i := 2; _i<= getlimit(_arrNumsOfValue); _i++) {
                 if tForExportJSON.value[_arrNumsOfValue[_i]] <> _arrOneValue[_arrNumsOfValue[_i]] then { // сравниваем все значения в строке
                    _isequal := false;
                    break;
                 }
               }
           }
           if _isequal then break; // все значения по строке сошлись
         }


    if _isequal = false {
      clearbuffer(#tForExportJSON);
      for (_i := 1; _i<= getlimit(_arrNumsOfValue); _i++) {
         tForExportJSON.value[_arrNumsOfValue[_i]] := _arrOneValue[_arrNumsOfValue[_i]];
        }
       tForExportJSON.cLVL    := _cLevel;
       tForExportJSON.cParent := _cParentJSON;
      insert current tForExportJSON;
    }
  result := tForExportJSON.nrec;
}
procedure insertvaluesbylevel(_fcLevel : comp; _arrOneValue : String_xMaxEl; _cParentJSON : comp);
{
 _cParentJSON := getinsertUniqValuesByLVL(_fcLevel,_arrOneValue,_cParentJSON);

  _loop QRY_INST_FLD_LVL_LOOP where ((_cQRY_INST == QRY_INST_FLD_LVL_LOOP.cInstance
                                     and _fcLevel == QRY_INST_FLD_LVL_LOOP.cLevel (noindex)
                                     )) {
    pushpos(#QRY_INST_FLD_LVL_LOOP);
     insertvaluesbylevel(QRY_INST_FLD_LVL_LOOP.nrec, _arrOneValue, _cParentJSON);
    poppos(#QRY_INST_FLD_LVL_LOOP);
  }
}

function GenerateJSONfromtForExportJSON(_cParentJSON, _cLVL : comp; var _fld_json_name : string) : tptr;
{
//  JSONObj := HttpConnect_JsonObjectCreate(m_service);
  var JSONObj_Array : tptr;
  var JSONObj_ArrayOneElement : tptr;

   var isFound : boolean = false;

   if getfirst QRY_INST_FLD_LVL_LOOP_2 where ((_cLVL == QRY_INST_FLD_LVL_LOOP_2.nrec)) <> tsOK then exit;

//      JSONObj_Array := HttpConnect_JsonArrayCreate(m_service);

  _loop tForExportJSON where ((_cParentJSON  == tForExportJSON.CPARENT and _cLVL == tForExportJSON.cLVL)) {
    if isFound = false {
      JSONObj_Array := HttpConnect_JsonArrayCreate(m_service);
      isFound := true;
     }

   if (HttpConnect_LastError(m_service) <> 0) then mylog('HttpConnect_LastErrorText = ' + HttpConnect_LastErrorText(m_service));
   JSONObj_ArrayOneElement := HttpConnect_JsonObjectCreate(m_service);
    var _arrNumsOfValue : array[1..1] of word;
    _loop QRY_INST_FLD_LOOP where(( _cQRY_INST == QRY_INST_FLD_LOOP.cInstance
                       and tForExportJSON.cLvl == QRY_INST_FLD_LOOP.cLevel)) {
       if pos(coYOUDONTHAVETOSEETHIS,QRY_INST_FLD_LOOP.FieldJSON) <> 0 then { // по сути мы сгенерировали пустые секции по уровням вложенности
           //mylog('QRY_INST_FLD_LOOP.FieldJSON like  ' + coYOUDONTHAVETOSEETHIS + ' continue');
           continue; //
        }

       if (HttpConnect_LastError(m_service) <> 0) then mylog('HttpConnect_LastErrorText = ' + HttpConnect_LastErrorText(m_service));
        var _i : word = 0;
        for (_i := 1; _i<= getlimit(arrAbstrResultFldNames); _i++) {
          if arrAbstrResultFldNames[_i] = QRY_INST_FLD_LOOP.FieldSynonim
           then {
             HttpConnect_JsonObjectAddString(m_service, JSONObj_ArrayOneElement, QRY_INST_FLD_LOOP.FieldJSON, tForExportJSON.value[_i]);
             if (HttpConnect_LastError(m_service) <> 0) then mylog('HttpConnect_LastErrorText = ' + HttpConnect_LastErrorText(m_service));
           }
        }
      }

    if getfirst tForExportJSON_1 where ((tForExportJSON.nrec  == tForExportJSON_1.CPARENT))  = tsOK {

       _loop QRY_INST_FLD_LVL_LOOP where ((_cQRY_INST == QRY_INST_FLD_LVL_LOOP.cInstance)){
            pushpos(#QRY_INST_FLD_LVL_LOOP);
            pushpos(#tForExportJSON);
            var _JSONObj_ArraySUB : tptr = GenerateJSONfromtForExportJSON(tForExportJSON.nrec, QRY_INST_FLD_LVL_LOOP.nrec, _fld_json_name);
            poppos(#tForExportJSON);
            poppos(#QRY_INST_FLD_LVL_LOOP);
            if _fld_json_name <> '' then {
              HttpConnect_JsonObjectAddObject(m_service, JSONObj_ArrayOneElement, _fld_json_name, _JSONObj_ArraySUB);
            }
          }
    }

    HttpConnect_JsonArrayAddObject(m_service, JSONObj_Array, JSONObj_ArrayOneElement);
    if (HttpConnect_LastError(m_service) <> 0) then mylog('HttpConnect_LastErrorText = ' + HttpConnect_LastErrorText(m_service));
    if getfirst QRY_INST_FLD_LVL_LOOP_2 where ((_cLVL == QRY_INST_FLD_LVL_LOOP_2.nrec)) <> tsOK then exit;
    _fld_json_name := QRY_INST_FLD_LVL_LOOP_2.fld_json_name;
    // mylog('_fld_json_name = ' + _fld_json_name)
   }

 result := JSONObj_Array;
}


function generateJSONFromtAbstrResultValues : tptr; {
 if VisualizationActive then setvisualheader('JSON формирование структуры');
  mylog('заполняем tForExportJSON');
   _loop tAbstrResultValues {
     var _arrOneValue : String_xMaxEl;
     var _i : word = 0;
     for(_i:=1;_i <= coMaxElemets; _i++){
         _arrOneValue[_i] := tAbstrResultValues.value[_i];
       }
      insertvaluesbylevel(0h, _arrOneValue, 0h);  // заполняем tForExportJSON
    }

  mylog('recordsintable(tntForExportJSON) = ' + string(recordsintable(tntForExportJSON)));
 //   putTableToDBF(#tForExportJSON, GenerateNewFile+'_tForExportJSON.dbf', ptfFullTable);
  mylog('start GenerateJSONfromtForExportJSON');
   var _fld_json_name : string = '';
   var JSONObj_Array : tptr;
   JSONObj := HttpConnect_JsonObjectCreate(m_service);
       _loop QRY_INST_FLD_LVL_LOOP_1 where ((_cQRY_INST == QRY_INST_FLD_LVL_LOOP_1.cInstance)) {
              JSONObj_Array := GenerateJSONfromtForExportJSON(0h, QRY_INST_FLD_LVL_LOOP_1.nrec, _fld_json_name);
              if _fld_json_name <> '' then {
              HttpConnect_JsonObjectAddObject(m_service, JSONObj, _fld_json_name, JSONObj_Array);
            }
          }
  mylog('end GenerateJSONfromtForExportJSON');
   result := JSONObj;
}
Procedure Fill_Tmp_alg_One(_Npp:word; _Key:string; _Prim:string='');
{  Insert into Tmp_Alg set
      Tmp_Alg.Npp :=_Npp
    , Tmp_Alg.Key :=_Key
    , Tmp_Alg.Prim:=_Prim
   ;
}

procedure Add_UserInterfaces;
{
  if (LoadImplementationList('SNG_QRY::IQRY_ALG_USER', 'QRY_ALG_USER_'))
  {
    StartNewVisual(vtNumericVisual, vfTimer + vfBreak, 'Загрузка списка пользовательских алгоритмов...', 1);
    _try
    {
      var I: integer = 0;
      for (I := 0; I < GetImplementationCount; I := I + 1) {
        var _QRY_ALG_USER : IQRY_ALG_USER;
        if LoadvipRef(_QRY_ALG_USER, GetImplementationName(I)) {
          Fill_Tmp_alg_One(recordsintable(tnTmp_Alg)+1,'%USER_INTERFACE('+replace(GetImplementationName(I), 'SNG_QRY::QRY_ALG_USER_', '')+',''%VALUE%'')%',_QRY_ALG_USER.GetDescription);
          FreeVipInterface(_QRY_ALG_USER);
        }
        NextVisual;
      }
    }
    _except
      on ExUserBreak : {};
    _finally
      StopVisual('', 0);
  }
} //Function ChooseInterface(_wType_Alg:word):string;

#doc
  Заполнить справочник алгоритмов
#end
Function Fill_Tmp_alg : boolean;
{ Result:=True;
  //if wType_Alg=_wType_Alg
  // if (getfirst Tmp_Alg)=tsok      Exit;
  // delete Tmp_Alg;
  if (getfirst Tmp_Alg)=tsok
     Exit;
//   Fill_Tmp_alg_One(00,'USERNAME','Имя текущего пользователя');
   Fill_Tmp_alg_One(01,'%DECLENSION(%VALUE%,NCASE)%','Склонение ФИО ,%VALUE%=persons.nrec, NCASE - номер падежа (2-6)');
   Fill_Tmp_alg_One(02,'%UP_CATALOGS_UNDER_CODE(%VALUE%,''0000'')%','Подняться вверх по CATALOGS пока вышестоящая запись не будет иметь код = второй параметр. %VALUE% = CATALOGS.NREC ');
   Fill_Tmp_alg_One(03,'%DIVSTR(%VALUE%)%','Из указанной строки выделяется первое слово, в том числе и с дефисами. %VALUE% = ФИО');
   Fill_Tmp_alg_One(04,'%GET_LASTNAME(%VALUE%)%','Извлечение фамилии из заданной строки ФИО. %VALUE% = ФИО');
   Fill_Tmp_alg_One(05,'%GET_FIRSTNAME(%VALUE%)%','Извлечение имени из заданной строки ФИО. %VALUE% = ФИО');
   Fill_Tmp_alg_One(06,'%GETPATRONYMIC(%VALUE%)%','Извлечение отчества из заданной строки ФИО. %VALUE% = ФИО');
   Fill_Tmp_alg_One(07,'%GETFIOIN(%VALUE%)%','ФИО в формате "Фамилия И.О.". %VALUE% = ФИО');
   Fill_Tmp_alg_One(08,'%GETFIO_ZAR(%VALUE%)%','ФИО в формате, заданном настройкой "Настройки Галактики \ Управление персоналом \ Расчеты с персоналом \ Отчеты \ Вывод ФИО". %VALUE% = ФИО');
   Fill_Tmp_alg_One(09,'%GETRUB(%VALUE%,okrug1)%','Выделяет рубли из суммы = %VALUE%, okrug1 - количество знаков после запятой');
   Fill_Tmp_alg_One(10,'%GETKOP(%VALUE%, okrug1)%','Выделяет копейки из суммы = %VALUE% и округляет с указанной точностью');
   Fill_Tmp_alg_One(11,'%GETSUMRATE(%VALUE%,okrug1)%','Округляет сумму=%VALUE% с указанной точностью и преобразует в строку');
   Fill_Tmp_alg_One(12,'%GETFIODIR%','ФИО из настройки "Право подписи приказов по персоналу" или из настройки "Руководитель"');
   Fill_Tmp_alg_One(13,'%EXTERNALPARAMETER%','Возвращает входной внешний параметр ()');


   Add_UserInterfaces;
} //Function Fill_Tmp_alg(_wType_Alg:word):boolean;



function getpodrunder_nrec(_code : string; _crec , _cParent: comp) : comp; cacheable;{

//  mylog('getpodrunder_nrec _code = ' +_code+' _crec = '+ _crec+ ' _cParent = '+ _cParent);

  if getfirst fastfirstrow cat_search where ((_cParent == cat_search.nrec)) = tsOK
   {
    if cat_search.code = _code {
        if getfirst fastfirstrow cat_search where ((_crec == cat_search.nrec)) = tsOK {
          result := cat_search.nrec;
          exit;
        }
        else {
         result := 0h;
         exit;
        }
      }
      else {
        result := getpodrunder_nrec(_code, cat_search.nrec, cat_search.cParent)
      }
   }
   else {
     result := 0h;
     exit;
   }
}

function getpodrunder(_code : string; _crec , _cParent: comp) : string; cacheable;{
  result := '';
//  mylog('getpodrunder _code = ' +_code+' _crec = '+ _crec+ ' _cParent = '+ _cParent);
  var _crec : comp = getpodrunder_nrec(_code, _crec, _cParent);
//  mylog('getpodrunder _crec = ' +_crec);
   if getfirst cat_search where (( _crec == cat_search.nrec)) = tsOK then result := cat_search.longname ;
}

//----------------------------------------
// освободить пользовательские алгоритмы
//----------------------------------------
Procedure Free_QRY_ALG_USER;
{
  var _cntArr, _i:word=0;
  _cntArr:=count(_arrQRY_USER_ALG);
  if _cntArr=0 then exit;

  delete all tmp_UserAlt;
  for(_i:=1;_i<=_cntArr;_i := _i+1) {
    if not NullVipRef(_arrQRY_USER_ALG[_i]) {
    FreeVipInterface(_arrQRY_USER_ALG[_i]);
    }
  } //for(kk:=1;kk<count(RPD_A);kk:= kk+1)
  SetLimit(_arrQRY_USER_ALG,0)
} //Procedure Free_QRY_ALG_USER;


function ReplaceByValues(Formula:string; _value: string; _strParameter: string = ''):string; cacheable;
{
  Fill_Tmp_alg;
//  mylog('function ReplaceByValues Formula = '+ Formula + ' _value = ' +_value );
  Formula := replace(UPCASE(Formula),UPCASE('%value%'),_value);


  result:=UpCase(Formula);
//  mylog('ReplaceByValues Formula = ' + Formula);
//   mylog('function ReplaceByValues  replace(Formula) ='+ Formula);
  _Loop Tmp_Alg ordered by Index Tmp_Alg02
  {
     //нужно вычислять
      var _Key,_SubKey:string;
      var _stop:word=0;
      _SubKey:='';
      _Key:=UpCase(Tmp_Alg.Key);
      if pos('(',_Key)>0
      { _Key:=substr(_Key,1,pos('(',_Key));
        _SubKey:=')%'
      }
//if timelog_Status>2 then timelog('_Key='+_Key+'; _SubKey='+_SubKey);
      do {
        var ii_first,_Len:word;
        ii_first:=pos(_Key,Result);
        var _Parameter:string='';
        _Len:=0;
        if ii_first=0 break;
        //длина подстроки всегда короче на 2 символа
        if _SubKey<>''
        { _Len:=Pos(_SubKey,Substr(Result,ii_first+Length(_Key),255))-1;
          _Parameter:=Substr(Result,ii_first+Length(_Key),_Len);
        }
        else _len:=0;

//        mylog('_Len='+string(_Len)+'; _Parameter='+_Parameter+'; _Key='+_Key+'; Formula='+ Formula);

        var _Res:string;//результат
        _Res:='';
        case _Key of
        //01, %EM_FieldDocbyPers(wtype,Filedname,param)% -  wtype = word,
        // Filedname = string, param - string. Получает значение поля ведомости по типу док-та
        //и наименованию поля: в текущем месяце находится док-нт типа,
        //в нем ищется строка по человеку и в этой строке берется значение поля
        //FieldName. Param - дополнительный параметр');
        '%DECLENSION(': {
          /*
          %VALUE% - NREC persons
          1-6 - номер падежа
          */
          var _cPerson : comp = comp(ParseWord(_Parameter,1,','));
          var _NCase   : word = word(ParseWord(_Parameter,2,','));

          //mylog('_cPerson = ' + _cPerson + ' _NCase = ' + _NCase);

          var _Infinitive : string = '';
          if getfirst fastfirstrow persons_decl where ((_cPerson == persons_decl.nrec)) = tsOK {
            _Infinitive := persons_decl.fio
          }
          _res:=''''+Odecl.FIODeclension(_cPerson, _Infinitive, _NCase)+'''';
          //mylog('_res = ' + _res);
         }
        '%UP_CATALOGS_UNDER_CODE(': {
          _res := ''' ''';
          var _cCatalogs : comp = comp(ParseWord(_Parameter,1,','));
          var _UpperCode : string = ParseWord(_Parameter,2,',');
//          mylog('%UP_CATALOGS_UNDER_CODE( _cCatalogs = ' + _cCatalogs + ' _UpperCode = '  + _UpperCode);
          if getfirst fastfirstrow cat_search where ((_cCatalogs == cat_search.nrec)) = tsOK {
             _res := ''''+getpodrunder(_UpperCode, cat_search.nrec, cat_search.cParent)+'''';
//             mylog('_res =' + _res);
           }
         }
        '%DIVSTR(': { // Из указанной строки выделяется первое слово, в том числе и с дефисами
                var _Fio : string = ParseWord(_Parameter,1,',');
               _res := ''''+_iStrFunc.DivStr(_Fio)+'''';
         }
        '%GET_LASTNAME(':{ // Извлечение фамилии из заданной строки ФИО
                var _Fio : string = ParseWord(_Parameter,1,',');
               _res := ''''+_iStrFunc.Get_LastName(_Fio)+'''';
         }
        '%GET_FIRSTNAME(':{ // Извлечение имени из заданной строки ФИО
                var _Fio : string = ParseWord(_Parameter,1,',');
               _res := ''''+_iStrFunc.Get_FirstName(_Fio)+'''';
         }
        '%GETPATRONYMIC(':{ // Извлечение отчества из заданной строки ФИО
                var _Fio : string = ParseWord(_Parameter,1,',');
               _res := ''''+_iStrFunc.GetPatronymic(_Fio)+'''';
         }
        '%GETFIOIN(':{ // ФИО в формате "Фамилия И.О."
                var _Fio : string = ParseWord(_Parameter,1,',');
                if _iStrFunc.GetFioIn(_Fio) then {
                 _res := ''''+_Fio+'''';
                }
         }
        '%GETFIO_ZAR(':{ // ФИО в формате, заданном настройкой "Настройки Галактики \ Управление персоналом \ Расчеты с персоналом \ Отчеты \ Вывод ФИО"
                var _Fio : string = ParseWord(_Parameter,1,',');
               _res := ''''+_iStrFunc.GetFIO_ZAR(_Fio)+'''';
         }
        '%GETRUB(':{ // Выделяет рубли из суммы
                var _Sum : double = double(ParseWord(_Parameter,1,','));
                var _okrug1 : double = double(ParseWord(_Parameter,2,','));
               _res := ''''+_iStrFunc.GetRub(_Sum, _okrug1)+'''';
         }
        '%GETKOP(':{ // Выделяет копейки из суммы и округляет с указанной точностью
                var _Sum : double = double(ParseWord(_Parameter,1,','));
                var _okrug1 : double = double(ParseWord(_Parameter,2,','));
               _res := ''''+_iStrFunc.GetKop(_Sum, _okrug1)+'''';
         }
        '%GETSUMRATE(':{ // Округляет сумму с указанной точностью и преобразует в строку
                var _Sum : double = double(ParseWord(_Parameter,1,','));
                var _okrug1 : double = double(ParseWord(_Parameter,2,','));
               _res := ''''+_iStrFunc.GetSumRate(_Sum, _okrug1)+'''';
         }
         '%EXTERNALPARAMETER%':{
           _res := ''''+_strParameter+'''';
         }
        '%USER_INTERFACE(':
        {
          var _par2:string;
          _par2:=ParseWord(_Parameter,2,',');
          _Parameter:=ParseWord(_Parameter,1,',');

          var ww_num:word=0;
          if Getfirst tmp_UserAlt where (( _Parameter == tmp_UserAlt.Name )) <> tsOk {
            Insert into tmp_UserAlt set tmp_UserAlt.Name:=_Parameter;
          }
          else  {
            ww_num:=tmp_UserAlt.num;
           }

          do
          { if ww_num=0
            { ww_num:=count(_arrQRY_USER_ALG)+1;
              SetLimit(_arrQRY_USER_ALG,ww_num);
              if LoadvipRef(_arrQRY_USER_ALG[ww_num], 'SNG_QRY::QRY_ALG_USER_'+_Parameter){
               update current tmp_UserAlt set tmp_UserAlt.Num:=ww_num;
              }
              else break;
            }
            _Res:=_arrQRY_USER_ALG[ww_num].Calc(_Par2);
            Break;
          } while True;
        }

        end;
//        mylog('_Res='+_Res);
        Result:=Substr(Result,1,ii_first-1)
               +_Res
               +Substr(Result,ii_first+Length(_Key)+if(_len=0,0,_Len+2),255);
        //Timelog('Result='+Result);
        //подстрахуемся, если что то пойдет не так
        _stop++;
        if _stop>0 break;
        //Break;
      } while True;
  } //_Loop Tmp_Alg ordered by Imdex Tmp_Alg02
  //mylog('ReplaceByValues = ' +Result);
} //function ReplaceByValues(Formula:string):string;

function ApplyFormulaToValue(_value, _Formula: string; _strParameter : string) : string; {
  //mylog('function ApplyFormulaToValue _value ='+_value+' _Formula = ' + _Formula);
  result := _value;
  if trim(_Formula)<> '' {
    var _error : string;
//    mylog('ApplyFormulaToValue _Formula = '+ _Formula);
    var _ReplaceByValues : string = ReplaceByValues(_Formula, _value , _strParameter);
//    mylog('ApplyFormulaToValue _ReplaceByValues = '+ _ReplaceByValues);
    result := LotExpressionFunc(_ReplaceByValues, _error);
    if trim(_error) <> '' then mylog('LotExpressionFunc Ошибка вычисления по формуле "'+_ReplaceByValues+'". Ошибка: '+_error);
   }
}
function generateJSONByResultSet(_fQRY_INST_CODE : string; _iRes : iResultSet; var FNservice, JSONSJSON : TPtr;  var _err: string; _strParameter : string = ''): boolean; {

 if VisualizationActive then setvisualheader('JSON формирование временной таблицы из результата запроса');

 if getfirst QRY_Instance_1 where ((_fQRY_INST_CODE == QRY_Instance_1.code)) <> tsOK then {
   _err := 'Не найден экземпляр запроса по коду "' + _fQRY_INST_CODE + '"';
   mylog(_err);
   exit;
  }

 if BoundActive(tbbyQRY_INSTNrec) {
     popbounds(tbbyQRY_INSTNrec);
 }
 set _cQRY_INST := QRY_Instance_1.nrec;
  pushbounds(tbbyQRY_INSTNrec);

   if NullVipRef(_iRes) then {
     _err := 'ОШИБКА ВЫПОЛНЕНИЯ ЗАПРОСА В БД';
     mylog(_err);
     result := false;
     exit;
    }

   if _iRes.getFirst <>  tsOk {
     _err := 'В результате запроса нет данных';
     mylog(_err);
     result := false;
     exit;
    }


  Free_QRY_ALG_USER;
  m_service := HttpConnect_CreateEx('http://ya.ru', '', '', true);
  FNservice := m_service;


    SetLimit(arrAbstrResultFldNames,0);
    SetLimit(arrAbstrResultFldNames,1);
    SetLimit(arrFldFormulas,0);
    SetLimit(arrFldFormulas,1);

   _loop QRY_INST_FLD {
      arrAbstrResultFldNames[getlimit(arrAbstrResultFldNames)] := QRY_INST_FLD.FieldSynonim;
      arrFldFormulas[getlimit(arrFldFormulas)] := QRY_INST_FLD.PostFunction;
      SetLimit(arrAbstrResultFldNames, GetLimit(arrAbstrResultFldNames) + 1);
      SetLimit(arrFldFormulas, GetLimit(arrFldFormulas) + 1);
    }
   SetLimit(arrAbstrResultFldNames, GetLimit(arrAbstrResultFldNames) - 1);
   SetLimit(arrFldFormulas, GetLimit(arrFldFormulas) - 1);
 if VisualizationActive then setvisualheader('JSON вычисление значений по пост-функциям');
  mylog('start JSON вычисление значений по пост-функциям');
  delete all tAbstrResultValues;
    do {
        var _i : word = 1;
        clearbuffer(tntAbstrResultValues);
        for (_i := 1; _i<= getlimit(arrAbstrResultFldNames); _i++) {
           tAbstrResultValues.value[_i] := ApplyFormulaToValue(_iRes.row.val(arrAbstrResultFldNames[_i]),arrFldFormulas[_i], _strParameter);
         }
        insert current tAbstrResultValues;
     } while _iRes.getNext = tsOk;
  mylog('end JSON вычисление значений по пост-функциям');
   var JSONObj_Array : tptr = 0;
    JSONObj_Array := generateJSONFromtAbstrResultValues;

   JSONSJSON := HttpConnect_JSONObjectToJSON(m_service,JSONObj_Array);
//   HttpConnect_Free(m_service) ;

   result := true;
}

function replaceMacro(_FieldName : string): string; {
   result := replace(Upcase(_FieldName),UPCASE('%USERNAME%'),UserName)
}
function ExecuteQueryInstanceWithAddWhereString(_fQRY_INST_CODE : string; _addWhereString : string; var _iRes : iResultSet; var _err : string): boolean;{
 result := false;
 if getfirst QRY_Instance_1 where ((_fQRY_INST_CODE == QRY_Instance_1.code)) <> tsOK then {
   _err := 'Не найден экземпляр запроса по коду "' + _fQRY_INST_CODE + '"';
   mylog(_err);
   exit;
  }

 if BoundActive(tbbyQRY_INSTNrec) {
     popbounds(tbbyQRY_INSTNrec);
 }
 set _cQRY_INST := QRY_Instance_1.nrec;
  pushbounds(tbbyQRY_INSTNrec);

 setFieldSynonims;

 if not checkFieldsDuplicate(_err) {
   mylog(_err);
   result := false;
   exit;
 }

 if getfirst QRY_INST <> tsOK {
   _err := 'Не найден запрос ';
   mylog(_err);
   result := false;
   exit;
 }
  if getfirst QRY_INST_FLD <> tsOK {
   _err := 'Не найдены поля запроса ';
   mylog(_err);
   result := false;
   exit;
  }


 if getfirst QRY_INST_TMPLT <> tsOK {
   _err := 'Не найден шаблон в запросе';
   mylog(_err);
   result := false;
   exit;
 }

  var objQuery: iQuery;
  var _qryID   : tPtR;
  var oResultSet : IResultSet;

  sqlFreeStr(_qryID);
  _qryID := 0;
    if VisualizationActive then setvisualheader('заполнение полей запроса');
  MysqlAddStr(_qryID, ' select ');
   var _isFirstStep : boolean = True;
  _loop QRY_INST_FLD {
     MysqlAddStr(_qryID, if(_isFirstStep,'',',')+replaceMacro(QRY_INST_FLD.FieldName)  + if(trim(QRY_INST_FLD.FieldSynonim) <> '',' as "'  +trim(QRY_INST_FLD.FieldSynonim)+'"',''));
    _isFirstStep := false;
  }


  MysqlAddStr(_qryID, ' from '+GetTableNameByCode(QRY_INST_TMPLT.TABLECODE));
  _loop QRY_INST_TMPLTSP {
     if QRY_INST_TMPLTSP.TABLECODE > 0 //  на случай, если нет спецификации т.е. JOIN
      MysqlAddStr(_qryID, QRY_INST_TMPLTSP.join_type + ' ' +TblINST_TMPLTSP.XF$NAME + ' ' + QRY_INST_TMPLTSP.SynonimName + ' on ' + QRY_INST_TMPLTSP.JoinTerms);
    }
  MysqlAddStr(_qryID, ' where');
  MysqlAddStr(_qryID, '(');
  //условия в секцию WHERE из шаблона
   MemoFile.OpenMemo(QRY_INST_TMPLT.WhereTerms);
   do {
      var StringValue1 : string = '';
      MemoFile.readln(StringValue1);
      MysqlAddStr(_qryID, StringValue1);
    } while (not MemoFile.EOF);
   MemoFile.Close;

  // добавляем условия в секцию WHERE из экземпляра
   MemoFile.OpenMemo(QRY_INST.AddWhereTerms);
   do {
      var StringValue1 : string = '';
      MemoFile.readln(StringValue1);
      MysqlAddStr(_qryID, StringValue1);
    } while (not MemoFile.EOF);
   MemoFile.Close;
  MysqlAddStr(_qryID, ')');
  MysqlAddStr(_qryID, _addWhereString);
  if VisualizationActive then setvisualheader('SQL проверка запроса');
  objQuery := queryManager.createQuery(_qryID);
  if (objQuery.execute.errorCode != tsOk) then {
    _err := 'Ошибка проверки записей в запросе '+ objQuery.ErrorCode;
    mylog(_err);
    sqlFreeStr(_qryID);
    Exit;
  }
  if VisualizationActive then setvisualheader('SQL передача запроса в объект');
 _iRes := objQuery.getResultSet;
 result := true;
}
function ExecuteQueryInstanceWithAddNrecRootTable(_fQRY_INST_CODE : string; _RootTableNrec : comp; var _iRes : iResultSet; var _err : string): boolean;{

 if getfirst QRY_Instance_1 where ((_fQRY_INST_CODE == QRY_Instance_1.code)) <> tsOK then {
   _err := 'Не найден экземпляр запроса по коду "' + _fQRY_INST_CODE + '"';
   mylog(_err);
   exit;
  }

 if BoundActive(tbbyQRY_INSTNrec) {
     popbounds(tbbyQRY_INSTNrec);
 }
 set _cQRY_INST := QRY_Instance_1.nrec;
  pushbounds(tbbyQRY_INSTNrec);

   var _addWhereString : string = 'and ' + GetTableNameByCode(QRY_INST_TMPLT.TABLECODE) + '.nrec = ' + string(_RootTableNrec);
   result := ExecuteQueryInstanceWithAddWhereString(_fQRY_INST_CODE, _addWhereString,_iRes,_err);
}

function TestQueryInstance(_fQRY_INST_CODE : string; var _err : string): boolean;{
  StartNewVisual(vtRotateVisual, vfTimer,'Выполнение запроса',0);
  var _iRes : iResultSet;
  result := false;

  if not ExecuteQueryInstanceWithAddWhereString(_fQRY_INST_CODE, '',_iRes,_err) then exit;

  var _JSON : tptr;

  var FNservice : tptr;
  if not generateJSONByResultSet(_fQRY_INST_CODE, _iRes, FNservice, _JSON, _err) then {
    stopvisual('',0);
    exit;
  }
  var _file : string = GenerateNewFile+'.json';
  HttpConnect_SaveToFileEx(FNservice, _JSON, _file, cpUTF8, false);
  stopvisual('',0);
  putfiletoclient(_file,false);
  result := true;
}


function GenerateJSONFromQueryInstanceByNrecRootTable(_fQRY_INST_CODE : string; _RootTableNrec : comp; var FNservice, _JSON : tptr; var _err : string; _strParameter : string = ''): boolean;{
  var _iRes : iResultSet;
  result := false;

  if not ExecuteQueryInstanceWithAddNrecRootTable(_fQRY_INST_CODE, _RootTableNrec, _iRes, _err) then exit;

  if not generateJSONByResultSet(_fQRY_INST_CODE, _iRes, FNservice, _JSON, _err, _strParameter) then exit;

  result := true;
}

function GenerateJSONFromQueryInstanceWithAddWhereString(_fQRY_INST_CODE : string; _addWhereString : string; var FNservice, _JSON : tptr; var _err : string; _strParameter : string = ''): boolean;{
  var _iRes : iResultSet;
  result := false;

  if not ExecuteQueryInstanceWithAddWhereString(_fQRY_INST_CODE, _addWhereString, _iRes, _err) then exit;

  if not generateJSONByResultSet(_fQRY_INST_CODE, _iRes, FNservice, _JSON, _err, _strParameter) then exit;

  result := true;
}



handleevent // фейса

end;
end.
