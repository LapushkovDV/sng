/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

#include Query.vih
#include QRY_BASE.vih

//************************************************************
const
end;
Interface QRY_BASE 'QRY базовый объект';
table struct tFields
(
   NAME       : string
 , TITLE      : string
 , NAMETBL    : string
 , SYSNAMETBL : string
 , DATATYPE   : string
)
with index
(
   ind0 = NAME
)
;

create view
var
 _logQRY_OUT : string; //глобальная

 as select
    QRY_TMPLT.nrec
from
    QRY_Template   QRY_TMPLT
  , QRY_TemplateSP QRY_TMPLTSP

  , QRY_INSTANCE QRY_INST
  , QRY_Instance_FLD QRY_INST_FLD
  , QRY_Instance_FLD_LVL QRY_INST_FLD_LVL
  , QRY_Instance_FLD_LVL QRY_INST_FLD_LVL_FLD

  , QRY_Template   QRY_INST_TMPLT
  , QRY_TemplateSP QRY_INST_TMPLTSP


//  , KatDoc KatDocWin
  , x$files TblTMPLT
  , x$files TblINST
  , x$files TblTMPLTSP
  , x$files
  , x$fields

  , tFields
 where ((                  root == QRY_TMPLT.nrec
        and QRY_TMPLT.TABLECODE == TblTMPLT.XF$CODE

             and QRY_TMPLT.nrec == QRY_TMPLTSP.cTmplt
                         and 0 <<= QRY_TMPLTSP.npp
     and  QRY_TMPLTSP.TABLECODE == TblTMPLTSP.XF$CODE

     // связка для экземпляра запроса
         and QRY_INST.nrec == QRY_INST_FLD.nrec
         and QRY_INST.nrec == QRY_INST_FLD_LVL.cInstance
                    and 0 <<= QRY_INST_FLD_LVL.level (noindex)
          and QRY_INST_FLD.cLevel == QRY_INST_FLD_LVL_FLD.nrec
              and QRY_INST.cTmplt == QRY_INST_TMPLT.nrec
     and QRY_INST_TMPLT.TABLECODE == TblINST.XF$CODE
          and QRY_INST_TMPLT.nrec == QRY_INST_TMPLTSP.cTmplt
       ))
;

File MemoFile;

Function GenerateNewFile: string;
{
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ '\QRY_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS');
}

function GetLogFile : string;
{
  if _logQRY_OUT = '' then _logQRY_OUT := GenerateNewFile+'.log';
  result := _logQRY_OUT;
}

Procedure MyLog(_str: string; _needlog : boolean = false);
{
  if isvalidall(tnQRY_TMPLT)
//  if not (QRY_TMPLT.isLogging or _needlog) then exit;// debud
  LogStrToFile(GetLogFile,DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + _str);
}

function getNameDataType(_type : byte) : string; cacheable;
{
  case _type of
        4 : result := 'word'
        6 : result := 'longint'
        7 : result := 'date'
        8 : result := 'time'
       11 : result := 'double'
       12 : result := 'string'
       17 : result := 'comp'
   else result := string(_type)
  end;
}

Procedure MysqlAddStr(var query_handle: tptr; add_query_str: string);
{
   sqlAddStr(query_handle, add_query_str);
   MyLog('sql: ' + add_query_str);
} //Function MysqlAddStr(var query_handle: longInt; add_query_str: string): longInt;

procedure addSection_from_where_fromTMLT(_qryID: TPTR); {
  MysqlAddStr(_qryID, ' from '+GetTableNameByCode(QRY_TMPLT.TABLECODE));
  _loop QRY_TMPLTSP {
      MysqlAddStr(_qryID, QRY_TMPLTSP.join_type + ' ' +TblTMPLTSP.XF$NAME + ' ' + QRY_TMPLTSP.SynonimName + ' on ' + QRY_TMPLTSP.JoinTerms);
    }
  MysqlAddStr(_qryID, ' where');

   MemoFile.OpenMemo(QRY_TMPLT.WhereTerms);
   do {
      var StringValue1 : string = '';
      MemoFile.readln(StringValue1);
      MysqlAddStr(_qryID, StringValue1);
    } while (not MemoFile.EOF);
   MemoFile.Close;
}

function GetTableNameByCode(_tableCode : word) : string; {
  result := '';
   if getfirst x$files where (( _tableCode == x$files.XF$CODE)) = tsOK {
       result := x$files.XF$NAME;
   }
}

procedure inserttFieldsByTableName(_tableCode : word; _SynonimName : string);
{
  if getfirst x$files where (( _tableCode == x$files.XF$CODE)) = tsOK
  _loop x$fields where (( _tableCode == x$fields.XE$FILECODE))
    {
        Insert tFields set
            tFields.NAME       := x$fields.XE$NAME
          , tFields.TITLE      := x$fields.XE$TITLE
          , tFields.NAMETBL    := _SynonimName
          , tFields.SYSNAMETBL := x$files.XF$NAME
          , tFields.DATATYPE   := getNameDataType(x$fields.XE$DATATYPE)
        ;
    }
}
// function is_query_result_array_by_level

Function isExistSpec : boolean;
{
  result := false;
  if ( getfirst QRY_TMPLTSP = tsOK
    and getfirst TblTMPLTSP = tsOK
   ) then {
     result := true;
   }
}
end.
