/**************************************************************************************************\
* Наименование: ZarAPI алгоритм "Среднемесячная норма рабочего времени"                            *
* Контур/Модуль: Заработная плата                                                                  *
* Пункт меню: Настройка / Заполнение каталогов / Виды оплат и скидок                               *
* Примечание:                                                                                      *
* Необходимо настроить VIP-алгоритмы расчета премии по нарядам рабочим-сдельщикам, в зависимости от*
* параметров в пункте 7. <Сопоставление алгоритмов и параметров> ФТТ.                              *
* Первый будет учитывать при расчете премии вид оплаты <Работа в ночные> во втором алгоритме к     *
* ночным должны добавляться все доплаты с входимостью 36. Входимость настраивается в классификаторе*
* видов оплат и скидок.                                                                            *
*                                                                                                  *
*                                                                                                  *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                            *
* -------------------------------------------------------------------------------------------------*
* Разработка  |GLX-932       |        |                         |СНГ                    *
\**************************************************************************************************/


#include SNG_GLX_932_zp_alg_1_7.vih
#include ZarAlg.vih

#component "Z_Zar"

VipInterface zarAlgorithm_GLX_932_zp_alg implements IzarAlgorithm;

interface zarAlgorithm_GLX_932_zp_alg cacheable;
// посомтреть  Z_zar##ZarAlgorithm_58vo.Vip
  create view
   var _log_OUT : string;
    _isLogging : boolean = false;
;
  var
      AlgNumberInner : word = 0
     ;

procedure ParseAlgParams(ParamStr: String);
{
  var I: Word;
  var P: Byte;
  var Value: String;
    _isLogging := false;
    I := 0;
    do
    {
      I++;
      P := InStr(',', ParamStr);
      if P > 0 then {
        Value := SubStr(ParamStr, 1, P - 1);
        ParamStr := SubStr(ParamStr, P + 1, Length(ParamStr) - P);
      } else {
        Value := ParamStr;
       }
      Value := LoCase(Trim(Value));
      if Value != '' then
        case I of
          1: AlgNumberInner := Word(Value);
          2: _isLogging := (Value = 'on' or Value = 'true');
        end;
    } while P > 0;
}

function CalcSum(Parameter: String): Double;
{
    result := 0;
    ParseAlgParams(Parameter);
  var iGLX_932_zp_alg_1_7 : GLX_932_zp_alg_1_7 new;
    case AlgNumberInner of
      1: result := iGLX_932_zp_alg_1_7.getsumAlg1(nar_nrec, _isLogging);
      2: result := iGLX_932_zp_alg_1_7.getsumAlg2(nar_nrec, _isLogging);
      3: result := iGLX_932_zp_alg_1_7.getsumAlg3(nar_nrec, _isLogging);
      4: result := iGLX_932_zp_alg_1_7.getsumAlg4(nar_nrec, _isLogging);
      5: result := iGLX_932_zp_alg_1_7.getsumAlg5(nar_nrec, _isLogging);
      6: result := iGLX_932_zp_alg_1_7.getsumAlg6(nar_nrec, _isLogging);
      7: result := iGLX_932_zp_alg_1_7.getsumAlg7(nar_nrec, _isLogging);
    end;
}

function GetDescription: String; {
    GetDescription := 'Расчет премии в наряде задача GLX-932. Параметры: номер алгоритма (1, 2 или 3), показывать лог true/false, логировать действия true/false';
}

end.
