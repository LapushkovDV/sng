#include ActionJsonCreate.vih
#include FactVacation.vih    // для расчета остатков отпусков
#include StrFunc.vih
//************************************************************
const
  // Константы значений поля WorkPeriod.wTypePeriod, определяющие тип периода
  cnWP_Work        = word(0);   // обычные рабочий период
  cnWP_Shift       = word(1);   // сдвиг рабочего периода
  cnWP_Hidden      = word(2);   // скрытый внутренний рабочий период
  cnWP_Accounting  = word(3);   // период учета
  cnWP_FuturePVac  = word(4);   // рабочие периоды полагающихся отпусков, выданных авансом
  cnWP_NeedCorrect = word(100); // РП подлежащие корректировке после установки связи совместительств
end;
/*
  PutVacation.wTypeVac     -> Edit_PutVacation.vLongint[1]
  PutVacation.wDayCount    -> Edit_PutVacation.vLongint[2]
  PutVacation.wSumWay      -> Edit_PutVacation.vLongint[3]
  PutVacation.wProvidWay   -> Edit_PutVacation.vLongint[4]

  PutVacation.cKlOtpusk    -> Edit_PutVacation.vComp[1]
  PutVacation.cWPRemain    -> Edit_PutVacation.vComp[2]
  PutVacation.cPutVacation -> Edit_PutVacation.vComp[3]

         funVisibleRemaind -> Edit_PutVacation.vLongint[5]
            persons.tabnmb -> Edit_PutVacation.vLongint[6]
           KLOTPUSK.KOTPUS -> Edit_PutVacation.vLongint[7]
        workperiod.DPERBEG -> Edit_PutVacation.vDate[1]
        workperiod.DPEREND -> Edit_PutVacation.vDate[2]
*/
#include SNG_Edit_PutVacationWorkPeriod.vih

Interface SNG_Edit_PutVacationWorkPeriod 'Анкетный редактор строки отпусков в рабочих периодах';

function funVisibleRemaind( wParam_Get : word ): integer; forward;
function CalcRemaindPutVac(dVacDate, dWPB, dWPE: date; cPutVctn: comp; wProvidW: word): integer; forward;
table struct mt_WorkAndAccVac
(
  wTypePeriod: comp,
  cWorkPeriod: comp,
  cVacNRec: comp,
  dPerBeg: date,
  dPerEnd: date,
  dRemPerBeg: date,
  dRemPerEnd: date,
  wNum: word,
  wTypeVac: word,
  cKlOtpusk: comp,
  iTypeOtp: integer,
  sNameVac: string,
  wDayCount: word,
  wDayOst: word
)
with index
(
  mt_WorkAndAccVac01 = wTypePeriod + dPerBeg + dPerEnd + wNum + wTypeVac
  , mt_WorkAndAccVac02 = cVacNRec
);

create view
var
    iFV          : iFactVacation New;
    iStrFunc     : StringFunctions;
     _cWorkPeriod
   , _cEdit_PutVacation
   , _cPutVac
   , cVacTmp : comp;
     dTuneDateOtch
   , dLastOtchDay : date;

as select
    funVisibleRemaind(word(0)) (fieldname = KolDayOstForCurrOtp)
  , if((IsValid(tnWorkPeriodOst)), string(WorkPeriodOst.dPerBeg) + ' - ' + string(WorkPeriodOst.dPerEnd),'')
    (fieldname = StrOstWP)

from
  SNG_Edit Edit_PutVacation
, SNG_Edit Edit_PutVacation_1
, Appointments WP_Appoint
, WorkPeriod WorkPeriodOst
, WorkPeriod
, WorkPeriod WorkPeriodNew    // создание нового РП
, PutVacation PutVacNew
, KLOTPUSK
, KlOtpusk tKlOtpusk
, KlOtpusk KlOtpuskAll
, putvacation putvac_cur
, putvacation putvac_ins
, PutVacation PutVacDop
, persons
, mt_WorkAndAccVac
where
((           _cEdit_PutVacation == Edit_PutVacation.nrec
  and                  _cPutVac == putvac_cur.nrec
  and              _cWorkPeriod == workperiod.nrec
  and Edit_PutVacation.vComp[1] == KlOtpusk.NRec
  and Edit_PutVacation.vComp[2] == WorkPeriodOst.NRec
    and WorkPeriod.cAppointment == WP_Appoint.NRec
          and WP_Appoint.person == persons.nrec
))
;

function fGetNextNum: word; {
  Result := 1;

  if GetLast PutVacDop where (( workperiod.nrec == PutVacDop.cWorkPeriod )) = tsOk
    Result := PutVacDop.wNum + 1;
}

function checkSap( _cEdit_PutVacation : comp) : boolean; {
       result := false;
      var oJsonSender: iEntryActionSender(JsonSenderToReceiver) new;
      if (oJsonSender.createJson('PUTVACATION_WORK_PERIOD_TO_SAP', _cEdit_PutVacation, 'X')) {

        result := oJsonSender.sendJsonToReceiver('SAP');

        if (not  result) {
          var _strerror : string = oJsonSender.getErrorMessage();
          message(_strerror, error);
        }
      }
      else {
          var _strerror : string = 'Не удалось инициализировать объект JsonSenderToReceiver';
          message(_strerror, error);
      }
}

window wEdit_PutVacation 'Редактирование ' ,Gray;
//show at (10, 3, 40, 10);

screen scrEdit_PutVacation;
  show at (,,,);
table Edit_PutVacation;
 fields

  Edit_PutVacation.vLongint[1] :  [list'отпуск','остаток','отпуск УП'];
  KlOtpusk.NOtpus               :  Pickbutton,protect;
  Edit_PutVacation.vLongint[2]  : [3], noprotect, {Font = {BackColor = if( WorkPeriodOst.wTypePeriod = cnWP_FuturePVac, ColorSysYellow, 0) }};

  KolDayOstForCurrOtp : [3], skip, // 'Осталось', 'дней' ('Остаточное количество дней отпуска зависит от способа предоставления',)
  {Font = {BackColor = if (Edit_PutVacation.vLongint[4] <> word(0), ColorSysYellow, 0)}};

  StrOstWP    : protect, pickbutton,{Font = {BackColor = if( WorkPeriodOst.wTypePeriod = cnWP_FuturePVac, ColorSysYellow, 0) }};

  Edit_PutVacation.vLongint[3] :  [list'"0" - сверх всех отпусков',
        '"1" - сверх основного минимального отпуска',
        '"2" - сверх основного отпуска',
        '"3" - сверх всех отпусков (со смещением)'
      ],{Font = {BackColor = if (Edit_PutVacation.vLongint[3] = word(1), ColorError, 0)}};
  Edit_PutVacation.vLongint[4] :  [list
        '"0" - полностью',
        '"1" - пропорционально отработанному времени ',
        '"2" - пропорционально (за вредные условия труда)'
      ],  {Font = {BackColor = if (Edit_PutVacation.vLongint[4] <> word(0), ColorSysYellow, 0)}};


 buttons
    cmOk   ,,,'Сохранить',,;
    cmClose,,,'Отменить',,;
<<

`Тип отпуска` .@@@@@@@@@@@@@@@@@
     `Отпуск` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

`Полагающееся кол-во дней`.@@@@@@@@
           `Осталось дней`.@@@@@@@@

    `Период остатка/учета`.@@@@@@@@@@@@@@@@@@@@@@@@
     `Способ суммирования`.@@@@@@@@@@@@@@@@@@@@@@@@
   `Способ предоставления`.@@@@@@@@@@@@@@@@@@@@@@@@


                  <.Сохранить.>              <.Отменить.>

>>

end;
handleevent
 cmOK: {
    var _needupdate : boolean = false;

    if isvalidall(tnputvac_cur) {
        if  putvac_cur.wTypeVac     <> Edit_PutVacation.vLongint[1]
         or putvac_cur.wDayCount    <> Edit_PutVacation.vLongint[2]
         or putvac_cur.wSumWay      <> Edit_PutVacation.vLongint[3]
         or putvac_cur.wProvidWay   <> Edit_PutVacation.vLongint[4]
         or putvac_cur.cKlOtpusk    <> Edit_PutVacation.vComp[1]
         or putvac_cur.cWPRemain    <> Edit_PutVacation.vComp[2]
         or putvac_cur.cPutVacation <> Edit_PutVacation.vComp[3] {
           _needupdate := true;
         }
    } else {
      _needupdate := true;
    }

     if _needupdate = true {

      update current Edit_PutVacation set
           Edit_PutVacation.vLongint[5] := KolDayOstForCurrOtp
         , Edit_PutVacation.vLongint[6] := persons.tabnmb
         , Edit_PutVacation.vLongint[7] := KLOTPUSK.KOTPUS
         , Edit_PutVacation.vDate[1]    := workperiod.DPERBEG
         , Edit_PutVacation.vDate[2]    := workperiod.DPEREND
      ;

      if checkSap(Edit_PutVacation.nrec) {
       if not isvalidall(tnputvac_cur) {
          insert putvac_ins set
              putvac_ins.wNum         := fGetNextNum
            , putvac_ins.cPerson      := WorkPeriod.cPerson
            , putvac_ins.cWorkPeriod  := WorkPeriod.NRec
          ;
          set _cPutVac := putvac_ins.nrec;
        }
        putvac_cur.wTypeVac     := Edit_PutVacation.vLongint[1];
        putvac_cur.wDayCount    := Edit_PutVacation.vLongint[2];
        putvac_cur.wSumWay      := Edit_PutVacation.vLongint[3];
        putvac_cur.wProvidWay   := Edit_PutVacation.vLongint[4];
        putvac_cur.cKlOtpusk    := Edit_PutVacation.vComp[1];
        putvac_cur.cWPRemain    := Edit_PutVacation.vComp[2];
        putvac_cur.cPutVacation := Edit_PutVacation.vComp[3];
       update current putvac_cur;
       delete current Edit_PutVacation;
       closewindow(wEdit_PutVacation);
      }
   } else {
     closewindow(wEdit_PutVacation);
   }
 }
 cmClose : {
  if isvalidall(tnEdit_PutVacation) then delete current Edit_PutVacation;
 }
end;
end; // winbdow

function funCheckSecRecep(iLPr:integer; wDopStatus: word): boolean; {
  result := ((iLPr <> 100 and iLPr <> 31) and (wDopStatus <> word(1)));
}

function funVisibleRemaind( wParam_Get : word ): integer;
{
  result := integer(Edit_PutVacation.vLongint[2]);

  if isvalidall(tnputvac_cur)
   case wParam_Get of
    0:
    {
      if (IsValid(tnWorkPeriodOst)) and ( WorkPeriodOst.wTypePeriod = cnWP_FuturePVac )
        exit;

      if (funCheckSecRecep(WP_Appoint.lPrizn, WorkPeriod.ResWord[2]))
        result := CalcRemaindPutVac(ZeroDate, WorkPeriod.dPerBeg, WorkPeriod.dPerEnd, putvac_cur.NRec, Edit_PutVacation.vLongint[4]);
    }

  end;
} // function funVisibleRemaind: integer;

function CheckPeriodPosition(dWPBeg, dWPEnd: date): word;
{
  result := word(0);

  if ( dWPBeg <= dTuneDateOtch and dTuneDateOtch <= dWPEnd ) or
     ( dWPBeg <= dLastOtchDay and dLastOtchDay <= dWPEnd ) or
     ( dTuneDateOtch <= dWPBeg and dWPEnd <= dLastOtchDay )
  {
    result := word(1);
    exit;
  }

  if ( dWPBeg > dLastOtchDay )
    result := word(2);
}

function CalcRemaindPutVac(dVacDate, dWPB, dWPE: date; cPutVctn: comp; wProvidW: word): integer;
var
  dTmp     : double;
  dDopDate : date;
{
  result := integer(0);

  dTmp     := double(0);
  dDopDate := dVacDate;

  if ( Day(dVacDate) = 0 )
  {
    dVacDate := Cur_Date;
    if ( dVacDate > dWPE )
      dVacDate := dWPE;

   case CheckPeriodPosition(dWPB, dWPE) of

      0: dDopDate := dWPE;
      1: dDopDate := dVacDate;

    end;
  }

  if ( iFV.funGetDaysHarmVac(cPutVctn, dVacDate, dTmp) )
    result := word(dTmp);
  else
    result := word( case( wProvidW;
                          1: iFV.funGetDayProportionWithFlag(dWPB, dDopDate, cPutVctn, 0, 0);
                             iFV.funGetBalanceVac(cPutVctn, 0, ZeroDate)) );

} // function CalcRemaindPutVac

procedure setfiledsstate; {
    ClearFieldOption(#Edit_PutVacation.vLongint[3], ofSelectable);
    ClearFieldOption(#StrOstWP, ofSelectable);

    if Edit_PutVacation.vLongint[1] = word(0) //отпуск
        SetFieldOption(#Edit_PutVacation.vLongint[3], ofSelectable);
    if Edit_PutVacation.vLongint[1] = word(1) //остаток
        SetFieldOption(#StrOstWP, ofSelectable);

}
procedure prInsVacationsInTmp;
var
  wTmp: word;
{
  _loop PutVacNew where ((WorkPeriodNew.NRec == PutVacNew.cWorkPeriod))
  {
    wTmp := CalcRemaindPutVac(ZeroDate, WorkPeriodNew.dPerBeg, WorkPeriodNew.dPerEnd, PutVacNew.NRec, PutVacNew.wProvidWay);

    if wTmp <= 0
      continue;

    ClearBuffer(#mt_WorkAndAccVac);

    mt_WorkAndAccVac.wTypePeriod := WorkPeriodNew.wTypePeriod;
    mt_WorkAndAccVac.cWorkPeriod := PutVacNew.cWorkPeriod;
    mt_WorkAndAccVac.cVacNRec := PutVacNew.NRec;
    mt_WorkAndAccVac.dPerBeg := WorkPeriodNew.dPerBeg;
    mt_WorkAndAccVac.dPerEnd := WorkPeriodNew.dPerEnd;
    mt_WorkAndAccVac.wNum := PutVacNew.wNum;
    mt_WorkAndAccVac.wTypeVac := PutVacNew.wTypeVac;
    mt_WorkAndAccVac.cKlOtpusk := PutVacNew.cKlOtpusk;

    if getfirst tKlOtpusk where ((PutVacNew.cKlOtpusk == tKlOtpusk.Nrec)) = tsOk
    {
      mt_WorkAndAccVac.iTypeOtp := tKlOtpusk.TypeOtp;
      mt_WorkAndAccVac.sNameVac := tKlOtpusk.NOtpus;
    }

    mt_WorkAndAccVac.wDayCount := PutVacNew.wDayCount;
    mt_WorkAndAccVac.wDayOst := wTmp;

    insert current mt_WorkAndAccVac;
  }
}
procedure prFillVac(_cWP: comp);
var
  dBegPer, dEndPer: date;
  cPers, cApp: comp;
  wCrossType: word;
{
  delete all mt_WorkAndAccVac;

  if getfirst WorkPeriodNew where ((_cWP == WorkPeriodNew.NRec)) = tsOk
  {
    dBegPer := WorkPeriodNew.dPerBeg;
    dEndPer := WorkPeriodNew.dPerEnd;
    cPers := WorkPeriodNew.cPerson;
    cApp := WorkPeriodNew.cAppointment;

    //prInsVacationsInTmp;

    //чтобы знать, пересечения с периодами какого типа искать
    case WorkPeriodNew.wTypePeriod of
      cnWP_Work:
        wCrossType := cnWP_Accounting;
      cnWP_Accounting:
        wCrossType := cnWP_Work;
    else
      exit;
    end;

    _loop WorkPeriodNew where ((cPers == WorkPeriodNew.cPerson
                      and wCrossType == WorkPeriodNew.wTypePeriod
                      and cApp == WorkPeriodNew.cAppointment
                      ))
    {
      case WorkPeriodNew.ResWord[1] of
        0: //в пересекающиеся
      if iStrFunc.isCrossPeriod(WorkPeriodNew.dPerBeg, WorkPeriodNew.dPerEnd, dBegPer, dEndPer)
        prInsVacationsInTmp;
        1: //в пересекающиеся и будущие
          if WorkPeriodNew.dPerBeg <= dBegPer
            prInsVacationsInTmp;
        2:
          prInsVacationsInTmp;
      end;
    }
  }
}
window wGetAccVac 'Выбор отпуска по учетному периоду' (,,sci1Esc) doAccept, cyan;
show at (, , 55, 15);
  browse brWorkAndAccVac (,,sci1Esc);
   table mt_WorkAndAccVac;
  fields
    //{ font = {color = if(mt_WorkAndAccVac.wTypePeriod<>cnWP_Work,ColorSysGray,0)} };
    //if(not IsValid(#mt_WorkAndAccVac),'',case(mt_WorkAndAccVac.wTypePeriod;cnWP_Work:'Рабочий',cnWP_Accounting:'Учетный';'?')) 'Тип', 'периода': [7], protect;
    mt_WorkAndAccVac.dPerBeg 'Начало', 'периода' ('Дата начала периода',, ): [10], protect;
    mt_WorkAndAccVac.dPerEnd 'Окончание', 'периода' ('Дата окончания периода',, ): [10], protect;
    mt_WorkAndAccVac.wNum '№','п/п' ('Порядковый номер',) : [3], protect;
    if(not IsValid(#mt_WorkAndAccVac),'',if(mt_WorkAndAccVac.wTypeVac = word(0), 'отпуск', 'остаток')) 'Тип' ('Тип отпуска: отпуск/остаток',): [9], protect;
    mt_WorkAndAccVac.sNameVac 'Отпуск' ('Наименование типа отпуска ',) : [10], protect;
    mt_WorkAndAccVac.wDayCount 'Полагающееся', 'кол-во дней' ('Полагающееся за рабочий период количество дней отпуска',) : [3], protect;
    mt_WorkAndAccVac.wDayOst 'Осталось', 'дней' ('Остаточное количество дней отпуска зависит от способа предоставления',) : [3], skip;
  end;

handleevent

cmInit:
{
  cVacTmp := 0;
}

cmDefault:
{
  cVacTmp := mt_WorkAndAccVac.cVacNRec;
}

end;
end;
function MakeVacHand(flMess : word): boolean;
{
  if not isvalidall(tnputvac_cur) then  {
      Result := true;
      exit;
    }
  // если запись уже "ручная", ничего не делаем
 // это больше не ссылки а признак наличия связи <> 0
  if ( putvac_cur.cPutVacation = 0 ) and ( putvac_cur.cPersVac = 0 ) and
     ( putvac_cur.cShRVac = 0 ) and ( putvac_cur.ResComp[1] = 0 )
  {
    Result := true;
    exit;
  }

  // если нужен запрос на продолжение - выдаем его
  if ( flMess = 1 )
    {
/*
ПРИЗНАК ФОРМИРОВАНИЯ:
Ш - источник формирования - _Ш_татное расписание
К - источник формирования - привязка отпусков в _К_артотеке
П - добавлен/ изменен _П_ользователем (ручная корректировка)
С - сформирован _С_истемой (автоматически)
Д - источник формирования - _Д_етализация план-графика
*/

      if (MessageWithHelp('Внимание!' + chr(13) +
                          case(putvac_cur.wTypeVac;
                                0: 'Вы пытаетесь редактировать полагающийся отпуск, сформированный системой.',
                                1: 'Вы пытаетесь редактировать остаток отпуска, сформированный системой.',
                                2: 'Вы пытаетесь редактировать полагающийся за учетный период отпуск.'
                              )
                          + chr(13) + 'Признак формирования будет установлен в <П> (пользовательская корректировка).' + chr(13) +
                          if (putvac_cur.cPutVacation <> comp(0),
                            if (putvac_cur.wTypeVac=word(1),'Связь с полагающимся отпуском остатка будет утеряна.','Связь с отпуском учетного периода будет утеряна.'),
                              if (putvac_cur.cShRVac <>  comp(0) and putvac_cur.cPersVac <> comp(0),
                                'Связь со штатным расписанием и персональной привязкой отпуска будет утеряна.',
                            if (putvac_cur.cShRVac <>  comp(0),
                              'Связь со штатным расписанием будет утеряна.',
                              if (putvac_cur.cPersVac <> comp(0),
                                'Связь с персональной привязкой отпуска будет утеряна.',
                                if (putvac_cur.ResComp[1] <> comp(0),
                                  'Связь с детализацией план-графика будет утеряна.',
                                      'Связь будет утеряна.'))))) + chr(13) +
                          'Внести изменения?'
                         , yesNo + Confirmation + HelpButton, hcStaffNabNLS) <> cmYes)
        {
          Result := false;
          exit;
        }
    }

  set putvac_cur.cPutVacation := 0;
  set putvac_cur.cPersVac     := 0;
  set putvac_cur.cShRVac      := 0;   // это больше не ссылка а признак наличия связи <> 0
  set putvac_cur.ResComp[1]   := 0;

  if putvac_cur.wTypeVac = word(2)
  {
    set putvac_cur.wTypeVac = word(0);
    set putvac_cur.cWPRemain = 0;
  }

  Result := true;
}
Procedure RunEditWindow(__cPutVac, __cWorkPeriod : comp); {
 set _cWorkPeriod := __cWorkPeriod;
 set _cPutVac := __cPutVac;

 if getfirst WorkPeriod <> tsOK {
   message('не найден WorkPeriod по nrec = "'+string(_cWorkPeriod)+'"',error);
   exit;
 }

  insert Edit_PutVacation_1;
  set _cEdit_PutVacation := Edit_PutVacation_1.nrec;
  if getfirst putvac_cur = tsOK {
     Edit_PutVacation.vLongint[1] := putvac_cur.wTypeVac  ;
     Edit_PutVacation.vLongint[2] := putvac_cur.wDayCount ;
     Edit_PutVacation.vLongint[3] := putvac_cur.wSumWay   ;
     Edit_PutVacation.vLongint[4] := putvac_cur.wProvidWay;
     Edit_PutVacation.vComp[1]    := putvac_cur.cKlOtpusk ;
     Edit_PutVacation.vComp[2]    := putvac_cur.cWPRemain ;
     Edit_PutVacation.vComp[3]    := putvac_cur.cPutVacation ;
    update current Edit_PutVacation
  }
  setfiledsstate;
  dTuneDateOtch   := dGetTune('UP.DatOtch');
  dLastOtchDay    := Sub_Day(Add_Months(dTuneDateOtch,1),1);
  runwindowmodal(wEdit_PutVacation);
}
handleevent
cmPick:
{
  case CurField of

    #KlOtpusk.NOtpus:
    {
      var wTmp : word;

      if Edit_PutVacation.vLongint[1] = word(2)
      {//отпуск за УП, выбираем конкретный отпуск
        prFillVac(WorkPeriod.NRec);


        if RunWindowModal(wGetAccVac) = cmDefault
          if getfirst mt_WorkAndAccVac where ((cVacTmp == mt_WorkAndAccVac.cVacNRec)) = tsOk
          {
            set Edit_PutVacation.vComp[1] := mt_WorkAndAccVac.cKlOtpusk;
            set Edit_PutVacation.vComp[2] := mt_WorkAndAccVac.cWorkPeriod;
            Edit_PutVacation.vComp[3]    := mt_WorkAndAccVac.cVacNRec;
            Edit_PutVacation.vLongint[2] := mt_WorkAndAccVac.wDayCount;
            Edit_PutVacation.vLongint[3] := word(0);
            Edit_PutVacation.vLongint[4] := word(0);
          }

      }
      else
        if (RunInterface('Z_SREDN::PickOtp', wTmp, integer(4), 0, true, ZeroDate) = cmDefault)
        {
//            message('RunInterface(Z_SREDN::PickOtp, wTmp, integer(4), 0, true, ZeroDate) = cmDefault');
          if GetFirst KlOtpuskAll where ((wTmp == KlOtpuskAll.KOTPUS)) = tsOk
          {
//            message('if GetFirst KlOtpuskAll where ((wTmp == KlOtpuskAll.KOTPUS)) = tsOk');
            if (KlOtpuskAll.TypeOtp = 0) or ( KlOtpuskAll.TypeOtp = 1)
            {
              // если значение одного из полей при выборе отпуска изменилось - отпуск становится "ручным"
              if ( Edit_PutVacation.vComp[1] <> KlOtpuskAll.NRec )  or ( Edit_PutVacation.vLongint[2] <> KlOtpuskAll.KolDn ) or
                 ( Edit_PutVacation.vLongint[3] <> KlOtpuskAll.SummOtp ) or ( Edit_PutVacation.vLongint[4] <> KlOtpuskAll.GivOtp )
                if ( not MakeVacHand(1) )
                  exit;

              set Edit_PutVacation.vComp[1] := KlOtpuskAll.NRec;
              set Edit_PutVacation.vLongint[2] := KlOtpuskAll.KolDn;
              if (Edit_PutVacation.vLongint[1] = word(0)) // мы и так из рабочих периодов вызвали and (wPeriodTypeGl = cnWP_Work)
              {
                Edit_PutVacation.vLongint[3] := KlOtpuskAll.SummOtp;
                Edit_PutVacation.vLongint[4] := KlOtpuskAll.GivOtp;
              }
              else
              {
                Edit_PutVacation.vLongint[3] := 0;
                Edit_PutVacation.vLongint[4] := 0;
              }
            }
            else
              Message('Выбран неверный тип отпуска. Доступные типы: основной и дополнительный!');
          }
        }
    }
    end;
  update current Edit_PutVacation;
  rereadrecord;
}
cmcheckfield: {
  setfiledsstate;
  update current Edit_PutVacation;
  rereadrecord;
}
end;

end.
