/*************************************************************************************************\
* Наименование: Ведение показателей премирования                                                  *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#191          |14/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include Marker.vih
#include GetKau.Vih
#include ChoiseYourPersons.vih

#include GP_UserFilterStoreDSK.vih
#include GP_UserFilterCatalogs.vih
#include GP_UserFilterAnalit.vih
#include GP_UserFilterList.vih
#include GP_QueryBuilder.vih

interface GP_KPI_Edit 'Ведение показателей премирования', Cyan;
show(10,5,190,35);
//-----------------------------
#include GetKau.Var
//-----------------------------
var FilterSwitch   :longint;
    UserFilterList   :GP_ObjUserFilterList;
    FilterStore:GP_IUserFilterStore;
    iQBuilder:GP_QueryBuilder new;
    cCopyBufGP_KPI_Chief:comp;
    viCYPersons:ChoiseYourPersons;
    pMarker:IMarker(Marker) new;

table struct tmpFilter(cGP_KPI:comp, cGP_KPI_Chief:comp,cGP_KPI_Plan:comp)
with index(i=cGP_KPI+cGP_KPI_Chief+cGP_KPI_Plan);

create view
as select GP_KPI.Nrec
from
  GP_KPI,GP_KPI_Chief,GP_KPI_Plan,GP_KPI_Alg,
  KatEd,Persons,
  Catalogs PodrChief,
  Catalogs PostChief,
  Catalogs PodrOc,
  Catalogs PostOc,
  Catalogs UcPeriod,
  tmpFilter,
  GP_KPI_Plan GP_KPI_Plan2,
  StaffStruct,
  // Исключения категорий
  GP_KPI_Excl_Kateg, GP_KPI_Excl_Kat_D,
  KlKatego KlKatego_Excl, KatPodr  KatPodr_Excl

where((
  GP_KPI.cKatEd == KatEd.NRec
  and GP_KPI.cKPI_Alg == GP_KPI_Alg.NRec
  and GP_KPI.NRec == GP_KPI_Chief.cKPI
  and GP_KPI_Chief.NRec == GP_KPI_Plan.cChiefKPI
  and GP_KPI_Chief.cExecutor == Persons.NRec
  and GP_KPI_Chief.cPodrChief == PodrChief.NRec
  and GP_KPI_Chief.cPostChief == PostChief.NRec
  and GP_KPI_Plan.cPodr == PodrOc.NRec
  and GP_KPI_Plan.cPost == PostOc.NRec
  and GP_KPI_Plan.UcPeriod == UcPeriod.NRec
  // Исключения категорий
  and GP_KPI.NRec == GP_KPI_Excl_Kateg.cGP_KPI
  and GP_KPI_Excl_Kateg.NRec      ==  GP_KPI_Excl_Kat_D.cGP_KPI_Excl_Kateg
  and GP_KPI_Excl_Kateg.cKlKatego == KlKatego_Excl.Nrec
  and GP_KPI_Excl_Kat_D.cKatPodr  == KatPodr_Excl.Nrec

))
bounds Filter = GP_KPI.NRec /== tmpFilter.cGP_KPI and
                GP_KPI_Chief.NRec /== tmpFilter.cGP_KPI_Chief and
                GP_KPI_Plan.NRec /== tmpFilter.cGP_KPI_Plan;

//----------------------------------------------
Browse brKPI 'Показатели премирования' (,, sci14Esc);
show(, ,110,10);
table GP_KPI;
Fields
  GP_KPI.Kod     'Код' ('Код показателя премирования',,):[10], Protect,NoAutoSize;
  GP_KPI.Name    'Наименование', ('Наименование показателя премирования', ): [50], Protect;
  KatEd.Name     'Ед.изм.', ('Ед.изм.'): [10], Centered, Protect, NoDel, NoAutoSize;
  GP_KPI_Alg.Code'Алгоритм', ('Алгоритм'): [10], Protect, NoDel, NoAutoSize;
end;
//----------------------------------------------
Screen ScrKategExcl;
show(111, ,,1) Fixed_y;
<<
 Искл.Категории по п.п 2.1.2
>>
end;
//----------------------------------------------
Browse brKPI_Excl_Kateg 'Показатели премирования' (,, sci1Esc);
show(111,2 ,,5);
Table GP_KPI_Excl_Kateg ;
Fields
  GP_KPI_Excl_Kateg.Kateg  'Код' ('Код категории для исключения из показателя по п.2.1.2 положения ') :[5],Protect;
  GP_KPI_Excl_Kateg.Name   'Наименование' ('Наименование категории для исключения из показателя по п.2.1.2 положения ') :[45],Protect;
end;
//----------------------------------------------
Screen ScrKategExcl_P;
show(111,6,,6) Fixed_y;
<<
 Кроме периодов
>>
end;
//----------------------------------------------
//----------------------------------------------
Browse brKPI_Excl_Kateg_P 'Показатели премирования' (,, sci1Esc);
show(111,7 ,,10);
Table GP_KPI_Excl_Kat_D;
Fields
  GP_KPI_Excl_Kat_D.wYear  'Год'   ('Период, когда категория не искл. из показателя ',, sci178Esc) :[5],Protect;
  GP_KPI_Excl_Kat_D.wMonth 'Месяц' ('Период, когда категория не искл. из показателя ',, sci178Esc) :[45],Protect;
  KatPodr_Excl.Name  'Подразделение' : [20] , Protect;
  GP_KPI_Excl_Kat_D.DocDate   'Дата документа' :[11],Protect;
  GP_KPI_Excl_Kat_D.DocNumber 'Номер документа' :[40],Protect;
end;

//----------------------------------------------
Browse brKPI_chief 'Руководители и исполнители' (,, sci14Esc);
show(, 11,,20);
table GP_KPI_Chief;
Fields
  PodrChief.Code      'Подразделение','руководителя': [15], Protect, NoDel, NoAutoSize;
  PostChief.Name      'Должность руководителя': [25], Protect, NoDel;
  Persons.FIO         'Исполнитель':[25], Protect, NoDel;
  GP_KPI_Chief.dBegin 'Начало','действия':[12], Protect, NoAutoSize;
  GP_KPI_Chief.dEnd   'Окончание','действия':[12], Protect, NoAutoSize;
end;

browse brKPI_plan 'Плановые значения' (,, sci14Esc);
show(, 21,,);
table GP_KPI_Plan;
fields
  PodrOc.Code         'Оцениваемое','подразделение': [15], Protect, NoDel, NoAutoSize;
  PodrOc.Name         'Наименование оцениваемого','подразделения': [25], Protect, NoDel;
  PostOc.Name         'Оцениваемая','должность': [25], Protect, NoDel;
  GP_KPI_Plan.dBegin  'Начало','действия':[12], Protect, NoAutoSize;
  GP_KPI_Plan.dEnd    'Окончание','действия': [12], Protect, NoAutoSize;
  GP_KPI_Plan.UdVes   'Удельный','вес':[10.2], Protect, NoAutoSize;
  GP_KPI_Plan.LowLimit   'Нижняя','граница':[10.2], Protect, NoAutoSize;
  GP_KPI_Plan.HighLimit  'Верхняя','граница':[10.2], Protect, NoAutoSize;
  GP_KPI_Plan.Plan       'Плановое','значение':[10.2], Protect, NoAutoSize;
  UcPeriod.name       'Учетный','период':[10], Protect, NoDel;
  GP_KPI_Plan.Notice  'Примечание':[25], Protect;
end;

window WinEdit 'Редактирование показателей премирования' Blue;
show(10,5,190,35);

Browse brEditKPI 'Показатели премирования' (,, sci178Esc);
show(, ,110,10);
table GP_KPI;
Fields
  GP_KPI.Kod     'Код' ('Код показателя премирования',,):[10], NoProtect,NoAutoSize;
  GP_KPI.Name    'Наименование', ('Наименование показателя премирования', ): [50], NoProtect;
  KatEd.Name     'Ед.изм.', ('Ед.изм.',,sci1378Esc): [10], Protect, PickButton, Centered, NoAutoSize;
  GP_KPI_Alg.Code'Алгоритм', ('Алгоритм'): [10], Protect, PickButton, NoAutoSize;
end;

//----------------------------------------------
Screen ScrKategExcl_E;
show(111, ,,1) Fixed_y;
<<
 Искл.Категории по п.п 2.1.2
>>
end;
//----------------------------------------------
Browse brKPI_Excl_Kateg_E 'Показатели премирования' (,, sci1378Esc);
show(111,2 ,,5);
Table GP_KPI_Excl_Kateg ;
Fields
  GP_KPI_Excl_Kateg.Kateg  'Код' ('Код категории для исключения из показателя по п.2.1.2 положения ') :[5],Protect,PickButton;
  GP_KPI_Excl_Kateg.Name   'Наименование' ('Наименование категории для исключения из показателя по п.2.1.2 положения ') :[45],Protect,PickButton;
end;
//----------------------------------------------
Screen ScrKategExcl_P_E;
show(111,6,,6) Fixed_y;
<<
 Кроме периодов
>>
end;
//----------------------------------------------
//----------------------------------------------
Browse brKPI_Excl_Kateg_P_E 'Показатели премирования' (,, sci1378Esc);
show(111,7 ,,10);
Table GP_KPI_Excl_Kat_D;
Fields
  GP_KPI_Excl_Kat_D.wYear  'Год'   ('Период, когда категория не искл. из показателя ',, sci178Esc) :[5],NoProtect;
  GP_KPI_Excl_Kat_D.wMonth 'Месяц' ('Период, когда категория не искл. из показателя ',, sci178Esc) :[45],NoProtect;
  KatPodr_Excl.Name  'Подразделение' : [20] , Protect,PickButton;
  GP_KPI_Excl_Kat_D.DocDate   'Дата документа' :[11],NoProtect;
  GP_KPI_Excl_Kat_D.DocNumber 'Номер документа' :[40],NoProtect;
end;

//----------------------------------------------
Browse brEditKPI_chief 'Руководители и исполнители' (,, sci1378Esc);
show(, 11,,20);
table GP_KPI_Chief;
Fields
 {Font={Color=if(Persons.DisDate<>ZeroDate and Persons.DisDate<Cur_date,ColorSysRed,ColorSysBlack )} };
  PodrChief.Code      'Подразделение','руководителя' : [15], Protect, PickButton, NoAutoSize;
  PostChief.Name      'Должность руководителя' : [25], Protect, PickButton;
  Persons.FIO         'Исполнитель' :[25], Protect, PickButton;
  GP_KPI_Chief.dBegin 'Начало','действия':[12], NoProtect, NoAutoSize;
  GP_KPI_Chief.dEnd   'Окончание','действия':[12], NoProtect, NoAutoSize;
  Persons.DisDate     'Уволен' :[11], Protect, PickButton;
end;
//----------------------------------------------


browse brEditKPI_plan 'Плановые значения' (,, sci178EscIns);
show(, 21,,);
table GP_KPI_Plan;
recMarker=pMarker;
fields
  PodrOc.Code         'Оцениваемое','подразделение' (,,sci1378EscIns): [15], Protect, PickButton, NoAutoSize;
  PodrOc.Name         'Наименование оцениваемого','подразделения' (,,sci1378EscIns): [25], Protect, PickButton;
  PostOc.Name         'Оцениваемая','должность' (,,sci1378EscIns): [25], Protect, PickButton;
  GP_KPI_Plan.dBegin  'Начало','действия' (,,sci1378EscIns):[12], NoProtect, NoAutoSize;
  GP_KPI_Plan.dEnd    'Окончание','действия' (,,sci1378EscIns): [12], NoProtect, NoAutoSize;
  GP_KPI_Plan.UdVes   'Удельный','вес':[10.2], NoProtect, NoAutoSize;
  GP_KPI_Plan.LowLimit   'Нижняя','граница':[10.2], NoProtect, NoAutoSize;
  GP_KPI_Plan.HighLimit  'Верхняя','граница':[10.2], NoProtect, NoAutoSize;
  GP_KPI_Plan.Plan       'Плановое','значение':[10.2], NoProtect, NoAutoSize;
  UcPeriod.name       'Учетный','период' (,,sci1378EscIns):[10], Protect, PickButton;
  GP_KPI_Plan.Notice  'Примечание':[25], NoProtect;
end;

//***********************************************
// Табличные события
//***********************************************

TableEvent table GP_KPI;
cmInsertRecord:{
  insert current GP_KPI;
}
cmUpdateRecord:{
  update current GP_KPI;
}
cmDeleteRecord:{
  if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  _loop GP_KPI_Chief where((GP_KPI.NRec == GP_KPI_Chief.cKPI))
    if (delete GP_KPI_Plan where((GP_KPI_Chief.NRec == GP_KPI_Plan.cChiefKPI))<>tsok)
      exit;

  if (delete GP_KPI_Chief where((GP_KPI.NRec == GP_KPI_Chief.cKPI))=tsok)
    delete current GP_KPI;
}
end; //TableEvent table GP_KPI;

//--------------------------------------------------
TableEvent table GP_KPI_Excl_Kateg;
cmSetDefault:{
  GP_KPI_Excl_Kateg.cGP_KPI := GP_KPI.NRec;
}
cmInsertRecord:{
  insert current GP_KPI_Excl_Kateg;
}
cmUpdateRecord:{
  update current GP_KPI_Excl_Kateg;
}
cmDeleteRecord:{
  if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  if (delete GP_KPI_Excl_Kat_D where((GP_KPI_Excl_Kateg.NRec == GP_KPI_Excl_Kat_D.cGP_KPI_Excl_Kateg))=tsok)
    delete current GP_KPI_Excl_Kateg;
}
end; //TableEvent table GP_KPI_Excl_Kateg;

//--------------------------------------------------
TableEvent table GP_KPI_Excl_Kateg;
cmSetDefault:{
  GP_KPI_Excl_Kat_D.cGP_KPI_Excl_Kateg := GP_KPI_Excl_Kateg.NRec;
}
cmInsertRecord:{
  insert current GP_KPI_Excl_Kat_D;
}
cmUpdateRecord:{
  update current GP_KPI_Excl_Kat_D;
}
cmDeleteRecord:{
  if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  delete current GP_KPI_Excl_Kat_D;
}
end; //TableEvent table GP_KPI_Excl_Kat_D;


//--------------------------------------------------
TableEvent table GP_KPI_Chief;
cmSetDefault:{
  GP_KPI_Chief.cKPI := GP_KPI.NRec;
}
cmInsertRecord:{
  insert current GP_KPI_Chief;
}
cmUpdateRecord:{
  update current GP_KPI_Chief;
}
cmDeleteRecord:{
  if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  if (delete GP_KPI_Plan where((GP_KPI_Chief.NRec == GP_KPI_Plan.cChiefKPI))=tsok)
    delete current GP_KPI_Chief;
}
end;


//--------------------------------------------------
TableEvent table GP_KPI_Plan;
cmSetDefault:{
  GP_KPI_Plan.cChiefKPI := GP_KPI_Chief.NRec;
}
cmInsertRecord:{
  insert current GP_KPI_Plan;
}
cmUpdateRecord:{
  update current GP_KPI_Plan;
}
cmDeleteRecord:{
  if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  delete current GP_KPI_Plan;
}
end;

function InsKPI_Plan(cStaffStr:comp):boolean;
{
  result:=false;

  if (getfirst fastfirstrow StaffStruct where((cStaffStr==StaffStruct.NRec))<>tsok) exit;

  ClearBuffer(tnGP_KPI_Plan);
  GP_KPI_Plan.cChiefKPI := GP_KPI_Chief.NRec;
  GP_KPI_Plan.cStaffStr := StaffStruct.NRec;
  GP_KPI_Plan.cPodr := StaffStruct.Department;
  GP_KPI_Plan.cPost := StaffStruct.Post;
  result:=insert current GP_KPI_Plan = tsok;
}

HandleEvent
cmInit:{
  cCopyBufGP_KPI_Chief:=0;
  DisableCommand(cmRestoreDoc);
}
cmHotKeys:{
  if (CurTable=tnGP_KPI_Chief)
    PutContextMenuCommand('GP_KPI_EditCopy_HotKeys')
  else if (CurTable=tnGP_KPI_Plan)
    PutContextMenuCommand('GP_KPI_Edit_KPI_PlanFieldsCopy_HotKeys');
}
cmSaveDoc:{
  if (not IsValid(tnGP_KPI_Chief) or IsNew) exit;

  cCopyBufGP_KPI_Chief:=GP_KPI_Chief.NRec;
  EnableCommand(cmRestoreDoc);
}
cmRestoreDoc:{
  if (cCopyBufGP_KPI_Chief=0) exit;
  if (not UpDateTable) exit;
  if (not IsValid(tnGP_KPI_Chief)) exit;

  var RecCount,CopiedRecCount:longint;
  RecCount:=0;
  _loop GP_KPI_Plan2 where((cCopyBufGP_KPI_Chief==GP_KPI_Plan2.cChiefKPI)) RecCount++;

  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Копирование...', RecCount);

  CopiedRecCount:=0;
  _loop GP_KPI_Plan2 where((cCopyBufGP_KPI_Chief==GP_KPI_Plan2.cChiefKPI)) {
    if (not NextVisual) break;
    if (GP_KPI_Plan2.dBegin>Cur_Date or (GP_KPI_Plan2.dEnd<Cur_Date and GP_KPI_Plan2.dEnd<>ZeroDate)) continue;

    GP_KPI_Plan.buffer:= GP_KPI_Plan2.buffer;
    GP_KPI_Plan.NRec:=0;
    GP_KPI_Plan.cChiefKPI:=GP_KPI_Chief.NRec;
    insert current GP_KPI_Plan;

    CopiedRecCount++;
  }//_loop GP_KPI_Plan2
  ReReadRecord(tnGP_KPI_Plan);

  StopVisual;

  message(if(CopiedRecCount=1,'Скопирована ','Скопировано ')+string(CopiedRecCount)+
          case(CopiedRecCount;1:' запись',2..4:' записи';' записей'));
}
cmValue1:{//Копирование полей в выбранные строки
  if (not UpDateTable) exit;
  if (not IsValid(tnGP_KPI_Plan)) exit;
  if (pMarker.Count=0) {
    message('Необходимо пометить записи для копирования.');
    exit;
  }

  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Копирование полей в выбранные строки...',pMarker.Count);

  var CurRec:type$GP_KPI_Plan;
  CurRec:=GP_KPI_Plan.buffer;

  SubBounds(tbRMGP_KPI_Plan1);
  AddBounds(tbRMGP_KPI_Plan2);
  _loop pMarker {
    if (not NextVisual) break;
    if (GP_KPI_Plan.NRec=CurRec.NRec) continue;

    GP_KPI_Plan.dBegin:=CurRec.dBegin;
    GP_KPI_Plan.dEnd:=CurRec.dEnd;
    GP_KPI_Plan.UdVes:=CurRec.UdVes;
    GP_KPI_Plan.LowLimit:=CurRec.LowLimit;
    GP_KPI_Plan.HighLimit:=CurRec.HighLimit;
    GP_KPI_Plan.Plan:=CurRec.Plan;
    GP_KPI_Plan.UcPeriod:=CurRec.UcPeriod;
    GP_KPI_Plan.Notice:=CurRec.Notice;
    if (update current GP_KPI_Plan <> tsok) break;
  }//_loop pMarker
  SubBounds(tbRMGP_KPI_Plan2);
  AddBounds(tbRMGP_KPI_Plan1);

  pMarker.UnselectAll;
  ReReadRecord(tnGP_KPI_Plan);

  StopVisual;
}
cmDone:{
  if (not UpDateTable) abort;
}
end;
end;//WinEdit

window WinFilter 'Фильтр' DoAccept, EscClose, Gray;
show(50, 5, 110, 12);

screen scFilter ('', , sci13Esc);
Fields
  FilterSwitch(,,sci1Esc):noProtect;
  [FilterChiefDep] UserFilterList.FilterStr(1):Protect,PickButton;
  [FilterExecutor] UserFilterList.FilterStr(2):Protect,PickButton;
  [FilterDep] UserFilterList.FilterStr(3):Protect,PickButton;
buttons
  cmOK,,,'Установить',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;
<<

    [.] Подразделение руководителя`.@@@@@@@@@@@@@@@@@@@@@@
    [.] Исполнитель`               .@@@@@@@@@@@@@@@@@@@@@@
    [.] Оцениваемое подразделение` .@@@@@@@@@@@@@@@@@@@@@@

 <. ~У~становить .>                           <. ~О~тмена  .>
>>
end;

HandleEvent
cmInit:{
  UserFilterList.Load;
}
cmDone:{
  UserFilterList.Save;
}
cmOK:{
  PutCommand(cmDefault);
}
end;
end;//WinFilter

procedure DropFilter;
{
  if (BoundActive(tbFilter)) {
    SubBounds(tbFilter);
    ReReadRecord(tnGP_KPI);
    ReReadRecord(tnGP_KPI_Chief);
    ReReadRecord(tnGP_KPI_Plan);
    ReReadRecord(tnGP_KPI_Excl_Kateg);
    ReReadRecord(tnGP_KPI_Excl_Kat_D);
  }
}

procedure SetFilter;
var m:longint;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Установка фильтра...', 0);

  delete all tmpFilter;
  iQBuilder.AddToSelect('GP_KPI.NRec,GP_KPI_Chief.NRec,GP_KPI_Plan.NRec');
  iQBuilder.AddToFrom('GP_KPI');
  iQBuilder.AddToFrom('inner join GP_KPI_Chief on (GP_KPI.NRec = GP_KPI_Chief.cKPI)');
  iQBuilder.AddToFrom('inner join GP_KPI_Plan on (GP_KPI_Chief.NRec = GP_KPI_Plan.cChiefKPI)');

  if ((FilterSwitch and 1b)<>0) {//Подразделение руководителя
    m:=FilterStore.LoadMarker('mFilterChiefDep');
    iQBuilder.AddToWhereMarker('GP_KPI_Chief.cPodrChief',m);
    DoneMarker(m,'');
  }

  if ((FilterSwitch and 10b)<>0) {//Исполнитель
    m:=FilterStore.LoadMarker('mFilterExecutor');
    iQBuilder.AddToWhereMarker('GP_KPI_Chief.cExecutor',m);
    DoneMarker(m,'');
  }

  if ((FilterSwitch and 100b)<>0) {//Оцениваемое подразделение
    m:=FilterStore.LoadMarker('mFilterDep');
    iQBuilder.AddToWhereMarker('GP_KPI_Plan.cPodr',m);
    DoneMarker(m,'');
  }

  if (sqlSelectInto(iQBuilder.Make,tntmpFilter)<>tsok)
    message('Ошибка выполнения DSQL запроса при отборе записей по фильтру.',Error)
  else if (RecordsInTable(tntmpFilter)=0) {
    message('Не найдены записи удовлетворяющие фильтру.',Warning);
    DropFilter;
  } else {
    if (not BoundActive(tbFilter))
      AddBounds(tbFilter);

    ReReadRecord(tnGP_KPI);
    ReReadRecord(tnGP_KPI_Chief);
    ReReadRecord(tnGP_KPI_Plan);
    ReReadRecord(tnGP_KPI_Excl_Kateg);
    ReReadRecord(tnGP_KPI_Excl_Kat_D);
  }

  StopVisual;
}

//События интерфейса
HandleEvent
cmInit:{
  timelog_init;
  FilterStore:=GP_IUserFilterStore(new(GP_UserFilterStoreDSK,InitDSK('GP_KPI_Edit_')));
  UserFilterList:=GP_ObjUserFilterList(new(GP_UserFilterList,UserFilterList(FilterStore)));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterCatalogs,UserFilterCatalogs(fnFilterChiefDep,'mFilterChiefDep',-11))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterAnalit,UserFilterAnalit(fnFilterExecutor,'mFilterExecutor',cgKau_Persons))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterCatalogs,UserFilterCatalogs(fnFilterDep,'mFilterDep',-11))));
}
cmEdit:{
  RunWindow(WinEdit);
}
cmPick:{
  var cRec,cStaffStr,cPodr:comp;
  case CurField of
    #KatEd.Name:{
      cRec:=GP_KPI.cKatEd;
      if (RunInterface(GetEdIzm,cRec) = cmDefault)
        set GP_KPI.cKatEd := cRec;
    }
    #GP_KPI_Alg.Code:{
      cRec:=GP_KPI.cKPI_Alg;
      if (RunInterface(GP_KPI_AlgPickAndEdit,0,cgiPick,cRec,0) = cmDefault)
        set GP_KPI.cKPI_Alg := cRec;
    }
    #Persons.FIO:{
      var wK:word;
      var DummyMarker1, DummyMarker2: TPtr;

      DummyMarker1 := InitMarker('', 8, 10, 10);
      DummyMarker2 := InitMarker('', 8, 1, 1);
      wK:=0;
      cRec:=GP_KPI_Chief.cExecutor;

      if (viCYPersons.Choice(DummyMarker1, 3, vfCanSelect, wK, cRec, DummyMarker2))
        set GP_KPI_Chief.cExecutor:=viCYPersons.GetPsnByKindChoice(wK, cRec);

      DoneMarker(DummyMarker1, '');
      DoneMarker(DummyMarker2, '');
    }
    #PodrChief.Code,#PostChief.Name:{
      cStaffStr:=GP_KPI_Chief.cStaffStr;
      cPodr:=GP_KPI_Chief.cPodrChief;
      cRec:=GP_KPI_Chief.cPostChief;
      if (RunInterface(GP_PickStaffStruct, cgiPick, cStaffStr, '', cPodr, cRec) = cmDefault) {
        GP_KPI_Chief.cStaffStr:=cStaffStr;
        set GP_KPI_Chief.cPodrChief:=cPodr;
        set GP_KPI_Chief.cPostChief:=cRec;
      }
    }
    #PodrOc.Code,#PodrOc.Name:{
      cRec:=GP_KPI_Plan.cPodr;
      if (RunInterface(PickCatalog2, -11, cRec, 0) = cmDefault) {
        set GP_KPI_Plan.cPodr:=cRec;
        GP_KPI_Plan.cStaffStr:=0;
        set GP_KPI_Plan.cPost:=0;
      }
    }
    #PostOc.Name:{
      var PickMultMarker,MarkerCount,i:longint;

      PickMultMarker := InitMarker('', 8, 10, 10);
      cStaffStr:=GP_KPI_Plan.cStaffStr;
      cPodr:=GP_KPI_Plan.cPodr;
      cRec:=GP_KPI_Plan.cPost;
      if (RunInterface(GP_PickStaffStruct, cgiPickMult, cStaffStr, '', cPodr, cRec, PickMultMarker) = cmDefault) {
        GP_KPI_Plan.cStaffStr:=cStaffStr;
        set GP_KPI_Plan.cPodr:=cPodr;
        set GP_KPI_Plan.cPost:=cRec;

        MarkerCount:=GetMarkerCount(PickMultMarker);
        if (MarkerCount>1) {//Множественный выбор
          if (UpDateTable)
            for(i:=0;i<MarkerCount;i++)
              if (GetMarker(PickMultMarker,i,cRec))
                if (cStaffStr<>cRec)
                  if (not InsKPI_Plan(cRec)) break;
          ReReadRecord(tnGP_KPI_Plan);
        }
      }

      DoneMarker(PickMultMarker, '');
    }
    #UcPeriod.name:{
      cRec:=GP_KPI_Plan.UcPeriod;
      if (RunInterface(PickCatalog2, 4005, cRec, 0) = cmDefault)
        set GP_KPI_Plan.UcPeriod:=cRec;
    }
    #GP_KPI_Excl_Kateg.Kateg,#GP_KPI_Excl_Kateg.Name:
    {   var ItemTable: comp;
        var Marker: TPtr;
        Marker := InitMarker('', 8, 1, 1);// Маркер для полей
        RunInterface('PickKat1', 0, Marker, vfCanSelect); // выбор родителя для записи
        if GetMarkerCount(Marker) > 0
        {
          GetMarker(Marker, 0, ItemTable);
          //timelog('GP_KPI_Edit->cmPick->GP_KPI_Excl_Kateg.Kateg='+string(ItemTable,0,0));
          set GP_KPI_Excl_Kateg.cKlKatego:=ItemTable;
          if GetFirst KlKatego_Excl=tsok
          { set GP_KPI_Excl_Kateg.Kateg:=KlKatego_Excl.KOD ;
            set GP_KPI_Excl_Kateg.Name:=KlKatego_Excl.NAIKAT ;
            SetModified(true);
            UpdateTable;
          }
        }
        DoneMarker(Marker, '');// Маркер для полей
    }
    #KatPodr_Excl.Kod, #KatPodr_Excl.Name:
    { var pTmp:comp;
      pTmp:=GP_KPI_Excl_Kat_D.cKatpodr;
      If (iGetKau.GetCodeKau(cgiPick,cgKau_KatPodr,pTmp) <> 0)
      { set GP_KPI_Excl_Kat_D.cKatpodr:=pTmp;
        SetModified(true);
        UpdateTable;
      }
    }
    else if (UserFilterList.Pick(CurField))
      RedrawPanel(CurTable);
  end;
}
cmDelOnProtect:{
  case CurField of
    #PodrChief.Code,#PostChief.Name:{
      GP_KPI_Chief.cStaffStr:=0;
      set GP_KPI_Chief.cPodrChief:=0;
      set GP_KPI_Chief.cPostChief:=0;
    }
    #PodrOc.Code,#PodrOc.Name:{
      set GP_KPI_Plan.cPodr:=0;
      GP_KPI_Plan.cStaffStr:=0;
      set GP_KPI_Plan.cPost:=0;
    }
    #PostOc.Name:{
      GP_KPI_Plan.cStaffStr:=0;
      set GP_KPI_Plan.cPost:=0;
    }
    #KatPodr_Excl.Kod, #KatPodr_Excl.Name:
    { set GP_KPI_Excl_Kat_D.cKatpodr:=0;
    }
    else if (UserFilterList.Del(CurField))
      RedrawPanel(CurTable);
  end;
}
cmHotKeys:{
  if (BoundActive(tbFilter))
    EnableCommand(cmIEHist)
  else
    DisableCommand(cmIEHist);

  PutContextMenuCommand('GP_KPI_Edit_HotKeys');
}
cmFilterSave:{//Установка фильтра
  if (RunWindowModal(WinFilter)=cmDefault) {
    if (FilterSwitch=0)
      DropFilter
    else
      SetFilter;
  }
}
cmIEHist:{//Снятие фильтра
  DropFilter;
}
end;
end.

GP_KPI_Edit_HotKeys menu
{
 - '~У~становка фильтра ...', cmFilterSave, 'Установить фильтр на данные', hcNoContext, 'Alt+B', kbAltB, sci1Esc,,,, bmpFilterSO;
 - '~С~нятие фильтра',cmIEHist,'Снять фильтр на данные',,'Alt+H',kbAltH,sci1Esc;
}

GP_KPI_EditCopy_HotKeys menu
{
 - 'Сохранение показателей премирования', cmSaveDoc, 'Копировать показатели премирования в буфер', hcNoContext,'Ctrl+F2', kbCtrlF2,sci1Esc;
 - 'Вставка показателей премирования', cmRestoreDoc, 'Вставить показатели премирования из буфера', hcNoContext,'Ctrl+F3',kbCtrlF3,sci1Esc;
}

GP_KPI_Edit_KPI_PlanFieldsCopy_HotKeys menu
{
 - 'Копирование полей в выбранные строки', cmValue1, 'Копирование полей в выбранные строки', hcNoContext,,,sci1Esc;
}
