/*************************************************************************************************\
* Наименование:  Нормативный % ежемесячной премии работника                                       *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#3674         |24/11/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
//-------------------------------
#include Contexts.vih // прикладные контексты (для инициализации табеля)
#include CLSFUNCS.VIH // ф-ии пересканирования текущих л/с
#include PAFILTER.VIH // функц-л работы с подразделениями и тек. лицевыми счетами
#include ChoiseYourPersons.vih
#include Query.vih
#include CatFunc.Vih
#include GetKau.Vih
//-------------------------
#include GP_QueryBuilder.vih
#include GP_Log.Vih
#include GP_KPI_Alg.vih
#include GP_KPI_NormPercent.Vih

#doc
УП - Нпо Энергомаш - Мотивация - Нормативный % ежемесячной премии работника
<p>3674 шаблон формы
#end

//*************************************************
Interface GP_KPI_NormPercent 'Нормативный % премии';
Show at (,,50,16);
//**********************************************
// Forward описания
//**********************************************
  procedure SelectMarKat;forward;
  Procedure SetFilterNM(_Field:longint=0);forward;
//**********************************************
// Переменные
//**********************************************
#include GetKau.Var


var
  CS: IContextSession; // для захвата прикладного контекста табеля
  //---------------
  iCatFunc            : CatalogsFunctions;   // Переменная типа интерфейс CatalogsFunctions
  iQBuilder:GP_QueryBuilder new;
  //для стандартного фильтра по подразделению
  PAF:  TraditionalPersonalAccountFilter;
  CLSF:      CurLSFunctions;
  //-----------------------
  viCYPersons      : ChoiseYourPersons;
  iGp_Log          : Gp_Log;
  pGP_KPI_Alg_Calc : GP_KPI_Alg_Calc;
  //-----------------------------
  maxColCount:longint;
  sUserName:string;
  sPopdis  :string;// подпись отчета
  sDolg    :string;// подпись отчета
  //-----------------------------
  DtRep:date;
  DtRep1:date;
  pCatDoplMain:comp;
  pCatClass        :comp;//coGetTune('NPOEM_OWN.Raise.Raise_Class');
  //-----------------------------
  #include Excel_Var.vpp
  //-----------------------------------------
  // Фильтры
  //-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
    wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :longint;
   #mrkfld_(Persons)
   //---------------
   DepList :longint;
   //------------------------
   VidKat      : string[100];
   MarkKat:longint;
//**********************************************
// Таблицы
//**********************************************
Table Struct local tmp_report
(  cPersons    : comp       //ссылка на Persons
  ,cLschet     : comp       //ссылка на Lschet
  ,cAppoint    : comp       //ссылка на Appointments
  ,cKlRejim    : comp       //ссылка на KlRejim
  ,cKatPodr    : comp       //ссылка на KatPodr
  ,Podr        : string     //Подразделение
  ,PodrKod     : string     //Подразделение код
  ,VidProizv   : string     //Вид пр-ва (ОП/ ВП/НИК/КБ/АУП)
  ,Fio         : string[50] //ФИО
  ,StrTabn     : string[50] //Табельный номер
  ,AppDate     : date       //Дата приема на работу
  ,DisDate     : date       //Дата увольнения
  ,AppointDate : date       //Дата начала работы в текущей должности
  ,DisMisDate  : date       //Дата ухода с должности
  ,sSovm       : string[50] //Тип занятости (основное место работы, внутренний совместитель, внешний совместитель:)
  ,wSovm       : word       //Тип занятости - число
  ,Post        : string     //Должность
  ,sKateg      : string[70] //Категория должности - наименование
  ,wKateg      : word       //Категория должности - код
  ,Rate        : double     //Количество ставок по трудовому договору
  ,YearNorm    : double     //Годовая норма времени
  ,sSisOpl     : string[50] //Вид ставки(часовая тарифная ставка/месячная тарифная ставка/оклад)"
  ,wSisOpl     : word       //Вид ставки(часовая тарифная ставка/месячная тарифная ставка/оклад)"
  ,TaxRate     : tSumma     //Оклад (тариф)
//----------------------
// Нормативный % ежемесячной премии работника
  ,NormProcent :double//ВСЕГО
//в том числе
 ,Prem021  :double //Премия за качество и дисциплину труда (021)
 ,Prem022  :double // Премия за результаты работы (022)
 ,Prem023  :double // Премия из премиального фонда руководителя (023)
 ,Prem032  :double // Ежемесячная премия по Положению (032)
 ,Prem034  :double // Премия за выполнение показателей премирования цехов основного производства (034)
 ,Prem038  :double // Ежемесячная премия ОПР-повременщиков (038)
 ,Prem040  :double // Ежемесячная премия за результаты выполнения показателей премирования (40)
 ,NormKvart:double //Нормативная величина квартальной премии
 ,NormYear :double //Нормативная величина годовой премии
//Стимулирующие надбавки за квалификацию, сложность и ответственность выполняемых работ
 ,Raise006 :double// Надбавка за личное клеймо и право контр. Мастера (006)
 ,Raise053 :double//Надбавка за метрологический контроль (053)
 ,Raise055 :double//Надбавка за радиационный контроль (055)
 ,Raise091 :double//Надбавка по положению (091)
//-------------------------------
 ,Raise007 :double// Надбавка за ученую степень (007)
//Стимулирующие надбавки за участие в передаче опыта и знаний
 ,Raise056 :double//Надбавка за наставничество рабочих (056)
 ,Raise098 :double//Надбавка за учебную деятельность (098)

//Надбавки за работу со сведениями, составляющими гостайну
 ,Raise048 :double//Секретность за стаж работы за отработанное время (048)
 ,Raise049 :double//Надбавка за секретность к доплате за совмещение (049)
 ,Raise050 :double//Секретность за отработанное время (050)
 ,Raise051 :double//Надбавка за секретность (051)
 ,Raise052 :double//Надбавка за стаж работы с секретн. документ. (052)
 ,Raise054 :double//Надбавка за работу с шифрами (054)

//Доплаты за увеличение объема и сложности работ
 ,Raise068 :double//Доплата при совмещении профессий, расширение зон обслуживания, увеличение объемов работ (068)
 ,Raise075 :double//Доплата по соглашению к ТД (075)

)
with index
(  tmp_report01 = PodrKod+Fio
  ,tmp_report02 = cPersons
);


// для отбора годовой нормы
Table Struct local tmp_rejim
( Nrec:comp
 ,Rejim:word
 ,Summa:double
)
with index
( tmp_rejim01 = Nrec
);

Table Struct local tmp_Raise
(  Vidoplp : word
  ,cDoplata: comp
  ,bRaise  : word
  ,TypePeriod:word
)
with index
( tmp_Raise01 = Vidoplp
 ,tmp_Raise02 = cDoplata
 ,tmp_Raise03 = bRaise
);

//**********************************************
create view
as select
  Zar_User.Nrec
, (PAF.GetDepartmentFilterStr)  (fieldname = FiltrPodr)
, tmp_report01.*
, tmp_rejim.*
, tmp_Raise.*
From
    Zar_User
  , Catalogs CatPost_Flt
  , KlKatego KlKatego_Flt
  , Persons Persons_Flt
  , tmp_report
  , tmp_report tmp_report01
  , tmp_rejim
  , Raise
//  , Catalogs CatRaise
  , tmp_Raise   // одберем
  , tmp_Raise tmp_Raise01 // одберем
where ((
    sUserName == Zar_User.OwnName
and tmp_report.cPersons == Raise.PERSON
and tmp_report.cAppoint == Raise.Appoint
and tmp_report.cKlRejim == tmp_rejim.Nrec
and DtRep>>= Raise.FROMDATE
and (   (Raise.TODATE=ZeroDate or Raise.TODATE>=DtRep1)
    and (Raise.DRABORT=ZeroDate or Raise.DRABORT>=DtRep1)
    )
and Raise.RAISETYPE == tmp_Raise01.cDoplata// CatRaise.Nrec

//------- фильтры
and wc_nrec == Persons_Flt.Nrec
and wc_nrec == KlKatego_Flt.Nrec
and wc_nrec == CatPost_Flt.Nrec

)); //create view

//------------------------------------
Create view vSpr
var
  pPerson :comp;
From Persons, Appointments
where
((  pPerson == Persons.Nrec
and if(Persons.Appointcur=0,Persons.AppointLast,Persons.Appointcur) == Appointments.Nrec
));

//------------------------------------
Create view vKlkatego
var
  pKlkatego:comp;
as select
  Klkatego.nrec
From
   Klkatego
where ((
  pKlkatego == Klkatego.nrec
)); //Create view vKlkatego
//------------------------------------
create view vPodr
var
 sPodr_kod:string;
as select KatPodr.nrec
From KatPodr
where (( sPodr_kod == KatPodr.kod));

//====================================
#include Excel_Fun.Vpp
#include Sql_Func.Vpp
//====================================
//***********************************************
// Процедуры и функции

//========================================
// Сохранить параметры
//------------------------------------
Procedure SaveParam;
{ SaveMyDsk(wFilter  ,'GP_KPI_NormPercent_wFilter'  );
  SaveMyDsk(DtRep    ,'GP_KPI_NormPercent_DtRep'  );
  SaveMyDsk(sPopdis  ,'GP_KPI_NormPercent_sPopdis'  );//
  SaveMyDsk(sDolg    ,'GP_KPI_NormPercent_sDolg'    );
  SaveMyDsk(logfilekl,'GP_KPI_NormPercent_logfilekl');
  DoneMarker(MarkKat ,'GP_KPI_NormPercent_MarkKat');
  DoneMarker(Marker_Persons, 'GP_KPI_NormPercent_Persons');

}

//========================================
// Сохранить параметры
//------------------------------------
Procedure ReadParam;
{ if not ReadMyDsk(wFilter  ,'GP_KPI_NormPercent_wFilter' ,False)  wFilter:=0  ;
  if not ReadMyDsk(DtRep    ,'GP_KPI_NormPercent_DtRep'   ,False) DtRep:=dGetTune('UP.DatOtch');
  if not ReadMyDsk(sPopdis  ,'GP_KPI_NormPercent_sPopdis'  ,False) sPopdis:=sGetTune('USER.FIO');//
  if not ReadMyDsk(sDolg    ,'GP_KPI_NormPercent_sDolg'    ,False) sDolg  :='';
  if not ReadMyDsk(logfilekl,'GP_KPI_NormPercent_logfilekl',False) LogFileKl  :=false;
  MarkKat := InitMarker('GP_KPI_NormPercent_MarkKat', 8, 10, 10);
  Marker_Persons  :=InitMarker('GP_KPI_NormPercent_Persons' , 8, 50, 10, True);
  SelectMarKat;
  SetFilterNM(0);
} //Procedure ReadParam;

//------------------------------------------------------------------------------
// Пометка категорий
//------------------------------------------------------------------------------
  procedure SelectMarKat;
  var i1:longint;
      _pNrec:comp;
  {
      VidKat := '';
      if GetMarkerCount(MarkKat)>1
      { set VidKat:='множественный выбор ('+string(GetMarkerCount(MarkKat))+')';
      }
      else
      for (I1 := 0; I1 < GetMarkerCount(MarkKat); I1 := I1 + 1)
      { if (GetMarker(MarkKat, I1, vKlkatego.pKlkatego))
        if (vKlkatego.GetFirst Klkatego = tsOk)
        { set VidKat:=vKlkatego.Klkatego.naikat;
          break;
        }
      }

    if (VidKat= '')
      set VidKat:='не установлен';
    redrawpanel(#Zar_User);
  } // procedure SelectMarKat

//------------------------------------------------------------------------------
// обработка изменения фильтра по подразделениям  - см CompSrc\Z\Z_PayRep\vip\VIEWREES.VIP
//------------------------------------------------------------------------------
  procedure SetupDepartments(Change: comp);
  {
    var p2: double;    // для компиляции
    var PrCex: comp;
    PrCex := ZAR_USER.CURCEX;
    RunInterface('GetPodaln', Change, prCex, p2);
  }

  //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_Persons
    { #mrkfiltr_(Persons_Flt,Persons,Nrec,wc_nrec,Persons_Flt.Fio)
    }
    ReScanPanel(#Zar_User);
  } //Procedure SetFilterNM(_Field:longint)

//==============================
// сбор данных
//==============================
Function SborData : boolean;
var wErr:longint;
{ Result:=False;
  timelog('GP_KPI_NormPercent->SborData:start');

  DtRep1:=Date(1,Month(DtRep),Year(DtRep));
  //-------------------------------
  if RecordsInTable(#tmp_Raise)=0
  { _Try
    { SQL select Distinct
         KlVidopl.Vidoplp as Vidoplp
        ,Catalogs.Nrec as cDoplata
        //признак что есть премия на этот вид оплат
        ,CASE WHEN COALESCE(GP_KPI_Raise.Nrec,#comp(0))=#comp(0) THEN 0 ELSE 1 END  as bRaise // : word
       // GP_KPI_Raise.TypePeriod:[List 0 '-',1 'месяц',2 'квартал',3 'год',4  'полугодие',5 'Разовая'],Protect,NoDel
        ,COALESCE(GP_KPI_Raise.TypePeriod,0) as TypePeriod
      From Catalogs
      inner join klvidopl on KlVidopl.Vidopl = Cast(SubString(Catalogs.CatData, 1, 5) as longint)
      Left Outer join GP_KPI_Raise on GP_KPI_Raise.cDoplata = Catalogs.Nrec
      where Catalogs.Mainlink=:(pCatDoplMain)
      into tmp_Raise;
    }
    _Except
    else
    {}
  } //if RecordsInTable(#tmp_Raise)=0
  //-------------------------------
  if RecordsInTable(#tmp_rejim)=0
  { var _wYear   :word=Year(DtRep);
    var _wLast02 :word=Last_Day(date(01,02,_wYear));
    _try
    { SQL
       select
          KlRejim.Nrec as Nrec
        , KlRejim.Rejim as Rejim
        //'Z_CALENDAR::KLNDR.MONTHSBROWSE.MONTHLYWORKINGHOURSSTR'
        , Sum(0.00
          + KlNdr.DAYCHAS[01] +KlNdr.DAYMIN[01]/60.0
          + KlNdr.DAYCHAS[02] +KlNdr.DAYMIN[02]/60.0
          + KlNdr.DAYCHAS[03] +KlNdr.DAYMIN[03]/60.0
          + KlNdr.DAYCHAS[04] +KlNdr.DAYMIN[04]/60.0
          + KlNdr.DAYCHAS[05] +KlNdr.DAYMIN[05]/60.0
          + KlNdr.DAYCHAS[06] +KlNdr.DAYMIN[06]/60.0
          + KlNdr.DAYCHAS[07] +KlNdr.DAYMIN[07]/60.0
          + KlNdr.DAYCHAS[08] +KlNdr.DAYMIN[08]/60.0
          + KlNdr.DAYCHAS[09] +KlNdr.DAYMIN[09]/60.0
          + KlNdr.DAYCHAS[10] +KlNdr.DAYMIN[10]/60.0
          + KlNdr.DAYCHAS[11] +KlNdr.DAYMIN[11]/60.0
          + KlNdr.DAYCHAS[12] +KlNdr.DAYMIN[12]/60.0
          + KlNdr.DAYCHAS[13] +KlNdr.DAYMIN[13]/60.0
          + KlNdr.DAYCHAS[14] +KlNdr.DAYMIN[14]/60.0
          + KlNdr.DAYCHAS[15] +KlNdr.DAYMIN[15]/60.0
          + KlNdr.DAYCHAS[16] +KlNdr.DAYMIN[16]/60.0
          + KlNdr.DAYCHAS[17] +KlNdr.DAYMIN[17]/60.0
          + KlNdr.DAYCHAS[18] +KlNdr.DAYMIN[18]/60.0
          + KlNdr.DAYCHAS[19] +KlNdr.DAYMIN[19]/60.0
          + KlNdr.DAYCHAS[20] +KlNdr.DAYMIN[20]/60.0
          + KlNdr.DAYCHAS[21] +KlNdr.DAYMIN[21]/60.0
          + KlNdr.DAYCHAS[22] +KlNdr.DAYMIN[22]/60.0
          + KlNdr.DAYCHAS[23] +KlNdr.DAYMIN[23]/60.0
          + KlNdr.DAYCHAS[24] +KlNdr.DAYMIN[24]/60.0
          + KlNdr.DAYCHAS[25] +KlNdr.DAYMIN[25]/60.0
          + KlNdr.DAYCHAS[26] +KlNdr.DAYMIN[26]/60.0
          + KlNdr.DAYCHAS[27] +KlNdr.DAYMIN[27]/60.0
          + KlNdr.DAYCHAS[28] +KlNdr.DAYMIN[28]/60.0
          +CASE KLNDR.MONTHK
           WHEN 2 THEN CASE WHEN :(_wLast02)=29 THEN 1.00 ELSE 0.00 END
           ELSE 1.00 END
            *(KlNdr.DAYCHAS[29] +KlNdr.DAYMIN[29]/60.0)
          +CASE WHEN KLNDR.MONTHK=2 THEN 0.00 ELSE 1.00 END
            *(KlNdr.DAYCHAS[30] +KlNdr.DAYMIN[30]/60.0)
          +CASE WHEN KLNDR.MONTHK=01 or KLNDR.MONTHK=03 or KLNDR.MONTHK=05 or KLNDR.MONTHK=07
                  or KLNDR.MONTHK=08 or KLNDR.MONTHK=10 or KLNDR.MONTHK=12
              THEN 1.00 ELSE 0.00 END
              *(KlNdr.DAYCHAS[31] +KlNdr.DAYMIN[31]/60.0)
        ) as Summa
      from KlRejim
      inner join KlNdr on KlNdr.YEARK=:(_wYear)
                     and  KlNdr.Rejim= KlRejim.Rejim
      group by KlRejim.Nrec,KlRejim.Rejim
      into tmp_rejim ;
    }
    _Except
    else
    {}
  } //if RecordsInTable(#tmp_rejim)=0
  //-------------------------------
  MTRetrieve(#tmp_report,mfFilters); //
  delete all tmp_report;
  ReReadRecord(#tmp_report01);
  //-------------------------------
  _Try
  { CreateTempVib;
    ClearQuery(vliSQLCommand);
    //--------------------------
    if IsBitCTW(wFilter,1) InsTempVibByMarker(01,DepList) ;//
    if IsBitCTW(wFilter,2) InsTempVibByMarker(02,MarkKat);//
    if IsBitCTW(wFilter,3) InsTempVibByMarker(03,Marker_Persons);
    //--------------------------

    var _pAVidProizv:comp=ExtAttr_ID(coCatalogs,'Вид производства');

    //-------------------
    PrepareSQLQuery('  select  Distinct');
    PrepareSQLQuery('    Persons.Nrec as cPersons');     //ссылка на Persons
    PrepareSQLQuery('   ,Appointments.cAddNrec2 as cLschet');      //ссылка на Lschet
    PrepareSQLQuery('   ,Appointments.Nrec  as cAppoint');//
    PrepareSQLQuery('   ,Appointments.WorkRegime as cKlRejim');
    PrepareSQLQuery('   ,COALESCE(extcatlinks.extcat,'''') as  cKatPodr');      //ссылка на KatPodr
    PrepareSQLQuery('   ,COALESCE(KatPodr.Name,'''') as Podr  ');   //Подразделение
    PrepareSQLQuery('   ,COALESCE(KatPodr.Kod ,'''') as PodrKod');     //Подразделение код
    PrepareSQLQuery('   ,COALESCE(SpKau_VidProizv.Name,'''') as VidProizv');   //Вид пр-ва (ОП/ ВП/НИК/КБ/АУП)
    PrepareSQLQuery('   ,Persons.Fio as Fio');        //ФИО
    PrepareSQLQuery('   ,Persons.StrTabn as StrTabn');    //Табельный номер
    PrepareSQLQuery('   ,Persons.AppDate as AppDate');    //Дата приема на работу
    PrepareSQLQuery('   ,Persons.DisDate as DisDate');    //Дата увольнения
    PrepareSQLQuery('   ,Appointments.AppointDate as AppointDate');//Дата начала работы в текущей должности
    PrepareSQLQuery('   ,Appointments.DisMissDate  as DisMisDate');//Дата ухода с должности
    PrepareSQLQuery('   ,COALESCE(KlSovm.NSOVM,'''') as sSovm');       //Тип занятости (основное место работы, внутренний совместитель, внешний совместитель:)
    PrepareSQLQuery('   ,Lschet.Sovm as wSovm');       //Тип занятости - число
    PrepareSQLQuery('   ,COALESCE(Catalogs.Name,'''') as Post');        //Должность
    PrepareSQLQuery('   ,KlKatego.NAIKAT as sKateg');      //Категория должности - наименование
    PrepareSQLQuery('   ,KlKatego.Kod    as wKateg');      //Категория должности - код
    PrepareSQLQuery('   ,Appointments.Rate');        //Количество ставок по трудовому договору
    PrepareSQLQuery('   ,0.00 as YearNorm');    //Годовая норма времени
    PrepareSQLQuery('   ,COALESCE(KLSISOPL.NASISOPL,'''') as sSisOpl');     //Вид ставки(часовая тарифная ставка/месячная тарифная ставка/оклад)"
    PrepareSQLQuery('   ,COALESCE(KLSISOPL.SISOPL,0) as wSisOpl');     //Вид ставки(часовая тарифная ставка/месячная тарифная ставка/оклад)"
    PrepareSQLQuery('   ,Appointments.TaxRate as TaxRate');    //Оклад (тариф)
     //----------------------
     // Нормативный % ежемесячной премии работника
    PrepareSQLQuery('   ,0.00 as NormProcent'); //ВСЕГО
     //в том числе
    PrepareSQLQuery('   ,0.00 as Prem021');  //Премия за качество и дисциплину труда (021)
    PrepareSQLQuery('   ,0.00 as Prem022');  // Премия за результаты работы (022)
    PrepareSQLQuery('   ,0.00 as Prem023');  // Премия из премиального фонда руководителя (023)
    PrepareSQLQuery('   ,0.00 as Prem032');  // Ежемесячная премия по Положению (032)
    PrepareSQLQuery('   ,0.00 as Prem034');  // Премия за выполнение показателей премирования цехов основного производства (034)
    PrepareSQLQuery('   ,0.00 as Prem038');  // Ежемесячная премия ОПР-повременщиков (038)
    PrepareSQLQuery('   ,0.00 as Prem040');  // // Ежемесечная премия за результаты выполнения показателей премирования (40)
    PrepareSQLQuery('   ,0.00 as NormKvart');//Нормативная величина квартальной премии
    PrepareSQLQuery('   ,0.00 as NormYear'); //Нормативная величина годовой премии
     //Стимулирующие надбавки за квалификацию, сложность и ответственность выполняемых работ
    PrepareSQLQuery('   ,0.00 as Raise006'); // Надбавка за личное клеймо и право контр. Мастера (006)
    PrepareSQLQuery('   ,0.00 as Raise053'); //Надбавка за метрологический контроль (053)
    PrepareSQLQuery('   ,0.00 as Raise055'); //Надбавка за радиационный контроль (055)
    PrepareSQLQuery('   ,0.00 as Raise091'); //Надбавка по положению (091)
     //-------------------------------
    PrepareSQLQuery('   ,0.00 as Raise007'); // Надбавка за ученую степень (007)
     //Стимулирующие надбавки за участие в передаче опыта и знаний
    PrepareSQLQuery('   ,0.00 as Raise056'); //Надбавка за наставничество рабочих (056)
    PrepareSQLQuery('   ,0.00 as Raise098'); //Надбавка за учебную деятельность (098)
     //Надбавки за работу со сведениями, составляющими гостайну
    PrepareSQLQuery('   ,0.00 as Raise048'); //Секретность за стаж работы за отработанное время (048)
    PrepareSQLQuery('   ,0.00 as Raise049'); //Надбавка за секретность к доплате за совмещение (049)
    PrepareSQLQuery('   ,0.00 as Raise050'); //Секретность за отработанное время (050)
    PrepareSQLQuery('   ,0.00 as Raise051'); //Надбавка за секретность (051)
    PrepareSQLQuery('   ,0.00 as Raise052'); //Надбавка за стаж работы с секретн. документ. (052)
    PrepareSQLQuery('   ,0.00 as Raise054'); //Надбавка за работу с шифрами (054)
     //Доплаты за увеличение объема и сложности работ
    PrepareSQLQuery('   ,0.00 as Raise068'); //Доплата при совмещении профессий, расширение зон обслуживания, увеличение объемов работ (068)
    PrepareSQLQuery('   ,0.00 as Raise075'); //Доплата по соглашению к ТД (075)
    PrepareSQLQuery('  From Persons');
    PrepareSQLQuery('  Inner join Appointments on Appointments.Person = Persons.Nrec');
    PrepareSQLQuery('                         and Appointments.AppointDate<=#Date('+DateToStr(DtRep,'DD,MM,YYYY')+')' );
    PrepareSQLQuery('                         and Appointments.lPrizn<>2');//#3674.#4 не нужны заместительства
    PrepareSQLQuery('                         and (case when Appointments.Lprizn in(70,71) then Appointments.DateEnd else Appointments.DismissDate end= 0 ');//
    PrepareSQLQuery('                          or  case when Appointments.Lprizn in(70,71) then Appointments.DateEnd else Appointments.DismissDate end>=#Date('+DateToStr(DtRep,'DD,MM,YYYY')+')' );  //DtRep1
    PrepareSQLQuery('                             )');
    PrepareSQLQuery('  inner join KlRejim      on KlRejim.Nrec = Appointments.WorkRegime');
    PrepareSQLQuery('  inner join Lschet       on Lschet.Nrec = Appointments.cAddNrec2');
    PrepareSQLQuery('  inner join KlSovm       on Lschet.Sovm = KlSovm.Sovm');
    PrepareSQLQuery('  inner join extcatlinks  on extcatlinks.objtype =11');
    PrepareSQLQuery('                         and extcatlinks.modtype  =1');
    PrepareSQLQuery('                         and extcatlinks.staffcat = Appointments.Department');
    //-----------------------------
    if IsBitCTW(wFilter,1)
    {  PrepareSQLQuery(' inner join tempvib VibPodr on VibPodr.wlist=1 and VibPodr.crec = extcatlinks.extcat ');
    }
    if IsBitCTW(wFilter,2)
    {  PrepareSQLQuery(' inner join tempvib VibKat on VibKat.wlist=2 and VibKat.crec = Appointments.EmpCategory ');
    }
    if IsBitCTW(wFilter,3)
    {  PrepareSQLQuery(' inner join tempvib VibPers on VibPers.wlist=3 and VibPers.crec = Persons.Nrec ');
    }
    if Zar_User.POdrShare = '+'
    { PrepareSQLQuery('inner join USERRIGHTS UR on UR.crecds=UDER.cexoz and UR.OWNNAME='''+sUserName+''' ' );
    }
    //-----------------------------

    PrepareSQLQuery('  Inner join KatPodr      on KatPodr.Nrec = extcatlinks.extcat');
    PrepareSQLQuery('  left outer join KlSisopl  on KlSisopl.SisOpl = Appointments.PayModel');
    PrepareSQLQuery('  left outer join Catalogs on Catalogs.Nrec = Appointments.Post');
    PrepareSQLQuery('  left outer join KlKatego on KlKatego.Nrec = Appointments.EmpCategory');
    PrepareSQLQuery('  left outer join AttrVal AVidProizv on AVidProizv.cAttrNam=#Comp('+string(_pAVidProizv,0,0)+')');
    PrepareSQLQuery('                                    and AVidProizv.wTable = 25031'); // coCatalogs
    PrepareSQLQuery('                                    and AVidProizv.cRec = Appointments.Department');
    PrepareSQLQuery('  left outer join SpKau SpKau_VidProizv on SpKau_VidProizv.Nrec = AVidProizv.vComp');
    PrepareSQLQuery('  where  (Persons.ISEMPLOYEE>=''С'' and Persons.ISEMPLOYEE<=''У'' )');
    PrepareSQLQuery('    And (Persons.DisDate=0 ');//
    PrepareSQLQuery('     or Persons.Disdate>=#Date('+DateToStr(DtRep,'DD,MM,YYYY')+') )' ); //DtRep1?
    //----------------------------------------------------
    stmt:=0;
    stmt := sqlAllocStmt;
    wErr:=ExecDSQLex(tntmp_report01);

    if (wErr<>0)
    { message('Ошибка выполнения DSQL запроса 1 при отборе значений ('+string(wErr)+').',error);
      Exit;
    }
  }
  _except
  else
  { timelog('Возникло исключение при запуске запроса 001 '+ExploreException);
  }
  _finally
  {
  }
  StopVisual('',0);
  StartNewVisual(vtIndicatorVisual,vfTimer + vfBreak + vfConfirm,'сбор сумм премий',RecordsInTable(#Tmp_report));
  ReReadRecord(#tmp_report);
  //-------------------------------------
  pGp_KPI_ALG_Calc.SetPeriodByParam(DtRep1,DtRep);
  //-------------------------------------
  var _sum, _Proc:double;
  _Loop fullcache Tmp_report
  { if not NextVisual then exit;
    if timelog_status>1
      timelog('GP_KPI_NormPercent->SborData:Расчет '+string(Tmp_report.fio));
    _loop tmp_rejim
    { Tmp_report.YearNorm:=tmp_rejim.Summa;
      if timelog_status>1
        timelog('GP_KPI_NormPercent->SborData:Режим='+string(tmp_rejim.Rejim)
             +', Tmp_report.YearNorm='+string(Tmp_report.YearNorm)
             +', tmp_rejim.Summa='+string(tmp_rejim.Summa)
             );

    }
    //посчитаем премии.
    _Loop tmp_raise where (( 1 == tmp_raise.bRaise ))
    { //возможно нужно устанавливать период для каждой доплаты
      // tmp_raise.TypePeriod:[List 0 '-',1 'месяц',2 'квартал',3 'год',4  'полугодие',5 'Разовая'],Protect,NoDel
      _sum:=0; _Proc:=0;
      if tmp_raise.cDoplata=pCatClass
      { _Proc:=pGp_KPI_ALG_Calc.CalcRaiseProcentClass(Tmp_report.cAppoint,tmp_raise.cDoplata,0, _Sum);
      }
      else
      { _Proc:=pGp_KPI_ALG_Calc.CalcRaiseProcent(Tmp_report.cAppoint,tmp_raise.cDoplata,0, _Sum);
      }
      if _Proc=0 and _Sum=0 then continue;
      if _sum=0 _sum:=Tmp_report.TaxRate*_Proc/100;
      case tmp_raise.TypePeriod of
      1:
      { case tmp_raise.Vidoplp of
        021: tmp_report.Prem021:=_Proc;  //Премия за качество и дисциплину труда (021)
        022: tmp_report.Prem022:=_Proc;  // Премия за результаты работы (022)
        023: tmp_report.Prem023:=_Proc;  // Премия из премиального фонда руководителя (023)
        032: tmp_report.Prem032:=_Proc;  // Ежемесячная премия по Положению (032)
        034: tmp_report.Prem034:=_Proc;  // Премия за выполнение показателей премирования цехов основного производства (034)
        038: tmp_report.Prem038:=_Proc;  // Ежемесячная премия ОПР-повременщиков (038)
        040: tmp_report.Prem040:=_Proc;  // Ежемесечная премия за результаты выполнения показателей премирования (40)
        end;
      }
      2:
      { tmp_report.NormKvart:=_sum; //Нормативная величина квартальной премии
      }
      3:
      { tmp_report.NormYear:=_sum; //Нормативная величина годовой премии
      }
      end;
    } //_Loop tmp_raise where (( 1 == tmp_raise.bRaise ))
    //----------------------
    // Нормативный % ежемесячной премии работника
    tmp_Report.NormProcent := 0.00+
      +tmp_Report.Prem021  //Премия за качество и дисциплину труда (021)
      +tmp_Report.Prem022  // Премия за результаты работы (022)
      +tmp_Report.Prem023  // Премия из премиального фонда руководителя (023)
      +tmp_Report.Prem032  // Ежемесячная премия по Положению (032)
      +tmp_Report.Prem034  // Премия за выполнение показателей премирования цехов основного производства (034)
      +tmp_Report.Prem038  // Ежемесячная премия ОПР-повременщиков (038)
      +tmp_Report.Prem040  // Ежемесечная премия за результаты выполнения показателей премирования (40)
     ;
    // подсчитаем надбавки
    _Loop fullcache  Raise
    { //Raise.RAISETYPE Raise.Sum
      _Proc:=0;_Sum:=0;
      case Raise.RAISEATTR of
      0: _Sum :=Raise.Sum;
      2: _Proc:=Raise.Sum;
      end;
      if _Sum=0 and _Proc=0 then continue;
      if _Proc=0
      { if tmp_report.TaxRate>0
        _Proc:=Round(100*_Sum/tmp_report.TaxRate);
      }
      else
      { _Sum:=Tmp_report.TaxRate*_Proc/100;
      }
      case tmp_raise01.vidoplp of
      //руб.Стимулирующие надбавки за квалификацию, сложность и ответственность выполняемых работ
      006: tmp_report.Raise006 :=_sum;// Надбавка за личное клеймо и право контр. Мастера (006)
      053: tmp_report.Raise053 :=_sum;//Надбавка за метрологический контроль (053)
      055: tmp_report.Raise055 :=_sum;//Надбавка за радиационный контроль (055)
      091: tmp_report.Raise091 :=_sum;//Надбавка по положению (091)
      //руб.-------------------------------
      007: tmp_report.Raise007 :=_sum;// Надбавка за ученую степень (007)
      //Стимулирующие надбавки за участие в передаче опыта и знаний
      056: tmp_report.Raise056 :=_sum;//Надбавка за наставничество рабочих (056)
      098: tmp_report.Raise098 :=_sum;//Надбавка за учебную деятельность (098)

      //% Надбавки за работу со сведениями, составляющими гостайну
      048: tmp_report.Raise048 :=_Proc;//Секретность за стаж работы за отработанное время (048)
      049: tmp_report.Raise049 :=_Proc;//Надбавка за секретность к доплате за совмещение (049)
      050: tmp_report.Raise050 :=_Proc;//Секретность за отработанное время (050)
      051: tmp_report.Raise051 :=_Proc;//Надбавка за секретность (051)
      052: tmp_report.Raise052 :=_Proc;//Надбавка за стаж работы с секретн. документ. (052)
      054: tmp_report.Raise054 :=_Proc;//Надбавка за работу с шифрами (054)
      //руб. Доплаты за увеличение объема и сложности работ
      068: tmp_report.Raise068 :=_sum;//Доплата при совмещении профессий, расширение зон обслуживания, увеличение объемов работ (068)
      075: tmp_report.Raise075 :=_sum;//Доплата по соглашению к ТД (075)
      end;
    } //_Loop fullcache  Raise
    update current Tmp_report;
  } //_Loop Tmp_report
  Result:=True;
  timelog('GP_KPI_NormPercent->SborData:finish');
} //Function SborData : boolean;

//=======================================
Function HideShowColumnXLS(hideColumn:longint; _width:word=0):boolean;
{ Result:=xlSetColumnWidth(_width, 1,hideColumn, 1,hideColumn);
}

//=======================================
// Печать данных
//---------------------------------------
Function PrintDoc:longint;
var
    ii:word;
    ww_str:string;
{ #__UNUSED__(_wTP,_wLev,_Prec)
  Result:=0;
  StopVisual('',0);
  StartNewVisual(vtIndicatorVisual,vfTimer + vfBreak + vfConfirm,'Вывод данных...',RecordsInTable(#Tmp_report));

  maxColCount:=38;//
  if not iNextVisual('Вывод данных ')
  { Result:=-1;
     exit;
  }
  ww_str:='Отчет сформирован на : '+DateToStr(DTRep,'DD month YYYY г.')
    ;
  wexrow:=1; wexcol:=2;
  MyPutExcel(ww_Str,10,0,-1,-1);
  //-----------------

  HeaderStrCount:=7;
  wexrow:=HeaderStrCount+1;
  MyXlCreaMatrix(1000,maxColCount);
  wexrow:=wexrow-1;
  _Loop tmp_report
  { wexrow++;wexcol:=1;
    if not NextVisual then break;

    MyPutExcel(tmp_report.PodrKod+' '+tmp_report.Podr,10,0,-1,-1);  //Подразделение
    MyPutExcel(tmp_report.VidProizv   ,10,0,-1,-1);//Вид пр-ва (ОП/ ВП/НИК/КБ/АУП)
    MyPutExcel(tmp_report.Fio         ,10,0,-1,-1);//ФИО
    MyPutExcel(chr(13)+tmp_report.StrTabn,10,0,-1,-1);//Табельный номер
    MyPutExcel(chr(13)+DateToStr(tmp_report.AppDate,'DD/MM/YYYY')     ,10,0,-1,-1);//Дата приема на работу
    //MyPutExcel(chr(13)+DateToStr(tmp_report.DisDate,'DD/MM/YYYY')     ,10,0,-1,-1);//Дата увольнения
    MyPutExcel(chr(13)+DateToStr(tmp_report.AppointDate,'DD/MM/YYYY') ,10,0,-1,-1);//Дата начала работы в текущей должности
    //MyPutExcel(chr(13)+tmp_report.DisMisDate,'DD/MM/YYYY')  ,10,0,-1,-1);//Дата ухода с должности
    MyPutExcel(tmp_report.sSovm       ,10,0,-1,-1);//Тип занятости (основное место работы, внутренний совместитель, внешний совместитель:)
    MyPutExcel(tmp_report.Post        ,10,0,-1,-1);//Должность
    MyPutExcel(tmp_report.sKateg      ,10,0,-1,-1);//Категория должности - наименование
    MyPutExcelNumber(tmp_report.Rate    ,2,10,0,-1,-1);//Количество ставок по трудовому договору
    MyPutExcelNumber(tmp_report.YearNorm,0,10,0,-1,-1);//Годовая норма времени
    MyPutExcel(tmp_report.sSisOpl     ,10,0,-1,-1);//Вид ставки(часовая тарифная ставка/месячная тарифная ставка/оклад)"
    MyPutExcelNumber(tmp_report.TaxRate  ,2,10,0,-1,-1); //Оклад (тариф)
//----------------------
// Нормативный % ежемесячной премии работника
    MyPutExcelNumber(tmp_report.NormProcent ,2,10,0,-1,-1);//ВСЕГО
//в том числе
    MyPutExcelNumber(tmp_report.Prem021  ,2,10,0,-1,-1);//Премия за качество и дисциплину труда (021)
    MyPutExcelNumber(tmp_report.Prem022  ,2,10,0,-1,-1);// Премия за результаты работы (022)
    MyPutExcelNumber(tmp_report.Prem023  ,2,10,0,-1,-1);// Премия из премиального фонда руководителя (023)
    MyPutExcelNumber(tmp_report.Prem032  ,2,10,0,-1,-1);// Ежемесячная премия по Положению (032)
    MyPutExcelNumber(tmp_report.Prem034  ,2,10,0,-1,-1);// Премия за выполнение показателей премирования цехов основного производства (034)
    MyPutExcelNumber(tmp_report.Prem038  ,2,10,0,-1,-1);// Ежемесячная премия ОПР-повременщиков (038)
    MyPutExcelNumber(tmp_report.Prem040  ,2,10,0,-1,-1); //Ежемесечная премия за результаты выполнения показателей премирования (40)
    MyPutExcelNumber(tmp_report.NormKvart,2,10,0,-1,-1);//Нормативная величина квартальной премии
    MyPutExcelNumber(tmp_report.NormYear ,2,10,0,-1,-1);//Нормативная величина годовой премии
//Стимулирующие надбавки за квалификацию, сложность и ответственность выполняемых работ
    MyPutExcelNumber(tmp_report.Raise006 ,2,10,0,-1,-1);// Надбавка за личное клеймо и право контр. Мастера (006)
    MyPutExcelNumber(tmp_report.Raise053 ,2,10,0,-1,-1);//Надбавка за метрологический контроль (053)
    MyPutExcelNumber(tmp_report.Raise055 ,2,10,0,-1,-1);//Надбавка за радиационный контроль (055)
    MyPutExcelNumber(tmp_report.Raise091 ,2,10,0,-1,-1);//Надбавка по положению (091)
//-------------------------------
    MyPutExcelNumber(tmp_report.Raise007 ,2,10,0,-1,-1);// Надбавка за ученую степень (007)
//Стимулирующие надбавки за участие в передаче опыта и знаний
    MyPutExcelNumber(tmp_report.Raise056 ,2,10,0,-1,-1);//Надбавка за наставничество рабочих (056)
    MyPutExcelNumber(tmp_report.Raise098 ,2,10,0,-1,-1);//Надбавка за учебную деятельность (098)

//Надбавки за работу со сведениями, составляющими гостайну
    MyPutExcelNumber(tmp_report.Raise048 ,2,10,0,-1,-1);//Секретность за стаж работы за отработанное время (048)
    MyPutExcelNumber(tmp_report.Raise049 ,2,10,0,-1,-1);//Надбавка за секретность к доплате за совмещение (049)
    MyPutExcelNumber(tmp_report.Raise050 ,2,10,0,-1,-1);//Секретность за отработанное время (050)
    MyPutExcelNumber(tmp_report.Raise051 ,2,10,0,-1,-1);//Надбавка за секретность (051)
    MyPutExcelNumber(tmp_report.Raise052 ,2,10,0,-1,-1);//Надбавка за стаж работы с секретн. документ. (052)
    MyPutExcelNumber(tmp_report.Raise054 ,2,10,0,-1,-1);//Надбавка за работу с шифрами (054)

//Доплаты за увеличение объема и сложности работ
    MyPutExcelNumber(tmp_report.Raise068 ,2,10,0,-1,-1);//Доплата при совмещении профессий, расширение зон обслуживания, увеличение объемов работ (068)
    MyPutExcelNumber(tmp_report.Raise075 ,2,10,0,-1,-1);//Доплата по соглашению к ТД (075)

  } //_Loop tmp_report_SP
  //если нужно установить формат времени
  //xlSetNumberFormat('[h]:mm:ss;@',HeaderStrCount+1,7,wexrow,maxColCount);
  MyxlWriteMatrix(wexrow);
  xlFreeMatrix;
  matrixkl:=False;
  MyxlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH, xlThin, 0, 0, HeaderStrCount+1 ,1,wexrow,maxColCount); //Обрамление
  xlWrapText(HeaderStrCount, 1, wexrow, maxColCount);
  //-------- спрячем колонки с месяцем и годом
  //******************************************
  // Подписи
  //******************************************
  wexrow:=wexrow+3;  wexcol:=1;
  xlMergeCells(wexrow,1,wexrow,3);
  MyPutExcel(sDolg,10,0,-1,-1); //
  wexrow:=wexrow+1;  wexcol:=1;
  xlMergeCells(wexrow,1,wexrow,3);
  MyPutExcel(MyGetInitial(sPopdis,true),10,0,-1,-1); //
  wexcol:=8;//6
  MyPutExcel('подпись',8,0,-1,-1); //
  MyxlFrameCells( xlBorderT  , xlThin, 0, 0, wexrow ,5,wexrow,6); //Обрамление
  Result:=0;
} //Function PrintDoc(_wTP:word; _wLev:word; _Prec:comp):longint;


//------------------------------------
// Сбор данных
//------------------------------------
Function FormDoc:boolean;
var
   werr:word;
{ timelog('FormDoc:Start');
  nmtemplate:='GP_KPI_NormPercent.xlsm';
  werr:=ExcelInit(nmtemplate,true);

  if IsBitCTW(wFilter,1)
  { if DepList <> 0
      DoneMarker(DepList, '');
    DepList := CLSF.LoadCurrentDepartmentList;
  }
  ClearFuncCache;

  Result:=SborData;
  if Result
    Result:=PrintDoc=0;
  MyXlEnd;
  Result:=True;
} //Function FormDoc:boolean;

//************************************************
// визуальные элементы
//-------------------------------------
Screen scrParam 'Параметры формирования' (,,sci1Esc);
Table Zar_User;
Fields
  DTRep:NoProtect;
  sPopdis  :NoProtect,PickButton;// подпись отчета
  sDolg    :NoProtect,PickButton;// подпись отчета
  logfilekl:NoProtect;
  wFilter  :NoProtect;
  //FILTR_KatPodr : Protect,PickButton;
  FiltrPodr: Protect,PickButton;
  VidKat   : Protect,PickButton;
  Filtr_Persons: Protect,PickButton;
Buttons
  cmOk,default,,'Сформировать отчет', hcOplTrudhlp, sci1Esc;
  cmCancel,,,'Выход', hcOplTrudhlp, sci1Esc;
<<

  Дата формирования отчета .@@@@@@@@@@@@@@@@

  `Фио подписанта`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Должность подписанта`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@

  `Фильтры`                  [.] Отладка`
  [.] По подразделению`.@@@@@@@@@@@@@@@@@@@@@
  [.] По категории`    .@@@@@@@@@@@@@@@@@@@@@
  [.] По сотруднику`   .@@@@@@@@@@@@@@@@@@@@@

  <.~С~формировать.>   <.  ~О~тмена  .>
>>
end; //scrParam 'Параметры формирования' (,,sci1Esc), Cyan;


//--------------------------------------------
// Обработчик событий интерфейса
//--------------------------------------------
HandleEvent
//------------------------------
cmInit:
{ TimeLog_Init;
  timelog('GP_KPI_NormPercent->cmInit');
  ReadParam;
  pCatClass :=coGetTune('NPOEM_OWN.Raise.Raise_Class');
  var CL: ContextList;
  if (not CL.Add(CS, 'WorkingTable'))
  { abort;
    exit;
  }
  delete all tmp_Raise;
  delete all tmp_Rejim;
  pCatDoplMain:=iCatFunc.GetCatalogsNRec(integer(-17));
  sUserName:=UserName();
  if Getfirst Zar_user=tsok {}
  ReScanPanel(#Zar_user);
}
//------------------------------
cmDone:
{ SaveParam;
}
//------------------------------
cmPick:
{  case CurField of
   //----------------------------
   #sPopdis,#sDolg :
   {
      var wK:word;
      var DummyMarker1, DummyMarker2: TPtr;
      var _pTmp:comp=0;
      var _cRec:comp;
      DummyMarker1 := InitMarker('', 8, 10, 10);
      DummyMarker2 := InitMarker('', 8, 1, 1);
      wK:=0;
      _pTmp:=0;

      if (viCYPersons.Choice(DummyMarker1, 3, vfCanSelect, wK, _cRec, DummyMarker2))
      {
        set _pTmp:=viCYPersons.GetPsnByKindChoice(wK, _cRec);
        vSpr.pPerson :=_pTmp;
        if vSpr.Getfirst Persons=tsok
        { sPopdis:=vSpr.Persons.Fio;
          if vSpr.Getfirst Appointments=tsok
           sDolg:=iCatFunc.GetCatalogsName(vSpr.Appointments.Post);
        }
      }
      DoneMarker(DummyMarker1, '');
      DoneMarker(DummyMarker2, '');
   }

   //------------
   #FiltrPodr:
   {
     SetupDepartments(comp(11));
     //UpdateFilter;
     if PAF.IsDepartmentFilterSet <> IsBitCtW(wFilter,1)
       BitOnW(wFilter,1);
   }
   //------------------------------
   #VidKat:
   {
      RunInterface(pickkat1,word(0), MarkKat, vfMultipleSelection);
      SelectMarKat;
      BitOnW(wFilter,2);
   }
   //------------------------------
   #Filtr_Persons:
   { KauMarkerName := iGetKau.GetMarkerName(cgKau_Persons);
     StoreMarker(Marker_Persons,KauMarkerName);
     If (iGetKau.GetCodeKau(cgiPickMult+cgiNotClear,cgKau_Persons,Comp(0)) <> 0)
     { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
       CopyMarker(Marker_Persons,Marker_Tmp);
       DoneMarker(Marker_Tmp,'');
       SetFilterNm(#Filtr_Persons);
       BitOnW(wFilter,3);
     }
   }
   end;
} //cmPick:
cmDelOnProtect:
{
   case CurField of
   //--------------
   #FiltrPodr:
   {
     PAF.ClearDepartmentFilter;
     ReReadRecord(#ZAR_USER);
     BitOffW(wFilter,1);
     //   UpdateFilter;
   }
   //------------------------------
   #VidKat:
   { ClearMarker(MarkKat);
      SelectMarKat;
      BitOffW(wFilter,2);
   }
   //------------------------------
   #Filtr_Persons:
   { ClearMarker(Marker_Persons);
     BitOffW(wFilter,3);
     SetFilterNm(#Filtr_Persons);
   }
   end;
} //cmDelOnProtect:
//------------------------------
cmCheckField:
{
}
//------------------------------
cmOk:
{  xlKillExcel;
   StartNewVisual(vtNumericVisual,vfTimer + vfBreak + vfConfirm,'Подготовка данных для отчета',0);
   if not FormDoc then message('Ошибки при формировании');
   StopVisual('',0);
   xlKillExcel;
   //CloseInterFace(cmDone);
}
end;

end.
