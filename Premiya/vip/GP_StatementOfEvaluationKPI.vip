/*************************************************************************************************\
* Наименование: Ведомости оценки выполнения показателей премирования                              *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |04/09/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include ChoiseYourPersons.vih
#include FRRecordDefinition.vih
#include Marker.Vih

#include GP_UserAccessService.vih
#include GP_StatusChange.vih
#include GP_QueryBuilder.vih
#include GP_KPI_Statements.vih
#include GP_KPI_Alg.vih
#include GP_Status.vih
#include GP_Log.vih


//#include GP_UserFilterStoreDSK.vih
//#include GP_UserFilterCatalogs.vih
//#include GP_UserFilterYesNo.vih
//#include GP_UserFilterList.vih
#include GP_PickChiefPost.vih

interface GP_StatementOfEvaluationKPI 'Ведомости оценки выполнения показателей премирования', Cyan;
show(10,5,140,35);


table struct Statements=GP_KPI_Statements;
Table Struct tmp_Print
(   DepCode:string[50] // PodrOc.Code;
  , KPI_Kod:string[50] // GP_KPI.Kod;
  , KPI_Name:string// GP_KPI.Name;
  , PostOcName  : string
  , Plan:double //] GP_KPI_StatementSpec.Plan;
  , Fact:double // GP_KPI_StatementSpec.Fact;
  , Fact_Pr :double//Fact_Proc
  , Itog_Pr :double//Fact_Proc
  , ImplProc:double //] GP_KPI_StatementSpec.ImplProc;
  , ItKoef :double //] ItKoef;
  , cRec: comp
)
with index
( tmp_Print01 = DepCode+KPI_Kod
);
//------------------------------------
var UserAccessService:GP_UserAccessService NoAuto;
    StatusChange:GP_StatusChange NoAuto;
    iQBuilder:GP_QueryBuilder new;
    BufNewStatement:type$GP_KPI_Statements;
    KPI_Statements:GP_KPI_Statements;
    KPI_Alg:GP_KPI_Alg_Calc New;
    viCYPersons:ChoiseYourPersons;
    iGP_PickChiefPost:GP_PickChiefPost;
    oGP_Log :GP_Log;
    //FilterSwitch:longint;
    //IsFilterSet:boolean;
    //UserFilterList:GP_ObjUserFilterList;
    //FilterStore:GP_IUserFilterStore;

   boPrint_Group_First:boolean;
   pMarker:IMarker(Marker) new;

//--- Настройки
   NPOEM_OWN_Raise_ST_EV_ITKOEF :longint;//Ведомость оценки, округлять итоговый коэффициент до
//-----------------------------------------
// Фильтры
//-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
   isFilterRun  :boolean;
   wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :tptr;

   #mrkfld_(CatPodr)
   #mrkfld_(CatPodrOtv)
   DTB:date;
   DTE:date;

//---------------------------
create view
//---------------------------
var NewExecutor,NewChiefPost:string;
as select
  Round(if(GP_KPI_StatementSpec.ImplProc<100,GP_KPI_StatementSpec.ImplProc/100,1)*GP_KPI_StatementSpec.UdVes
      ,NPOEM_OWN_Raise_ST_EV_ITKOEF) (fieldname=ItKoef)
, Round(100*GP_KPI_StatementSpec.Fact/GP_KPI_StatementSpec.Plan,3) (FieldName=Fact_Proc)
from
  Statements,GP_Status,Persons Executor,
  StaffStruct,Catalogs ChiefPost,Catalogs ChiefDep,
  GP_KPI_StatementSpec,
  GP_KPI,KatEd,Catalogs PodrOc,Catalogs PostOc,Catalogs UcPeriod,
  Persons,GP_KPI_Statements,
  tmp_Print(tmp_Print01) ,
  //---- Фильтры
  Catalogs Catalogs_Flt
where((
  Statements.cStatus==GP_Status.NRec and
  Statements.cExecutor==Executor.NRec and
  Statements.cChiefStaffStr==StaffStruct.NRec and
  StaffStruct.Post==ChiefPost.NRec and StaffStruct.Department==ChiefDep.NRec and
  Statements.NRec==GP_KPI_StatementSpec.cStatement and
  GP_KPI_StatementSpec.cKPI==GP_KPI.NRec and GP_KPI.cKatEd == KatEd.NRec and
  GP_KPI_StatementSpec.cPodr == PodrOc.NRec and
  GP_KPI_StatementSpec.cPost == PostOc.NRec and
  GP_KPI_StatementSpec.cUcPeriod==UcPeriod.NRec and
  //---- Фильтры
  wc_nrec == Catalogs_Flt.Nrec

))

order by Statements.DocDate;

DataStream DTS
(
  [DocDate] DateToStr(Statements.DocDate,'Month YYYY г.');
  [DateByRez] DateToStr(Sub_Months(Statements.DocDate,1),'Month YYYY г.');
  [ChiefPost] ChiefPost.Name;
  [ChiefDepCode] ChiefDep.Code;
  [Executor] Executor.FIO;
  [StatementNRec] Statements.NRec;
  /*
  table GP_KPI_StatementSpec
  (
    [DepCode] PodrOc.Code;
    [KPI_Kod] GP_KPI.Kod;
    [KPI_Name] GP_KPI.Name;
    [Plan] GP_KPI_StatementSpec.Plan;
    [Fact] GP_KPI_StatementSpec.Fact;
    [ImplProc] GP_KPI_StatementSpec.ImplProc;
    [ItKoef] ItKoef;
  );
  */
  //---------------------
  DataSet GP_KPI_StatementSpec
  (
    [DepCode]   tmp_Print.DepCode;
    [KPI_Kod]   tmp_Print.KPI_Kod;
    [KPI_Name]  tmp_Print.KPI_Name;
    [Plan]      tmp_Print.Plan;
    [Fact]      tmp_Print.Fact;
    [Fact_Proc] tmp_Print.Fact_Pr;
    [ImplProc]  tmp_Print.ImplProc;
    [ItKoef]     Round(tmp_Print.ItKoef,2);
    [PostOcName] tmp_Print.PostOcName ;
  );
)

//HandleEvent table GP_KPI_StatementSpec
HandleEvent dataset GP_KPI_StatementSpec
cmPreProcess:{
  boPrint_Group_First:=getfirst tmp_print=tsok;
}
cmOnProcess:
{ if (not NextVisual)
    BreakProcess;

  if (boPrint_Group_First)
  {
    boPrint_Group_First := false;
    ContinueDataset;

  }
  else
  { if getnext tmp_print=tsok
    { ContinueDataset;
    }
    else BreakProcess;
  }
}
end;

HandleEvent
cmPreProcess:{
  StartNewVisual(vtRotateVisual, vfTimer + vfBreak + vfConfirm, 'Печать ведомости...', 0);
}
cmPostProcess:{
  StopVisual;
}
end;
end;

//******************************************************************************
// Функции
//******************************************************************************
  //------------------------------------
  // Наименование интерфейса
  //------------------------------------
  Function GetInterfaceName:string;
  { Result:=#(__InterfaceName__);
  }
  //------------------------------------
  // сохранить параметры
  //------------------------------------
  Procedure SaveParam;
  { SaveMyDsk(wFilter  ,GetInterfaceName+'_wFilter');
    SaveMyDsk(DTB      ,GetInterfaceName+'_DTB');
    SaveMyDsk(DTE      ,GetInterfaceName+'_DTE');
    //-----------------------
    DoneMarker(Marker_CatPodr   , GetInterfaceName+'_CatPodr' );
    DoneMarker(Marker_CatPodrOtv, GetInterfaceName+'_CatPodrOtv');
  } //Procedure SaveParam;

  //------------------------------------
  // восстановить параметры
  //------------------------------------
  Procedure ReadParam;
  { if not ReadMyDsk(wFilter,GetInterfaceName+'_wFilter',false) wFilter:=0;
    if not ReadMyDsk(DTB    ,GetInterfaceName+'_DTB'    ,false) DTB:=ZeroDate;
    if not ReadMyDsk(DTE    ,GetInterfaceName+'_DTE'    ,false) DTE:=ZeroDate;

    Marker_CatPodr    :=InitMarker(GetInterfaceName+'_CatPodr' , 8, 50, 10, True);
    Marker_CatPodrOtv :=InitMarker(GetInterfaceName+'_CatPodrOtv' , 8, 50, 10, True);

  } //  Procedure ReadParam;

    //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_CatPodr
    { #mrkfiltr_(Catalogs_Flt,CatPodr,Nrec,wc_nrec,Catalogs_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_CatPodrOtv
    { #mrkfiltr_(Catalogs_Flt,CatPodrOtv,Nrec,wc_nrec,Catalogs_Flt.Name)
    }
    ReScanPanel(#Catalogs_Flt);
  } //Procedure SetFilterNM(_Field:longint)


procedure FillStatements;forward;
procedure PrintDoc; forward;
Function GetColorChange(_wNpp:word) : word;cacheable;
{ #__UNUSED__(_wNpp)
  //ColorSysRed
  Result:=wGetTune('NPOEM_OWN.RAISE.COLOR_CHANGE')
}
procedure SetDocFieldsState;forward;


function GetPersonsFIO(cPerson:comp):string; cacheable;
{
  result:='';

  if (getfirst fastfirstrow Persons where((cPerson==Persons.NRec))=tsok)
    result:=Persons.FIO
} //function GetPersonsFIO(cPerson:comp):string;

//===================================
//ИЗМЕНИТЬ СТАТУС
//===================================
Function ChangeStatus(_pStatus_From: comp; _pStatus_to:comp) : boolean;
{ Result:=True;
  var isAllOk:boolean=true;
  if Statements.cStatus<>_pStatus_From then
  { Result:=false;
    oGP_Log.Write('В ведомости '+Statements.DocNumber +' статус отличен от текущей');
    Exit;
  }
  if Statements.cStatus=KPI_Statements.GetDefaultStatus()
  { PushPos(#GP_KPI_StatementSpec);
    _Loop GP_KPI_StatementSpec
    { if not IsBitCtW(GP_KPI_StatementSpec.wOption,1)
      { isAllOk:=false; break;
      }
    }
    PopPos(#GP_KPI_StatementSpec);
    ReScanPanel(#GP_KPI_StatementSpec);
  }
  if not isAllOk
  { oGP_Log.Write('В ведомости '+Statements.DocNumber+ ' не везде заполнена спецификация');
    Result:=false;
    exit;
  }
  if (KPI_Statements.ChangeStatus(Statements.NRec,StatusChange.StatusChangeLog)) {
        set Statements.cStatus:=_pStatus_to;
        update current Statements;
    oGP_Log.Write('Изменили статус в ведомости '+Statements.DocNumber);
  }
} //Function ChangeStatus: boolean;


browse brStatements (,,sci14Esc);
table Statements;
recMarker=pMarker;
fields
  Statements.DocNumber '№ ведомости' ('№ ведомости',,):[15],Protect,NoAutoSize;
  Statements.DocDate 'Дата' ('Дата ведомости',,):[10,'MM.YYYY'],Protect,NoAutoSize;
  GP_Status.Name 'Статус' ('Статус ведомости',,sci134Esc):[25],Protect,NoDel,PickButton;
  ChiefPost.Name 'Должность ответственного' ('Должность ответственного',,):[25],Protect,NoDel;
  ChiefDep.Code 'Подразделение ответственного' ('Подразделение ответственного',,):[25],Protect,NoDel;
  Executor.FIO 'Исполнитель' ('Исполнитель',,):[25],Protect,NoDel;
end;

//========================================================
// Визуальная часть
//========================================================
Window wnFilter 'Установите фильтры'  Cyan, EscClose;
  Show at (,,70,10);
Screen scrFilter 'Фильтры' ('Фильтры',,sci13Esc);
Table Catalogs_Flt;
Fields
  wFilter :NoProtect;
  DTB : NoProtect;
  DTE : NoProtect;
  Filtr_CatPodr  : PickButton,Protect;
  Filtr_CatPodrOtv : PickButton,Protect;
Buttons
  cmOk    ,,, 'продолжить выполнение', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Фильтр по`
 [.] Периоду`                    с .@@@@@@@@@@ по .@@@@@@@@@@
 [.] Подразделению оценки`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Подразделению оценивающего` .@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{
}
cmDone:
{
}
cmOk:
{ CloseWindowEx(wnFilter,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;




window WinCreateStatement 'Создание ведомости' EscClose, Blue;
show(50,5,100,14);

screen scCreateStatement (,, sci13Esc);
NoTableNavigation;
fields
  BufNewStatement.DocDate ('Дата ведомости',,):['MM.YYYY'],NoProtect,
    {Font={BackColor=if(BufNewStatement.DocDate=ZeroDate,ColorNeed,0)}};
  NewExecutor ('Исполнитель',,):Protect,PickButton,
    {Font={BackColor=if(BufNewStatement.cExecutor=0,ColorNeed,0)}};
  NewChiefPost ('Должность ответственного',,):Protect,PickButton,
    {Font={BackColor=if(BufNewStatement.cChiefStaffStr=0,ColorNeed,0)}};
buttons
  cmCreateStatement,,,'Добавить',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;
<<

 `Период показателя`.@@@@@@@@
 `Исполнитель`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Должность ответственного`
  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <.  Добавить  .>                   <.  Отмена  .>
>>
end;
HandleEvent
cmInit:{
  if (BufNewStatement.DocDate=ZeroDate)
    BufNewStatement.DocDate:=date(1,Month(Cur_Date),Year(Cur_Date));

  if (BufNewStatement.cExecutor=0) {
    BufNewStatement.cExecutor:=UserAccessService.UserPersonsNRec;
    NewExecutor:=GetPersonsFIO(BufNewStatement.cExecutor);
  }

  ToggleFieldSelectable(fnNewExecutor,UserAccessService.IsAdmin);
}
cmCreateStatement:{
  if (BufNewStatement.DocDate=ZeroDate) {
    message('Пожалуйста, укажите дату ведомости.',error);
    SelectField(#BufNewStatement.DocDate);
    PutCommand(cmPick);
    exit;
  }
  if (BufNewStatement.cExecutor=0) {
    message('Пожалуйста, укажите исполнителя.',error);
    SelectField(fnNewExecutor);
    PutCommand(cmPick);
    exit;
  }
  if (BufNewStatement.cChiefStaffStr=0) {
    message('Пожалуйста, укажите должность ответственного.',error);
    SelectField(fnNewChiefPost);
    PutCommand(cmPick);
    exit;
  }

  if (getfirst fastfirstrow GP_KPI_Statements
      where((
        BufNewStatement.DocDate==GP_KPI_Statements.DocDate and
        BufNewStatement.cExecutor==GP_KPI_Statements.cExecutor(noindex) and
        BufNewStatement.cChiefStaffStr==GP_KPI_Statements.cChiefStaffStr(noindex)
      ))=tsok) {
    if (message('Ведомость с данными параметрами уже существует.'#13+
                'Перейти к ней?',Confirmation+YesNo)=cmYes) {
      if (getfirst Statements where((GP_KPI_Statements.NRec==Statements.NRec))=tsok)
        ReReadRecord(tnStatements);
      CloseWindow(CurWindow);
    }
    exit;
  }

  if (KPI_Statements.CreateStatement(BufNewStatement)) {
    Statements.buffer:=type$Statements(BufNewStatement);
    insert current Statements;
    ReReadRecord(tnStatements);
    PutCommand(cmEdit);
  }

  CloseWindow(CurWindow);
}
end;
end;//WinCreateStatement

window WinEdit 'Редактирование ведомости оценки выполнения показателей премирования' Blue;
show(10,5,190,35);

screen scEditStatements (,,sci1Esc);
show(,,,6) fixed_Y;
table Statements;
fields
  Statements.DocNumber ('№ ведомости',,):Protect;
  Statements.DocDate ('Дата ведомости',,):['MM.YYYY'],Protect;
  GP_Status.Name ('Статус ведомости',,):Protect,NoDel;
  ChiefPost.Name ('Должность ответственного',,):Protect,NoDel;
  ChiefDep.Code ('Подразделение ответственного',,):Protect,NoDel;
  Executor.FIO ('Исполнитель',,):Protect,NoDel;
<<
 `№ ведомости`.@@@@@@ `Дата ведомости`.@@@@@@@ `Статус`.@@@@@@@@@@@@@@@@@@

 `Должность ответственного`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразделение ответственного`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Исполнитель`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

browse brEditStatementSpec (,,sci1Esc);
show(,7,,);
table GP_KPI_StatementSpec;
fields
  GP_KPI_StatementSpec.PosNumber '№' :[3], Centered, Protect, NoAutoSize;
  PodrOc.Code   'Номер','подразделения': [15], Protect, NoDel, NoAutoSize;
  PodrOc.Name   'Наименование','подразделения': [25], Protect, NoDel;
  PostOc.Name   'Должность': [25], Protect, NoDel;
  GP_KPI.Name   'Показатель премирования', ('Наименование показателя премирования',,): [80], Protect, NoDel;
  GP_KPI.KOD    'Код','показателя' : [6], Protect, NoDel;
  GP_KPI_StatementSpec.UdVes     'Удельный','вес':[10.2], Protect, NoAutoSize;
  GP_KPI_StatementSpec.LowLimit  'Нижняя','граница':[10.2], Protect, NoAutoSize;
  GP_KPI_StatementSpec.HighLimit 'Верхняя','граница':[10.2], Protect, NoAutoSize;
  KatEd.Name    'Ед.изм.', ('Ед.изм.'): [10], Centered, Protect, NoDel, NoAutoSize;
  GP_KPI_StatementSpec.Plan 'Плановое','значение':[12.2], Protect, NoAutoSize;
  GP_KPI_StatementSpec.Fact 'Фактическое','значение':[12.3], Protect, NoAutoSize
    ,{Font={Color=if(IsBitCtW(GP_KPI_StatementSpec.wOption,1),GetColorChange(1),1)}}   ;
  Fact_Proc   'Процент','выполнения','показателя','премир-я' ('Процент выполнения показателя премирования',,):[12.2], Protect, NoAutoSize;
  GP_KPI_StatementSpec.ImplProc 'Итоговый %','выполнения','показателя','премир-я' ('Процент выполнения показателя премирования',,):[12.2], Protect, NoAutoSize;
  UcPeriod.name 'Учетный','период':[10], Protect, NoDel;
  ItKoef 'Итоговый', 'коэффициент', 'с учетом','веса' ('Итоговый коэффициент с учетом веса',,):[12.3], Protect, NoAutoSize;
  [Lb_Empt] '' :[20],NoAutosize;
end;



HandleEvent
cmInit:{
  SetDocFieldsState;
}
cmDone:{
  if (not UpDateTable) abort;
}
cmDelete:{
  if (not UserAccessService.CanDel(Statements.cStatus)) {
    stop;
    exit;
  }

  if (message('Удалить запись?',yesno+Warning+mfSwapButtons)<>cmYes) {
    stop;
    exit;
  }
}
cmHotKeys:{
  PutContextMenuCommand('GP_StatementOfEvaluationKPI_HotKeys');
}
cmValue1:{//История изменения статусов
  StatusChange.ShowStatusChangeLog(coGP_KPI_Statements,Statements.NRec);
}
cmPrintDoc:{
  PrintDoc;
}
cmRefresh:
{ UpdateTable;
  FillStatements;
}

end;
end;//WinEdit


/*
window WinFilter 'Фильтр' DoAccept, EscClose, Gray;
show(50, 5, 110, 12);

screen scFilter (, , sci13Esc);
fields
  FilterSwitch(,,sci1Esc):noprotect;
  [FilterArc] UserFilterList.FilterStr(1):Protect,PickButton;
  [FilterKor] UserFilterList.FilterStr(2):Protect,PickButton;
  [FilterDep] UserFilterList.FilterStr(3):Protect,PickButton;
buttons
  cmOK,,,'Установить',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;
<<

    [.] Архивный`                 .@@@@@@@@@@@@@@@@@@@@@@@
    [.] Требуется корректировка`  .@@@@@@@@@@@@@@@@@@@@@@@
    [.] Оцениваемое подразделение`.@@@@@@@@@@@@@@@@@@@@@@@

 <. ~У~становить .>                           <. ~О~тмена  .>
>>
end;

HandleEvent
cmInit:{
  UserFilterList.Load;
}
cmDone:{
  UserFilterList.Save;
}
cmOK:{
  PutCommand(cmDefault);
}
end;
end;//WinFilter */

procedure SetDocFieldsState;
{
  if (UserAccessService.CanDel(Statements.cStatus))
    SetHelpAndStatusContext(scEditStatements, -1, sci18Esc, hcKeepCurrent)
  else
    SetHelpAndStatusContext(scEditStatements, -1, sci1Esc, hcKeepCurrent);

  if (StatusChange.CanChangeStatus(Statements.cStatus)) {
    if (UserAccessService.CanDel(Statements.cStatus))
    { SetHelpAndStatusContext(scEditStatements, #GP_Status.Name, sci138Esc, hcKeepCurrent);
    }
    else
    { SetHelpAndStatusContext(scEditStatements, #GP_Status.Name, sci13Esc, hcKeepCurrent);
    }
    SetInputLineFlags(scEditStatements, #GP_Status.Name, inPickButton);
  } else {
    if (UserAccessService.CanDel(Statements.cStatus))
      SetHelpAndStatusContext(scEditStatements, #GP_Status.Name, sci18Esc, hcKeepCurrent);
    else
      SetHelpAndStatusContext(scEditStatements, #GP_Status.Name, sci1Esc, hcKeepCurrent);
    SetInputLineFlags(scEditStatements, #GP_Status.Name, 0);
  }

  ToggleFieldProtected(#GP_KPI_StatementSpec.Fact,not UserAccessService.CanEdit(Statements.cStatus));
} //procedure SetDocFieldsState;


procedure PrintDoc;
var FReport: tptr;
    ReportNames: array [0..0] of String;
/*
# IFDEF _2019_02_13_
    ExportParam:String;
# ELSE

    ExportParam:frxPDFExportParam;
# ENDIF
*/
    ExportParam:String;
{
  if (not IsValidAll(tnStatements)) exit;
  if (LoCase(GP_Status.Name)='черновик') {
    message('На печать можно вывести только ведомости в статусе отличном от "черновик"');
    exit;
  }
  delete all tmp_print;
  PushPos(#GP_KPI_StatementSpec);
  _Loop GP_KPI_StatementSpec
  { tmp_print.DepCode  := PodrOc.Code;
    tmp_print.KPI_Kod  := GP_KPI.Kod;
    tmp_print.KPI_Name := GP_KPI.Name;
    tmp_print.Plan     := GP_KPI_StatementSpec.Plan;
    tmp_print.Fact     := GP_KPI_StatementSpec.Fact;
    tmp_print.Fact_Pr  := Fact_Proc;
    tmp_print.ImplProc := GP_KPI_StatementSpec.ImplProc;
    tmp_Print.PostOcName := PostOc.Name;
    //tmp_print.ItKoef   := //Round(ItKoef,ItKoef3);
    // округлим уже при выводе
    tmp_print.ItKoef   := ItKoef;
    tmp_print.crec     := GP_KPI_StatementSpec.Nrec;
    insert current tmp_print
  }
  PopPos(#GP_KPI_StatementSpec);
  //RunFReportByGroup(DTS, '');
  FReport := FRCreate(DTS);

  FRGetReportNames(FReport, ReportNames);

  if (count(ReportNames)>0)
    if (FROpenReport(FReport, ReportNames[0])) {
/*
# IFDEF _2019_02_13_
      //'Pages=1-5;Picture=False;DeleteEmptyRows=True;OpenAfterExport=True'
      ExportParam:='ShowDialog=False;OpenAfterExport=True';
# ELSE
      ClearAdvRecord(ExportParam);
      FRGetDefaultParameters(frExportPDF, ExportParam);
      ExportParam.Pages:='';
      ExportParam.ShowDialog := False;
      ExportParam.OpenAfterExport := True;
# ENDIF
*/
      ExportParam:='ShowDialog=False;OpenAfterExport=True';
      if (FRSetParameters(FReport, frExportPDF, ExportParam))
        FRExportReport(FReport, frExportPDF, '');
    }

  FRDestroy(FReport);
}

procedure FillStatements;
var m:tptr;
    cRec:comp;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Отбор ведомостей...', 0);

  cRec:=Statements.NRec;

  delete all Statements;
  iQBuilder.AddToSelect('Distinct GP_KPI_Statements.*');
  iQBuilder.AddToFrom('GP_KPI_Statements');
  if IsBitCTW(wFilter,2) and GetMarkerCount(Marker_CatPodr)>0
  { iQBuilder.AddToFrom('inner join GP_KPI_StatementSpec Spec on (GP_KPI_Statements.NRec = Spec.cStatement)');
  }
  if IsBitCTW(wFilter,3) and GetMarkerCount(Marker_CatPodrOtv)>0
  { iQBuilder.AddToFrom('inner join StaffStruct on (GP_KPI_Statements.cChiefStaffStr = StaffStruct.NRec)');
  }
  var _Executor:comp=UserAccessService.UserPersonsNRec;
  if not UserAccessService.IsAdmin
  { if UserAccessService.OnlyUserDoc(1)
    { var _cExecutor:comp=UserAccessService.UserPersonsNRec;
      iQBuilder.AddToWhere('GP_KPI_Statements.cExecutor =#comp('+string(_cExecutor)+')');
    }
  }
  if IsBitCTW(wFilter,1)
  { if DTB<>ZeroDate
      iQBuilder.AddToWhere('GP_KPI_Statements.DocDate >=#Date('+DateToStr(DTB,'DD,MM,YYYY')+')');
    if DTE<>ZeroDate
      iQBuilder.AddToWhere('GP_KPI_Statements.DocDate <=#Date('+DateToStr(DTE,'DD,MM,YYYY')+')');
  }

  m:=UserAccessService.PermittedStatusMarker;
  if (GetMarkerCount(m)>0)
    iQBuilder.AddToWhereMarker('GP_KPI_Statements.cStatus',m);
  if IsBitCTW(wFilter,2) and GetMarkerCount(Marker_CatPodr)>0
  { iQBuilder.AddToWhereMarker('Spec.cPodr',Marker_CatPodr);

  }
  if IsBitCTW(wFilter,3) and GetMarkerCount(Marker_CatPodrOtv)>0
  { iQBuilder.AddToWhereMarker('StaffStruct.Department',Marker_CatPodrOtv);

  }
/*  if (IsFilterSet) {
    if ((FilterSwitch and 1b)<>0) {//Архивный
      if (FilterStore.LoadComp('FilterArc')>0)
        iQBuilder.AddToWhere('GP_KPI_Plan.dEnd>#date(0,0,0) and GP_KPI_Plan.dEnd<',d1)
      else
        iQBuilder.AddToWhere('(GP_KPI_Plan.dEnd=#date(0,0,0) or GP_KPI_Plan.dEnd>=#date('+DateToStr(d1,'DD,MM,YYYY')+'))');
    }

    if ((FilterSwitch and 10b)<>0) {//Требуется корректировка
      iQBuilder.AddToWhere('Case When Persons.DisDate>#date('+DateToStr(d1,'DD,MM,YYYY')+') Then ''Да'' '+
                                'When Appointments.NRec Is Not Null Then ''Да'' '+
                                'Else ''Нет'' End=',if(FilterStore.LoadComp('FilterKor')>0,'Да','Нет'));
    }

    if ((FilterSwitch and 100b)<>0) {//Оцениваемое подразделение
      m:=FilterStore.LoadMarker('mFilterDep');
      iQBuilder.AddToWhereMarker('GP_KPI_Plan.cPodr',m);
      DoneMarker(m,'');
    }
  } */

  //if (sqlSelectInto(iQBuilder.Make,tnStatements)<>tsok)
  if (sqlSelectInto(iQBuilder.Make(0,(Timelog_Status>2)),tnStatements)<>tsok)
    message('Ошибка выполнения DSQL запроса при отборе ведомостей.',error)
  else {
    if (cRec<>0)
      if (getfirst Statements where((cRec==Statements.NRec))=tsok) {};
  }
  ReScanPanel(tnStatements);
  ReReadRecord(#GP_KPI_StatementSpec);
  StopVisual;
}
/*
procedure DropFilter;
{
  if (IsFilterSet) {
    IsFilterSet:=false;

    FillListKPI;
    ReReadRecord(tnListKPI);
  }
}

procedure SetFilter;
{
  IsFilterSet:=true;

  FillListKPI;

  if (RecordsInTable(tnListKPI)>0)
    ReReadRecord(tnListKPI);
  else {
    message('Не найдены записи удовлетворяющие фильтру.',Warning);
    DropFilter;
  }
} */


TableEvent table Statements;
cmPositionChanged:{
  SetDocFieldsState;
}
cmDeleteRecord:{
  if message('Удалить ведомость?',YesNo)=cmYes
  { if (KPI_Statements.DeleteStatement(Statements.NRec))
      delete current Statements
    else
      abort;
  }
}
end;

TableEvent table GP_KPI_StatementSpec;
cmCheckField:{


  if (not UserAccessService.CanEdit(Statements.cStatus))
    ReReadRecord
  else
  { set GP_KPI_StatementSpec.Fact:=Round(GP_KPI_StatementSpec.Fact,3);
    BitOnW(GP_KPI_StatementSpec.wOption,1);
    set GP_KPI_StatementSpec.ImplProc:=KPI_Alg.Calc(GP_KPI_StatementSpec.buffer);
  }
}
cmUpdateRecord:{
  GP_KPI_StatementSpec.DocDate:=Statements.DocDate;
  update current GP_KPI_StatementSpec;
}
end;


HandleEvent
cmInit:{
  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup('Мотивация персонала'));
  if (UserAccessService=NullRef) {
    abort;
    exit;
  }
  Timelog_Init;

  if (GetMarkerCount(UserAccessService.PermittedStatusMarker)=0) {
    message('Вам запрещен доступ к ведомостям оценки выполнения показателей премирования.');
    abort;
    exit;
  }
  //--- Настройки
   NPOEM_OWN_Raise_ST_EV_ITKOEF :=lGetTune('NPOEM_OWN.Raise.ST_EV_ITKOEF');//Ведомость оценки, округлять итоговый коэффициент до
  //--- Настройки
  ReadParam;
  SetFilterNm(0);
  StatusChange:=New(GP_StatusChange,InitForRoleGroup(UserAccessService.RoleGroup));

  if (UserAccessService.CanIns)
    SetHelpAndStatusContext(brStatements, -1, sci147EscI, hcKeepCurrent);

/*  FilterStore:=GP_IUserFilterStore(new(GP_UserFilterStoreDSK,InitDSK('GP_ListKPI_')));
  UserFilterList:=GP_ObjUserFilterList(new(GP_UserFilterList,UserFilterList(FilterStore)));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterYesNo,UserFilter(fnFilterArc,'FilterArc'))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterYesNo,UserFilter(fnFilterKor,'FilterKor'))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterCatalogs,UserFilterCatalogs(fnFilterDep,'mFilterDep',-11))));*/

  FillStatements;
}
cmDone:
{ SaveParam;

}

cmInsert:{
  RunWindowModal(WinCreateStatement);
  stop;
}
cmPick:{
  var cRec:comp;

  case CurField of
  #GP_Status.Name:
  { var isAllOk:boolean=true;
    var _pStatus_From:comp=Statements.cStatus;
    if Statements.cStatus=KPI_Statements.GetDefaultStatus()
    {

      UpdateTable;
      PushPos(#GP_KPI_StatementSpec);
      _Loop GP_KPI_StatementSpec
      { if not IsBitCtW(GP_KPI_StatementSpec.wOption,1)
        { isAllOk:=false; break;
        }
      }
      PopPos(#GP_KPI_StatementSpec);
      ReScanPanel(#GP_KPI_StatementSpec);
    }
    if not isAllOk
    { message('В спецификации есть не заполненный факт!'
        +chr(13)+' изменение статуса запрещено!');
        exit;
    }
    else
    if (StatusChange.PickStatus(Statements.cStatus)) {
      if (KPI_Statements.ChangeStatus(Statements.NRec,StatusChange.StatusChangeLog))
      {
        set Statements.cStatus:=StatusChange.StatusChangeLog.cStatusTo;
        update current Statements;

        var _pStatus_to:comp=Statements.cStatus;
        if  pMarker.Count>0
        { if message('Помечено '+string(pMarker.Count)+' ведомостей'
           +chr(13)+'Изменить статус в них?',YesNo)=cmYes
          { PushPos(#Statements);
            oGP_Log.Init('KPI_Statements.log', true, true, true);
            StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak, 'Изменение статуса...', string(pMarker.Count));
            SubBounds(tbRmStatements1);
            AddBounds(tbRmStatements2);
            _Loop pMarker
            { if not NextVisual then break;
              if getfirst Statements<>tsok continue;
              ChangeStatus(_pStatus_From,_pStatus_to);
            }
            SubBounds(tbRmStatements2);
            AddBounds(tbRmStatements1);
            PopPos(#Statements);
            ReScanPanel(#Statements);
            StopVisual('',0);
            oGP_Log.Done(true);
          } //if message('Помечено '+string(pMarker.Count)+' ведомостей'

        } //if  pMarker.Count>0
        SetDocFieldsState;

      } //if (KPI_Statements.ChangeStatus(Statements.NRec,StatusChange.StatusChangeLog))
    } //if (StatusChange.PickStatus(Statements.cStatus)) {

   } //#GP_Status.Name:
    fnNewExecutor:{
      var wK:word;
      var DummyMarker1, DummyMarker2: TPtr;

      DummyMarker1 := InitMarker('', 8, 10, 10);
      DummyMarker2 := InitMarker('', 8, 1, 1);
      wK:=0;
      cRec:=BufNewStatement.cExecutor;

      if (viCYPersons.Choice(DummyMarker1, 3, vfCanSelect, wK, cRec, DummyMarker2)) {
        BufNewStatement.cExecutor:=viCYPersons.GetPsnByKindChoice(wK, cRec);
        set NewExecutor:=GetPersonsFIO(BufNewStatement.cExecutor);
        if iGP_PickChiefPost.Fill_Post(BufNewStatement.cExecutor,BufNewStatement.DocDate)
        { BufNewStatement.cChiefStaffStr:=iGP_PickChiefPost.FindFirstPost(NewChiefPost);
          set NewChiefPost:=NewChiefPost;
        }
      }
      DoneMarker(DummyMarker1, '');
      DoneMarker(DummyMarker2, '');
    }
    fnNewChiefPost:{
      var sTmp:string='';
      cRec:=BufNewStatement.cChiefStaffStr;
      if (RunInterface(GP_PickChiefPost, BufNewStatement.cExecutor, cRec, sTmp,BufNewStatement.DocDate) = cmDefault) {
        BufNewStatement.cChiefStaffStr:=cRec;
        set NewChiefPost:=sTmp;
      }
    }
  //------------------------------
  #Filtr_CatPodr:
  { KauMarkerName:='CatalogsMarker';
    StoreMarker(Marker_CatPodr,KauMarkerName);
    wc_nrec:=0;
    if ( RunInterface('PickCatalog2', integer(-11), wc_nrec, 100) <> cmCancel )
    { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
      CopyMarker(Marker_CatPodr,Marker_Tmp);
      DoneMarker(Marker_Tmp,'');
      SetFilterNm(#Filtr_CatPodr);
      BitOnW(wFilter,2);
    }
  }
  //------------------------------
  #Filtr_CatPodrOtv:
  { KauMarkerName:='CatalogsMarker';
    StoreMarker(Marker_CatPodrOtv,KauMarkerName);
    wc_nrec:=0;
    if ( RunInterface('PickCatalog2', integer(-11), wc_nrec, 100) <> cmCancel )
    { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
      CopyMarker(Marker_CatPodrOtv,Marker_Tmp);
      DoneMarker(Marker_Tmp,'');
      SetFilterNm(#Filtr_CatPodrOtv);
      BitOnW(wFilter,3);
    }
  }
  end;
}
cmDelOnProtect:{
  case CurField of
    fnNewExecutor:{
      BufNewStatement.cExecutor:=0;
      set NewExecutor:='';
    }
    fnNewChiefPost:{
      BufNewStatement.cChiefStaffStr:=0;
      set NewChiefPost:='';
    }
    #Filtr_CatPodr:
    { ClearMarker(Marker_CatPodr);
      SetFilterNm(#Filtr_CatPodr);
    }
    #Filtr_CatPodrOtv:
    { ClearMarker(Marker_CatPodrOtv);
      SetFilterNm(#Filtr_CatPodrOtv);
    }
  end;
}
cmDefault:{
  PutCommand(cmEdit);
}
cmEdit:{
  if (IsValidAll(tnStatements))
    RunWindow(WinEdit);
}
cmHotKeys:{
  PutContextMenuCommand('GP_StatementOfEvaluationKPI_HotKeys');
}
cmValue1:{//История изменения статусов
  StatusChange.ShowStatusChangeLog(coGP_KPI_Statements,Statements.NRec);
}
cmPrintDoc:{
  PrintDoc;
}
cmFilterSave:{//Установка фильтра
  UpdateTable;
  if RunWindowModal(wnFilter)=cmDefault
  { FillStatements;
  }
}
cmRefresh:
{ UpdateTable;
  FillStatements;
}

/*cmPick:{
  if (UserFilterList.Pick(CurField))
    RedrawPanel(CurTable);
}
cmDelOnProtect:{
  if (UserFilterList.Del(CurField))
    RedrawPanel(CurTable);
}
cmHotKeys:{
  if (IsFilterSet)
    EnableCommand(cmIEHist)
  else
    DisableCommand(cmIEHist);

  PutContextMenuCommand('GP_StatementOfEvaluationKPI_HotKeys');
}
cmFilterSave:{//Установка фильтра
  if (RunWindowModal(WinFilter)=cmDefault) {
    if (FilterSwitch=0)
      DropFilter
    else
      SetFilter;
  }
}
cmIEHist:{//Снятие фильтра
  DropFilter;
}*/
end;
end.

GP_StatementOfEvaluationKPI_HotKeys menu
{
 - '~И~стория изменения статусов...', cmValue1, 'История изменения статусов', hcNoContext, , , sci1Esc;
 - '~У~становка фильтра ...', cmFilterSave, 'Установить фильтр на данные', hcNoContext, 'Alt+B', kbAltB, sci1Esc;
! - '~С~нятие фильтра',cmIEHist,'Снять фильтр на данные',hcNoContext,'Alt+H',kbAltH,sci1Esc;
 -------;
 - '~О~бновить ...', cmRefresh, 'обновить данные', hcNoContext, 'Ctrl+R', kbCtrlR, sci1Esc;
 -------;
 - '~П~ечать',cmPrintDoc,'Печать ведомости',hcNoContext,'Ctrl+P',kbCtrlP,sci1Esc,,,, bmpPrint;
}
