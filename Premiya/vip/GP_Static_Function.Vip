/*************************************************************************************************\
* Наименование:  Установка битовых масок                                                          *
* Контур/Модуль: Утилиты                                                                          *
* Примечание:    например в GP_ZP_RaspZakazPers.Vip, GP_ZP_RaspZakazVO.Vip                        *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#795          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#773          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#195          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#175          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#1310         |24/11/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#2242         |11/04/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include GP_KatPodr_Func.Vih
#include GP_ODecl.Vih
#include GP_WorkTable.Vih



//------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Установка битовых масок
//------------------------------------------------------------------------------
#component "GP_Common"
InterFace GP_Static_Function;
var iGP_KatPodr_Func:GP_KatPodr_Func;
var iGP_ODecl:GP_ODecl;
var iGP_WorkTable  : GP_WorkTable;

//------------------------------------------------------------------------------
Function IsBit(_wVar : word; _Bit_ : word) : boolean;
{ IsBit := ((_wVar and _Bit_) = _Bit_);
}

//------------------------------------------------------------------------------
Function IsBitL(_lVar : longint; _Bit_ : longint) : boolean;
{ IsBitL := ((_lVar and _Bit_) = _Bit_);
}

//------------------------------------------------------------------------------
// проверяет, установлен ли бит
function IsBitCTW (field: word; n: word): boolean;
{  IsBitCTW := (((field shr (n-1)) and word(1)) = 1);
}
function IsBitCTL (field: longint; n: word): boolean;
{  IsBitCTL := (((field shr (n-1)) and word(1)) = 1);
}

//------------------------------------------------------------------------------
Function SetBit(_wVar : word; _Bit_ : word; _Value : boolean) : word;
{ SetBit := _wVar;
  if (_Value) and (not IsBit(_wVar, _Bit_))
    SetBit := _wVar xor _Bit_;
  else if (not _Value) and (IsBit(_wVar, _Bit_))
    SetBit := _wVar xor _Bit_;
}

//------------------------------------------------------------------------------
Function SetBitL(_lVar : longint; _Bit_ : longint; _Value : boolean) : longint;
{ SetBitL := _lVar;
  if (_Value) and (not IsBitL(_lVar, _Bit_))
    SetBitL := _lVar xor _Bit_;
  else if (not _Value) and (IsBitL(_lVar, _Bit_))
    SetBitL := _lVar xor _Bit_;
}

// сбрасывает бит
procedure BitOffW (var field: word; n: word);
{
  set field := field and (not (word(1) shl (n-1)));
}
//------------------------------------------------------------------------------
// устанавливает бит
procedure BitOnW (var field: word; n: word);
{
  set field := field or (word(1) shl (n-1));
}

// сбрасывает бит
procedure BitOffL (var field: longint; n: word);
{
  set field := field and (not (word(1) shl (n-1)));
}
//------------------------------------------------------------------------------
// устанавливает бит
procedure BitOnL (var field: longint; n: word);
{
  set field := field or (word(1) shl (n-1));
}
// сбрасывает бит
procedure BitOffC (var field: comp; n: word);
{
  set field := field and (not (word(1) shl (n-1)));
}
//------------------------------------------------------------------------------
// устанавливает бит
procedure BitOnC (var field: comp; n: word);
{
  set field := field or (word(1) shl (n-1));
}

//------------------------------------------------------------------------------
// Получить план счетов для зарплаты например
function GetPlansSchNrec (var _myPlansNo  : comp): boolean;    // текущий план счетов
var _cPLANSRab : comp; //рабочее поле
{
  Result := false;
  //_cPLANSRab := 0;
  _myPlansNo :=coGetTune('KONSOLID.CPLANSSCH'); // План счетов из Консолидации
  if (_myPlansNo = 0)
    { //message(''#3'Установите текущий план счетов!',okButton);
      Exit;
    }
  _cPLANSRab := coGetTune('FIN.USER.CPLANSSCH');
  if _cPLANSRab <> 0
     _myPlansNo  := _cPLANSRab;
  /*
  if (GetFirst PlansSch
       where (( _myPlansNo == PlansSch.NRec )) <> tsOk)
    { message(''#3'Утеряна настройка планов счетов!' +
           ''#13#3'Проведите настройку!' +
           ''#13#3'Установите текущий план счетов.',okButton);
      Exit;
    }
  */
  Result := true;
}

//-------------------------------
// Заполнить наименование поля
//-------------------------------
Function GroupWrapStrWithNewRow(
             Sentence  : string //выражение шапки
           ; FirstGroup: Byte   //начинать со строки
           ; GroupLen  : Byte   //длина строки шапки
           ; NumRow    : Byte   //кол-во строк
           ; boCenter  : boolean=false // центировать
           ) : string;
var
  Group_num: Byte;
  WrapResult: string;
  sResult : string;
{
   Group_num := 0; sResult := '';
   WrapResult:='';
   do
   {
     Inc(Group_num);
     WrapResult := GroupWrap(Sentence, Group_num, GroupLen);
     if (Group_num >= FirstGroup) and (Length(WrapResult) > 0) then
       sResult := sResult +if(Group_num>1 and Group_num<=NumRow,chr(13) ,' ')+if(boCenter,chr(3),'')+WrapResult;
   }
   while (Length(WrapResult) <> 0);// and Group_num <=NumRow);
   if Group_num<NumRow
   while Group_num<NumRow
   { Group_num++;
     sResult:=sResult+chr(13)+' ';
   }
   Result := sResult;
} //Function GroupWrapStrWithNewRow(Sentence: string; FirstGroup, GroupLen, NumRow: Byte) : string;


//--------------------------------------------------
#Doc
 Добавить колонку
 Add_Column (cfsGetCurrentContainerSelf,'BRWPERSONS','KARTANM'  ,10,'Карта'       ,12)
#end
Procedure Add_Column(Container:Longint
       ; ww_browse :string
       ; ww_fieldname : string
       ; ww_width: integer
       ; ww_title:string
       ; ww_index:integer=30
       ; isTree :boolean=false
       );
{   var ww_int:integer;
    var ww_field:longint;
    var i     :integer;
    //----------------- сначала нужно все сдвинуть
    /*
    iVisHidd.SetVisibleForField( cfsGetCurrentContainerSelf
                               , GetInterfaceComponentName
                               , #(__InterfaceName__)
                               , 'brwPersons');
    */
    var Res              : integer;
    var ObjList : array [1] of string;
    var _sSubContName :string;
    var sFieldName    : string;

    _sSubContName := Upcase(Trim(ww_browse));

    //Res := cfsSetCurrentContainer(cfsGetCurrentContainerSelf);
    Res := cfsSetCurrentContainer(Container);
    SetLimit(ObjList, 0);
    // загрузить список объектов, вставленных в данный контейнер
    if cfsEnumObjects(_sSubContName, ObjList, false) = cfOk
    { //for(i := 1; i <= Count(ObjList); Inc(i))
      for(i :=  Count(ObjList);i>=1; i--)
      {  ww_int:=0;
         cfsGetProp(ObjList[i], cfpIndex, ww_int);
         cfsGetProp(ObjList[i], cfpName    , sFieldName);

         if ww_int>=ww_index
         { ww_int++;
           cfsSetProp(ObjList[i], cfpIndex, ww_int);
         }
      } //for(i := 1; i <= Count(ObjList); Inc(i))
    }
    else
    {
    }
    //------------- добавляем колонку
//message('1')
    ww_field:=0;
    var _sTypeFld:string= if(isTree ,'Tree','' )+'Column';
    cfsCreateObject ( _sTypeFld,    ww_browse ,ww_fieldname,FALSE,ww_field);
    //ww_int:=15;

    cfsSetProp(ww_field,'Visible',False);//ww_fieldname
    ww_int:=ww_index;
    cfsSetProp(ww_field,'Index',ww_int);
    cfsSetProp(ww_field,'Protect',True);
    //cfsSetProp(ww_fieldname,'Title',    ww_title);
//message('2')

    //cfsSetProp(ww_fieldname,'SKIP',False);
    ww_int:=10;
    ww_int:=ww_width;
    cfsSetProp(ww_field,'DefaultWidth',ww_int);
    cfsSetProp(ww_field,'StatusCtx',    'sci1Esc');
    cfsSetProp(ww_field,'Visible',True);
    cfsSetProp(ww_field,cfcQuickChoice,True);
    cfsSetProp(ww_field,cfpTitle,    ww_title);
} //Procedure Add_Column(Container:Longint



#Doc
 Добавить колонки
 Add_Column_A (cfsGetCurrentContainerSelf,'BRWPERSONS',pAdd_FLD)
#end
Procedure Add_Column_A(Container:Longint
       ; ww_browse :string
       ; pAdd_FLD :TAdd_FLD
       );
{   var ww_int:integer;
    var ww_field:longint;
    var i,j     :integer;
    //----------------- сначала нужно все сдвинуть
    /*
    iVisHidd.SetVisibleForField( cfsGetCurrentContainerSelf
                               , GetInterfaceComponentName
                               , #(__InterfaceName__)
                               , 'brwPersons');
    */
    var Res              : integer;
    var ObjList : array [1] of string;
    var _sSubContName :string;
    var sFieldName    : string;

    _sSubContName := Upcase(Trim(ww_browse));

    //Res := cfsSetCurrentContainer(cfsGetCurrentContainerSelf);
    Res := cfsSetCurrentContainer(Container);
    SetLimit(ObjList, 0);
    // загрузить список объектов, вставленных в данный контейнер
    var _boObjLoad:boolean=cfsEnumObjects(_sSubContName, ObjList, false) = cfOk;
    //------------- добавляем колонку
//message('1')
    ww_field:=0;
    var _sTypeFld:string= if(pAdd_FLD.Fld_Type=1 ,'Tree','' )+'Column';
    var _ObjCount:longint=Count(ObjList);
    var _Delta   :integer;
    For(j:=pAdd_FLD.Fld_Count;j>0;j--)
    { _Delta:=pAdd_FLD.Fld_Count+1-j;
      if _boObjLoad
      { for(i := _ObjCount;i>=1; i--)
        { ww_int:=0;
          cfsGetProp(ObjList[i], cfpIndex, ww_int);
          cfsGetProp(ObjList[i], cfpName    , sFieldName);

          if ww_int>=pAdd_FLD.Fld_Index[j]
          { ww_int:=ww_int+_Delta;
            cfsSetProp(ObjList[i], cfpIndex, ww_int);
          }
          if ww_int>0
           if ww_int<=pAdd_FLD.Fld_Index[j]
           { _ObjCount:=i; break;// По идее дальше сдвигать не нужно
           }
        }
      } //if _boObjLoad
      cfsCreateObject ( _sTypeFld,    ww_browse ,pAdd_FLD.Fld_name[j],FALSE,ww_field);
      //ww_int:=15;

      cfsSetProp(ww_field,'Visible',False);//ww_fieldname
      ww_int:=pAdd_FLD.Fld_Index[j]+(_Delta-1);// сложный вопрос
      cfsSetProp(ww_field,'Index',ww_int);
      cfsSetProp(ww_field,'Protect', pAdd_FLD.Fld_Protect[j]);
      //cfsSetProp(ww_fieldname,'Title',    ww_title);
      //message('2')

      cfsSetProp(ww_field,'SKIP',False);
      ww_int:=10;
      if pAdd_FLD.Fld_DefaultWidth[j]>0
         ww_int:=pAdd_FLD.Fld_DefaultWidth[j];
      cfsSetProp(ww_field,'DefaultWidth',ww_int);
      cfsSetProp(ww_field,'StatusCtx',    'sci1Esc');
      if pAdd_FLD.Fld_StatusCtx[j]<>0
        cfsSetProp(ww_field,'StatusCtx', pAdd_FLD.Fld_StatusCtx[j]);

      cfsSetProp(ww_field,'Visible',pAdd_FLD.Fld_Visible[j]);
      cfsSetProp(ww_field,'Hidden' ,pAdd_FLD.Fld_Visible[j]);
      cfsSetProp(ww_field,cfcQuickChoice,True);
      cfsSetProp(ww_field,cfpTitle,   pAdd_FLD.Fld_title[j]);
      cfsSetProp(ww_field,cfpSKip,     pAdd_FLD.Fld_SKip[j]);
      cfsSetProp(ww_field,cfpPassiveFormat    ,pAdd_FLD.Fld_PassiveFormat    ); //'\2p[|-]36`666`666`666`666.88'
      cfsSetProp(ww_field,cfpDefWidth         ,pAdd_FLD.Fld_DefaultWidth     ); //Ширина колонки по умолчанию (текстовые координаты)
      cfsSetProp(ww_field,cfpButtonType       ,pAdd_FLD.Fld_ButtonType       ); //16 для ...  inPickButton + DefaultPickButton=True
      cfsSetProp(ww_field,cfpDefaultPickButton,pAdd_FLD.Fld_DefaultPickButton); //
      cfsSetProp(ww_field,cfpFontColor        ,pAdd_FLD.Fld_FontColor        ); // функция
      cfsSetProp(ww_field,cfpFontBold         ,pAdd_FLD.Fld_FontBold         ); // функция

    }//For(j:=pAdd_FLD.Fld_Count;j>0;j--)
} //Procedure Add_Column(Container:Longint


#doc
склонение
#end
Function My_Sclonenie(odecl_w :string ;odecl_NCase: word; cRec : comp=0 ): string ;
{ Result:=iGP_Odecl.My_Sclonenie(odecl_w,odecl_NCase,cRec )
}

//-------------------------------
#doc
 Привести к виду Хyyyyyyyyyy Xyyyyyyy Xyyyyyyyyy
#end
Function FIOFirstChairUp(ww_St : string):string;
{ Result:=iGP_Odecl.FIOFirstChairUp(ww_St);
}

#doc
Печать ФИО с Инициалами. Fpoz=true - в конце
#end
Function MyGetInitial(ww :string; fpoz:boolean):string; //Первые фамилия и инициалы
var
 ww_str,ww_str1,ww_str2:string;
 ii:word;
{
 ww:=trim(ww) ;
 MyGetInitial := ww ;
 if pos('.',ww)>0 then exit ; // возмоэно уже с инициалами
 if pos('(',ww)>0
 { ww:=SubStr(ww,1,pos('(',ww)-1);
 }
 ii:=Pos(' ',ww) ;
 if (ii=0) then exit ;
 ww:=replace(ww,'  ',' ');
 ww_str1 := substr(ww,1,ii-1) ;
 MyGetInitial := ww_str1 ;
 if(fpoz){ //Инициалы в конце
     ww_str:=trim(substr(ww,ii+1,200)) ;
     ww_str1 := ww_str1+' '+substr(ww_str,1,1)+'.';
     MyGetInitial := ww_str1 ;
     ww_str:=trim(substr(ww,ii+1,200)) ;
     ii:=pos(' ',ww_str) ;
     if (ii=0) then exit ;
     // Иначе с КИС не стыкуется
     ww_str1 := ww_str1+' '+substr(ww_str,ii+1,1)+'.' ;
    MyGetInitial := ww_str1 ;
  }
  else{ //Инициалы в начале
     ww_str:=trim(substr(ww,ii+1,200)) ;
     ww_str2:=ww_str1;
//     ww_str1 := ww_str1+' '+substr(ww_str,1,1)+'.';
     ww_str1 := substr(ww_str,1,1)+'.';
     MyGetInitial := ww_str1 ;
     ww_str:=trim(substr(ww,ii+1,200)) ;
     ii:=pos(' ',ww_str) ;
     if (ii<>0)
     { ww_str1 := ww_str1+substr(ww_str,ii+1,1)+'.' ;
     }
    MyGetInitial :=ww_str1+' '+ ww_str2;
   }
} //Function MyGetInitial(ww :string; fpoz:boolean):string; //Первые фамилия и инициалы

//=================================
// Дополнить значение до заданной длины
//=================================
Function Norm_Fld(const ww_str:string;ww_len:word):string;
{
 Result:=pad(substr(ww_str,1,ww_len),ww_len);
}

//------------------------------------------------------------------------------
//  Получить позицию справа
//------------------------------------------------------------------------------
function PosR(_substr: string; _s: string): byte;
var ww_str:string;
    ii :word;
    len_sub:word;
{ ww_str:='';
  Result:=0;
  len_sub:=length(_substr);
  for(ii:=length(_s);ii>0;ii--)
  { ww_str:=substr(_s,ii,1)+ww_str;
    if substr(ww_str,1,len_sub)=_substr
    { Result:=ii;
      break
    }
  }
} //function PosR(substr: string; s: string): byte;

//------------------------------------------------------------------------------
//  Получить подстроку справа
//------------------------------------------------------------------------------
function SubStrPosR(_substr: string;_s:string) : string;
var ii :word;
{ Result:=_s;
  ii:=PosR(_substr,_s);
  if ii>0
  { Result:=SubStr(_s,1,ii-1);
  } //if ii>0
  fplog('SubStrPosR _substr='+_substr+',ii='+string(ii)+',Result='+Result+',s='+_s);

} //function SubStrPosR(substr: string;s:string) : string;


//------------------------------------
// Функции по работе с почтой
//------------------------------------
//*************************************
#doc
Инициализировать временной лог
#end
var TimeLog_TP :longint=-1;
    TimeLog_File:string;
    TimeLog_Time:time;

Procedure TimeLog_Init;
{ if TimeLog_TP>=0 exit;
  TimeLog_TP:=wGetTune('NPOEM_OWN.TIMELOG');
  if TimeLog_TP=0 then exit;
  TimeLog_File:=GetStringParameter('Files','OutputFilesDirectory',0)
                               +'!TimeLog.log';

  if FileExist(TimeLog_File)
       DeleteFile(TimeLog_File);
  TimeLog_Time:=Cur_Time ;
}//Procedure TimeLog_Init;

#doc
Вернуть статус - рекомендуется использовать при передачи больших вычислений в лог.
#end
Function TimeLog_Status:integer;
{ Result:=TimeLog_TP;

}


#doc
 Вывод временного лога
#end
Procedure TimeLog( const wStr :string ) ;
{ if TimeLog_TP<1 exit;
  LogStrTofile(TimeLog_File,DateToStr(Cur_Date,'дата DD/MM/YYYY')+
                                   TimeToStr(Cur_Time,' тек.вр HH:MM:SS:SSS')+
                                   TimeToStr(sub_time(Cur_Time,TimeLog_Time),' - пред.этап =  HH:MM:SS:SSS')+
                                   ' '+wStr) ;

  TimeLog_Time:=Cur_Time ;
}

//***********************************************************
// GP_KatPodr_Func.Vih
//***********************************************************
//--------------------------------
#doc
 получить KatPodr.Nrec по  Catalogs.Nrec
#end
Function GetKatPodrByCatalogs(_pCatalogs:comp):comp;
{ Result:=iGP_KatPodr_Func.MyGetKatPodrNrec(_pCatalogs);
}

//---------------------------------------------
#doc
 получить Catalogs.Nrec по KatPodr.Nrec
#end
Function GetCatalogsByKatPodr(_pPodr:comp):comp;
{ Result:=iGP_KatPodr_Func.MyGetCatalogsNrec(_pPodr);
}

//---------------------------------------------
#doc
Получить дату закрытия подразделения
#end
Function GetKatPodrDClose(_pPodr:comp):date;
{ Result:=iGP_KatPodr_Func.MyGetKatPodrDClose(_pPodr);
}

//---------------------------------------------
#doc
Проверить подразделение на архивность
#end
Function GetKatPodr_isArh_On_Date(_pPodr:comp;_Date:date):boolean;
{ Result:=iGP_KatPodr_Func.MyGetKatPodr_isArh_On_Date(_pPodr,_Date);
}

//---------------------------------------------
#doc
Проверить подразделение на видимость для пользователя в интерфейсе выбора
#end
Function GetKatPodr_isVisible_InPickInterface(_pPodr:comp):boolean;
{ Result:=iGP_KatPodr_Func.MyGetKatPodr_isVisible_InPickInterface(_pPodr);
}

//---------------------------------------------
#doc
Получить руководителя подразделения
#end
Function GetKatPodr_Boss(_pPodr:comp;var _pPost:comp;var _pPersons:comp;_DDate:date=ZeroDate):string;
{ Result:=iGP_KatPodr_Func.MyGetKatPodr_Boss(_pPodr,_pPost,_pPersons,_DDate);

}

//---------------------------------------------
#doc
Получить фио руководителя подразделения
#end
Function GetKatPodr_Boss_Fio(_pPodr:comp;_DDate:date=ZeroDate):string;Cacheable;
{ Result:=iGP_KatPodr_Func.MyGetKatPodr_Boss_Fio(_pPodr,_DDate);
}

//---------------------------------------------
#doc
Получить фио руководителя СЕШР
#end
Function GetCatalogs_Boss_Fio(_pDepartment:comp;_DDate:date=ZeroDate):string;Cacheable;
{ Result:=iGP_KatPodr_Func.MyGetCatalogs_Boss_Fio(_pDepartment,_DDate);
}

//---------------------------------------------
#doc
Получить руководителя СЕШР
#end
Function GetCatalogs_Boss(_pDepartment:comp;var _pPost:comp;var _pPersons:comp;_DDate:date=ZeroDate):string;
{ Result:=iGP_KatPodr_Func.MyGetCatalogs_Boss(_pDepartment,_pPost,_pPersons,_DDate);
}

//--------------------------------
#doc
Получить функционального руководителя по штатному расписанию  СЕШР
#end
Function Get_Func_Boss(_pStaffStruct:comp;var _pPost:comp;var _pPersons:comp;_DDate:date=ZeroDate):string;
{ Result:=iGP_KatPodr_Func.MyGet_Func_Boss(_pStaffStruct,_pPost,_pPersons,_DDate);
}


//--------------------------------
#doc
Получить функционального руководителя сотрудника по текущему назначению на дату
#end
Function Get_Func_Boss_By_Pers(_pPersFrom:comp;var _pPost:comp;var _pPersons:comp;_DDate:date=ZeroDate):string;
{ Result:=iGP_KatPodr_Func.MyGet_Func_Boss_By_Pers(_pPersFrom,_pPost,_pPersons,_DDate);
}

//--------------------------------
#doc
Заполнить маркер по подразделениям по иерархии
#end
Procedure FillMarker_PodrByIE(_Marker:longint;_pKatPodr:comp );
{ iGP_KatPodr_Func.MyFillMarker_PodrByIE(_Marker,_pKatPodr);
}
//--------------------------------
#doc
Получить Nrec пользователя по Persons.Nrec
#end
Function GetUserByPersons(_pPersons:comp):comp;
{ Result:=iGP_KatPodr_Func.MyGet_User_By_Persons(_pPersons)
} //Function GetUserByPersons(_pPersons:comp):comp;

//--------------------------------
#doc
Получить  Persons.Nrec по Nrec пользователя
#end
Function GetPersonsByUser(_pUser:comp):comp;
{ Result:=iGP_KatPodr_Func.MyGet_Persons_By_User(_pUser);
} //Function GetUserByPersons(_pPersons:comp):comp;

#doc
#3533  Получить ФИО по дескриптору
#end
Function GetFioByDescr(_Descr:string;_boInitial:boolean):string;
{ Result:=iGP_KatPodr_Func.MyGetFioByDescr(_Descr,_boInitial);
}//Function GetFioByDescr(_Descr:string;_boInitial:boolean):string; cacheable;

//--------------------------------
#doc
Получить Persons.Nrec по дескриптору
#end
Function GetPersonsByDescr(_Descr:string):comp;
{ Result:=iGP_KatPodr_Func.MyGetPersonsByDescr(_Descr);
} //Function GetPersonsByDescr(_Descr:string):comp;

//**********************************************
// iGP_WorkTable
//**********************************************
Function LoadTable(_pLschet:comp; _Month:word; _Year:word):boolean;
{ Result:=iGP_WorkTable.LoadTable(_pLschet,_Month, _Year);

}
Function LoadTableByNrec(_cLsTab:comp):boolean;
{ Result:=iGP_WorkTable.LoadTableByNrec(_cLsTab);

}

Function EM_GHBDEX(
           _pLschet:comp;
           HourKind: word;
           BeginningHour,
           MaxDailyHoursAmount: double;
           ScheduleType: integer;
           DateRangeStart, DateRangeEnd: Date;
           Flags: longint;
           _pPodr:comp=0 ;
           _pPost:comp=0
           ): double;
{ Result:=iGP_WorkTable.GetHoursBwDatesEx(
           _pLschet
           ,HourKind
           ,BeginningHour
           ,MaxDailyHoursAmount
           ,ScheduleType
           ,DateRangeStart, DateRangeEnd
           ,Flags
           ,_pPodr
           ,_pPost
           );
}
//------------------------------------------------------------------------------
function GetHoursBwDatesEx(
           _pLschet:comp;
           HourKind: word;
           BeginningHour,
           MaxDailyHoursAmount: double;
           ScheduleType: integer;
           DateRangeStart, DateRangeEnd: Date;
           Flags: longint;
           _pPodr:comp=0 ;
           _pPost:comp=0
           ): double;
{ Result:=iGP_WorkTable.GetHoursBwDatesEx(
           _pLschet
           ,HourKind
           ,BeginningHour
           ,MaxDailyHoursAmount
           ,ScheduleType
           ,DateRangeStart, DateRangeEnd
           ,Flags
           ,_pPodr
           ,_pPost
           );

}

end.
