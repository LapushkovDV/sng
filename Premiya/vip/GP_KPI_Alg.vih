/*************************************************************************************************\
* Наименование: Объявление класса GP_KPI_Alg "Алгоритмы KPI"                                      *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |06/09/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#ifndef __GP_KPI_Alg_VIH__
#define __GP_KPI_Alg_VIH__

#component "GP_Staff"
//-----------------------
// Для выбора алгоритмов
Table Struct Tmp_Kpi_Alg
( wType:word
 ,Npp :word  "Порядковый номер"
 ,Key :string[100] "Ключ"
 ,KeyR:string[100] "Заменить на"
 ,Prim:String "Использование"
)
With Index
( Tmp_Kpi_Alg01 = Key
 ,Tmp_Kpi_Alg02 = Npp
 ,Tmp_Kpi_Alg03 = wType +NPP
);
#doc
 объект для расчета алгоритмов КПИ
#end
ObjInterface GP_ObjKPI_Alg;

//---------------------------------------------
//02, '%EM_TotalWeightKoef(wType, param)% wTtype= word. За месяц собираются все документы с типом wType по подразделению строки и по ним суммируются значения полей
//с типом <результат> = <+> (итоговое поле). Param - дополнительный параметр');
// Возможно нужно набить таблицу показателей сразу, но нужен массив данны
//---------------------------------------------
Function EM_TOTALWEIGHTKOEF_Koef(_cPodr:comp
  ;_cKateg:comp
  ;_cPost:comp
  ;_wYear:word
  ;_wMonth:word
  ;_Param:string
  ;_OnlyConfirm:boolean=true
  ):double;//cacheable;

//----------------------------------------
#doc
  Рассчитать ведомость оценки показателей
#end
  function Calc(buf:type$GP_KPI_StatementSpec; boMes:boolean=false):double;
//----------------------------------------
#doc
  Рассчитать остальные ведомости
#end
function CalcDoc(_wTypeDoc:word         //тип документа
                ; _cDoc   :comp         //ссылка на документ
                ; boRecalc:boolean=true //нужен пересчет
                ; boMes   :boolean=false//выводить сообщения
                ; boRezerv:boolean=false//пересчет резерва
                ):boolean;
//----------------------------------------
#doc
  Рассчитать алгоритм спецификации документа
#end
function CalcSpec(_wTypeDoc:word
                ; _cDoc:comp
                ; _cDocSp:comp
                ; _pAlg:comp
                ; boMes:boolean=false
                ; _ValuePrev:string='ZZZ'
                ; boRezerv:boolean=false
                ):string;

//-----------------------------------------------------------------------------
// Получить последнюю ошибку
//-----------------------------------------------------------------------------
Public Function GetLastError : string;

//-----------------------------------------------------------------------------
#doc
  Заполнить справочник алгоритмов
#end
  Function Fill_Tmp_alg(_wType_Alg:word):boolean;
//----------------------------------------
#doc
  Выбрать интерфейс
#end
  Function ChooseInterface(_wType_Alg:word):string;
//----------------------------------------
#doc
 освободить пользовательские алгоритмы
#end
Procedure Free_Dm_Alg;
//----------------------------------
#doc
 Установить период расчета для внешних вызовов
#end
Function SetPeriodByParam(_PeriodBegin,_PeriodEnd:date):boolean;

//-------------------------------------------------
#doc
 Рассчитать нормативный процент
 _cAppointments - ссылка на назначение
 _cDoplata - ссылка на справочник доплат - Catalogs.
 _Type -0 Факт, 1 Нормативный
 _Summa - возвращаемый сумма
 Возвращает процент премии
 Предварительно нужно вызвать SetPeriodByParam
#end
//-------------------------------------------------
Function CalcRaiseProcentClass(_cAppointments:comp;_cDoplata:comp;_Type:word;var _Summa:double):double;
Function CalcRaiseProcent(_cAppointments:comp;_cDoplata:comp;_Type:word;var _Summa:double):double;

//---------------------------------------------
#doc
подсчитать начисления за текущий месяц - только Nachsil
#end
Function EM_NACHO(_pLschet:comp;_wYear:word;_wMes:word; _pPodr :comp; _pPost:comp; _wVo:word ) :double;
//---------------------------------------------

Function EM_VIDNACH(_pLschet:comp;_wMes:word;_wNach:word;_wOsn:word;_dproc:double) :double;
Function EM_VIDNACHV(_pLschet:comp;_wMes:word;_wNach:word;_wOsn:word;_dproc:double) :double;
Function EM_VIDNACHS(_pLschet:comp;_wMes:word;_wNach:word;_wOsn:word;_dproc:double) :double;

#doc
подсчитать начисления за произвольный  месяц
#end
Function EM_NachByMF(_pLschet:comp; _pPodr :comp;_pPost :comp; _wVo:word
             ;_wMes:word
             ;_wYear:word
             ;_IE   :word // не учитываем
  ) :double;

#doc
getEM_KOEFF_IND_NZ(_cLschet : comp; _wMonth,_wYear : word): double;
получить Коэффициент индивидуально выработки = отношение нормо-часов по наряду к часам по табелю
#end
function getEM_KOEFF_IND_NZ( _pLschet : comp
                           ; _wMonth:word
                           ; _wYear : word
                           ; _maxKoeff : double = 1
                           ): double;

#doc
getEM_KOEFF_ERS(_cLschet : comp) : double;
получить Коэффициент за качество по листам оценки сотрудника
Получает коэффициент из последнего листа утвержденного по лицевому счету.
#end
function getEM_KOEFF_ERS(_pLschet : comp; _dateEnd: date) : double;

#doc
 GetEm_KoeffBTK(_cAppointments: comp;_month, _year: word) : double;
Оценка БТК. Получить коэффициент из листов оценки БТК
#end
Function GetEm_KoeffBTK(_cAppointments: comp;_month, _year: word) : double;

end;


VipInterface GP_KPI_Alg_Calc Implements GP_ObjKPI_Alg  Licensed(free);


#endif
