/* Наименование: Реализация класса GP_StatusChange "Переходы статусов"                             *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |06/09/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_StatusChange.vih
interface GP_StatusChange;

var cCurRoleGroup:comp;
    BufLog:type$GP_StatusChangeLog;

table struct StatusChange(cStatus:comp,Code:string[5],Name:string)
with index
( StatusChange01 =Code
 ,StatusChange02 =cStatus
);

create view ltStatusChange
var
 pUserId:comp;
as select GP_UserRoles.Nrec
from
  StatusChange(StatusChange01),
  GP_UserRoles,GP_StatusChangeRoles,
  GP_StatusChange,GP_Status
where ((
    cCurRoleGroup==GP_UserRoles.cRoleGroup
and pUserID==GP_UserRoles.cUser
and GP_UserRoles.cRole==GP_StatusChangeRoles.cRole
and GP_StatusChangeRoles.cStatusChange==GP_StatusChange.NRec
and GP_StatusChange.cStatusTo==GP_Status.NRec

))
  ;

window WinPickStatus 'Выберите статус' Gray, DoAccept, EscClose;
show(20,5,80,20);

browse brStatusChange (,,sci1Esc);
show(,,,11);
table StatusChange;
fields
  StatusChange.Code 'Код':[5], Protect, NoAutoSize;
  StatusChange.Name 'Наименование статуса':[40], Protect;
end;

screen scStatusChangeLog (,,sci1Esc);
show(,12,,) Fixed_Y;
fields
  BufLog.Notice :NoProtect;
<<

 `Примечание`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

end;//WinPickStatus

constructor Init;
{ pUserId:=UserId;
  result:=false;
}

constructor InitForRoleGroup(cRoleGroup:comp);
{
  result:=false;
  pUserId:=UserId;
  timelog_init;
  cCurRoleGroup:=cRoleGroup;
  result:=cCurRoleGroup<>0;
  Timelog('GP_StatusChange->InitForRoleGroup:cCurRoleGroup='+string(cCurRoleGroup,0,0));
  ClearFuncCache;
}

function CanChangeStatus(cFromStatus:comp):boolean; Cacheable;
{
  result:=false;

  _loop GP_UserRoles
  { /*if timelog_status>2
     Timelog('GP_StatusChange->CanChangeStatus:GP_UserRoles.cRole='+String(GP_UserRoles.cRole,0,0)
      +',cFromStatus='+String(cFromStatus,0,0)
      );
    */
    _loop GP_StatusChangeRoles
    { //if timelog_status>2      Timelog('GP_StatusChange->CanChangeStatus:GP_StatusChangeRoles.Nrec='+string(GP_StatusChangeRoles.Nrec,0,0));
      _Loop GP_StatusChange
      { /*
        if timelog_status>2
          Timelog('GP_StatusChange->CanChangeStatus:GP_StatusChange.Nrec='
             +string(GP_StatusChange.Nrec,0,0)
             +',GP_StatusChange.cStatusFrom='+string(GP_StatusChange.cStatusFrom,0,0)
             );
    */

        if (GP_StatusChange.cStatusFrom=cFromStatus)
        { result:=true;
          exit;
        }
      } //_Loop GP_StatusChange
    } //_loop GP_StatusChangeRoles
  } //_loop GP_UserRoles
} //function CanChangeStatus(cFromStatus:comp):boolean; Cacheable;

function PickStatus(cFromStatus:comp):boolean;
{
  result:=false;
  ClearAdvRecord(BufLog);

  if (not CanChangeStatus(cFromStatus)) exit;

  delete all StatusChange;
  _loop GP_UserRoles
  /*
  where((
    cCurRoleGroup==GP_UserRoles.cRoleGroup and UserID==GP_UserRoles.cUser
  ))
  */
    _loop GP_StatusChangeRoles
    /*
    where((
      GP_UserRoles.cRole==GP_StatusChangeRoles.cRole and
      GP_StatusChangeRoles.cStatusChange==GP_StatusChange.NRec and
      GP_StatusChange.cStatusTo==GP_Status.NRec
    ))
    */
     if isValidAll(#GP_StatusChange)
      if (GP_StatusChange.cStatusFrom=cFromStatus)
      //если пользователь вошел в две роли, то двоится
        if getfirst StatusChange where (( GP_StatusChange.cStatusTo == StatusChange.cStatus ))<>tsok
          if getfirst GP_Status=tsok
          { StatusChange.cStatus:=GP_StatusChange.cStatusTo;
            StatusChange.Code:=GP_Status.Code;
            StatusChange.Name:=GP_Status.Name;
            insert current StatusChange;
          }

  result:=RunWindowModal(WinPickStatus)=cmDefault;
  if (result) {
    BufLog.cStatusFrom:=cFromStatus;
    BufLog.cStatusTo:=StatusChange.cStatus;
  }
}

procedure ShowStatusChangeLog(wTbl:word;cDoc:comp);
{
  RunInterface(GP_StatusChangeLogView,wTbl,cDoc);
}

property StatusChangeLog:type$GP_StatusChangeLog absolute BufLog read write;

HandleEvent
cmInit:abort;
end;
end.
