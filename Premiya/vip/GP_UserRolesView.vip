/*************************************************************************************************\
* Наименование: Роли пользователя                                                                 *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |23/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_UserAccessService.vih

#include GP_UserRolesView.vih
interface GP_UserRolesView 'Роли пользователя', Cyan;
show(20,5,140,35);

var cCurRoleGroup:comp;
    UserAccessService:GP_UserAccessService NoAuto;

table struct MemUsers(cUser:comp,UserName:string,UserLogin:string)
with index (i=UserName,i2=cUser);

create view
from
  MemUsers,
  GP_Roles,GP_UserRoles,
  GP_Roles GP_Roles2,GP_UserRoles GP_UserRoles2
where((
  MemUsers.cUser==GP_UserRoles.cUser and cCurRoleGroup==GP_UserRoles.cRoleGroup
  and GP_UserRoles.cRole==GP_Roles.NRec
));

browse brUsers (,,sci14Esc);
show(,,,15);
table MemUsers;
fields
  MemUsers.UserName 'Имя пользователя' ('Имя пользователя',,):[60],Protect;
  MemUsers.UserLogin 'Идентификатор пользователя' ('Идентификатор пользователя',,):[35],Protect;
  sGetTuneEx('USER.DESCR',UserOfficeFilial(MemUsers.cUser),MemUsers.cUser)
    'Дескриптор' ('Дескриптор'):[12], Protect,NoAutoSize;
  sGetTuneEx('USER.DESGR',UserOfficeFilial(MemUsers.cUser),MemUsers.cUser)
    'Гр.Дескр' ('Группа дескрипторов'):[10], Protect,NoAutoSize;
end;

browse brRoles (,,sci14Esc);
show(,16,,);
table GP_UserRoles;
fields
  {font={Bold=GP_Roles.IsAdmin}};
  GP_Roles.Name 'Наименование роли' ('Наименование роли',,):[50],Protect,NoDel;
  if(GP_Roles.IsAdmin,'Да','Нет') 'Адм.' ('Роль администратора',,):[5],Protect,NoDel,NoAutoSize;
end;

window WinEdit 'Редактирование ролей пользователя' Blue;
show(20,5,140,35);

browse brEditUsers (,,sci1Esc);
show(,,,15);
table MemUsers;
fields
  MemUsers.UserName 'Имя пользователя' ('Имя пользователя',,):[60],Protect;
  MemUsers.UserLogin 'Идентификатор пользователя' ('Идентификатор пользователя',,):[35],Protect;
  sGetTuneEx('USER.DESCR',UserOfficeFilial(MemUsers.cUser),MemUsers.cUser)
    'Дескриптор' ('Дескриптор'):[12], Protect,NoAutoSize;
  sGetTuneEx('USER.DESGR',UserOfficeFilial(MemUsers.cUser),MemUsers.cUser)
    'Гр.Дескр' ('Группа дескрипторов'):[10], Protect,NoAutoSize;
end;

browse brEditRoles (,,sci178Esc);
show(,16,,);
table GP_UserRoles;
fields
  {font={Bold=GP_Roles.IsAdmin}};
  GP_Roles.Name 'Наименование роли' ('Наименование роли',,):[50],Protect,NoDel;
  if(GP_Roles.IsAdmin,'Да','Нет') 'Адм.' ('Роль администратора',,):[5],Protect,NoDel,NoAutoSize;
end;

TableEvent table GP_UserRoles;
cmDeleteRecord:{
  if (GP_Roles.IsAdmin and GP_UserRoles.cUser=UserID) {
    message('Нельзя вывести себя из роли Администратор.');
    abort;
    exit;
  }

  delete current GP_UserRoles;
}
end;

HandleEvent
cmInsert:{
  if (CurTable<>tnGP_UserRoles) exit;
  if (not IsValidAll(tnMemUsers)) exit;

  var m:tptr;
  m:=InitMarker('',8,0,1);
  if (RunInterface(GP_PickRoles,cCurRoleGroup,m)=cmDefault) {
    _loop GP_Roles2
    where((
      cCurRoleGroup==GP_Roles2.cRoleGroup and MemUsers.cUser==GP_UserRoles2.cUser
      and GP_Roles2.NRec==GP_UserRoles2.cRole
    )) {
      if (not FoundMarker(m,GP_Roles2.NRec)) continue;
      if (IsValidAll(tnGP_UserRoles2)) continue;

      ClearBuffer(tnGP_UserRoles);
      GP_UserRoles.cRoleGroup:=cCurRoleGroup;
      GP_UserRoles.cRole:=GP_Roles2.NRec;
      GP_UserRoles.cUser:=MemUsers.cUser;
      if (insert current GP_UserRoles <> tsok) {
        message('Ошибка вставки записи в таблицу GP_UserRoles!',error);
        break;
      }
    }
    ReReadRecord(tnGP_UserRoles);
  }
  DoneMarker(m,'');
  stop;
}
cmDone:{
  if (not UpDateTable) abort;
}
end;
end;//WinEdit

HandleEvent
cmEdit:{
  RunWindow(WinEdit);
}
cmHotKeys:{
  if (brRoles=GetCurrentFormat)
    PutContextMenuCommand('GP_UserRolesView_HotKeys');
}
cmValue1:{//Перейти к роли
  if (IsValidAll(tnGP_UserRoles))
    GoToRole(GP_UserRoles.cRole);
}
end;

constructor Init;
{
  result:=false;
}

constructor InitForRoleGroup(cRoleGroup:comp);
{
  cCurRoleGroup:=cRoleGroup;
  result:=cCurRoleGroup<>0;
}

procedure ReReadUsers;
var CurUser:comp;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Загрузка пользователей...', 0);

  CurUser:=MemUsers.cUser;

  delete all MemUsers;
  sql
    select distinct GP_UserRoles.cUser,X$Users.XU$FULLNAME,X$Users.XU$LOGINNAME
    from
      GP_UserRoles
      left join X$Users on (GP_UserRoles.cUser=X$Users.ATL_NREC)
    where
      :(cCurRoleGroup)=GP_UserRoles.cRoleGroup
    into MemUsers;

  if (CurUser<>0)
    if (getfirst MemUsers where((CurUser==MemUsers.cUser))<>tsok)
      CurUser:=0;
  if (CurUser=0)
    if (getfirst MemUsers <> tsok) {};

  ReReadRecord(tnMemUsers);
  StopVisual;
}

procedure SelectUser(cUser:comp);
{
  if (getfirst MemUsers where((cUser==MemUsers.cUser))=tsok)
    ReReadRecord(tnMemUsers);
}

end.

GP_UserRolesView_HotKeys Menu
{
- '~П~ерейти к роли', cmValue1, 'Перейти в представление по ролям', , , , sci1Esc,,;
}
