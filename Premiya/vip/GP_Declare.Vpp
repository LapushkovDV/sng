/*************************************************************************************************\
* Наименование:  Макроопределения                                                                 *
* Контур/Модуль: Все                                                                              *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#795          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#793          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#195          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#767          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#ifndef __GP_Declare_Vpp__
#define __GP_Declare_Vpp__

Const
end;

//------------------------------------------------------------------------------
// макроопределение для формирования строки выбора
// Определить переменные
//   Marker_Count :longint
//   wc_nrec : comp;  - var_name, тип должен совпадать с типом маркера
//   Marker_?name? :longint
//   filtr_?name? :string;
// Включить нужные таблицы в выборку
//   and wc_nrec == table.fld  - например SPKAU.NREC
// Фильтры задавать в
// Procedure SetFilterName(ww_field :longint=0);
// { if ww_field=0 or ww_field=#filtr_spkau
//   {   #mrkfiltr_(SpKau,SpKau  ,Nrec,wc_nrec, Spkau.Name)
//   }
// } // Procedure SetFilterName(ww_field :longint;
//------------------------------------------------------------------------------
#declare mrkfld_ (name)
   Marker_#(name) :longint; //маркер для задания выбора
   Marker_#(name)_A :longint;//маркер для отбора
   Count_#(name) :longint; //кол-во записей в маркере
   filtr_#(name)  :string; //наименование фильтра
#end
#declare mrkfiltr_ (table,name,fld, var_name,expr_flt)
  Marker_Count := GetMarkerCount(Marker_#name);
  filtr_#name:=' не задано';
  if Marker_Count=0  filtr_#name:='не задано';
  else
    if Marker_Count=1
    { GetMarker(Marker_#name,0,#var_name);
      if (getfirst #table where ((#var_name == #table.#fld))=tsOk)
         filtr_#name:=#expr_flt; //#table.NAME;
    }
    else  filtr_#name:='Выбрано '+string(Marker_Count) ;
#end   
//------------------------------------------------------------------------------
//==============================================================================
// COMPONENT
//------------------------------------------------------------------------------
#undef  mAddCurComponentName
#define mAddCurComponentName(_Str) '#(__COMPONENT__)::'+#(_Str)
//******************************************************************************


//==============================================================================
// OBJ_INTERFACE
//------------------------------------------------------------------------------
#undef mGetVipRef
#declare mGetVipRef(_var, _interf, _Command)
{
  if (NullVipRef(#_var))
  {
    if not GetVipRef(#_var, #_interf)
    { Message(''#3'Ошибка загрузки библиотеки '+#_interf+'!',CancelButton);
       #_Command;
    }
  }
}
#end //mGetVipRef
//------------------------------------------------------------------------------
#undef mLoadVipRef
#declare mLoadVipRef(_var, _interf, _Command)
{
  if (NullVipRef(#_var))
  {
    if not LoadVipRef(#_var, #_interf)
    { Message(''#3'Ошибка загрузки библиотеки '+#_interf+'!',CancelButton);
       #_Command;
    }
  }
}
#end //mLoadVipRef
//------------------------------------------------------------------------------
#undef mGetVipInterface
#declare mGetVipInterface(_var, _Command)
{
  if (NullVipRef(#_var))
  {
    if not GetVipInterface(#_var)
    { Message(''#3'Ошибка загрузки библиотеки !',CancelButton);
       #_Command;
    }
  }
}
#end //mGetVipInterface
//------------------------------------------------------------------------------
#undef mLoadVipInterface
#declare mLoadVipInterface(_var, _Command)
{
  if (NullVipRef(#_var))
  {
    if not LoadVipInterface(#_var)
    { Message(''#3'Ошибка загрузки библиотеки !',CancelButton);
       #_Command;
    }
  }
}
#end //mLoadVipInterface

//------------------------------------------------------------------------------
#undef mBindInterface
#declare mBindInterface(_IDPanel,_var)
{
  if (not NullVipRef(#_var))
  {
    BindEmbeddedInterface(#_IDPanel, #_var);
  }
  else
  {
    Message('BindInterface NullVipRef!!! #_var');
  }
}
#end //mBindInterface
//------------------------------------------------------------------------------
#undef mBindWindInterface
#declare mBindWindInterface(_IDPanel,_var,_Wind)
{
  if (not NullVipRef(#_var))
  {
    BindEmbeddedInterface(#_IDPanel, #_var, #_Wind);
  }
  else
  {
    Message('BindInterface NullVipRef!!! #_var');
  }
}
#end //mBindWindInterface
//------------------------------------------------------------------------------
#undef mUnBindInterface
#declare mUnBindInterface(_IDPanel,_var)
{
  if (not NullVipRef(#_var))
  {
    UnBindEmbeddedInterface(#_IDPanel);
  }
  else
  {
    //FpLog('UnBindInterface NullVipRef!!! #_var');
  }
}
#end //mUnBindInterface

//------------------------------------------------------------------------------
#undef mBindEvent
#declare mBindEvent(_MainFun,_SlaveFun,_var)
{
  if (not NullVipRef(#_var))
  {
    BindEvent(#_MainFun, #_var.#_SlaveFun);
  }
  else
  {
    Message('BindEvent NullVipRef!!! #_var');
  }
}
#end //mBindEvent
//------------------------------------------------------------------------------
#undef mUnBindEvent
#declare mUnBindEvent(_MainFun,_SlaveFun,_var)
{
  if (not NullVipRef(#_var))
  {
    UnBindEvent(#_MainFun, #_var.#_SlaveFun);
  }
  else
  {
    //FpLog('UnBindEvent NullVipRef!!! #_var');
  }
}
#end //mUnBindEvent
//------------------------------------------------------------------------------
#undef mUnBindAllEvents
#declare mUnBindAllEvents(_var)
{
  if (not NullVipRef(#_var))
  {
    UnBindAllEvents(#_var);
  }
}
#end //mUnBindAllEvents


//------------------------------------------------------------------------------
#undef mFreeVipInterface
#declare mFreeVipInterface(_var)
{
  if (not NullVipRef(#_var))
  { // никаких _try блоков делать нельзя,
    // иначе возникают ошибки типа:
    // "Окно в нестабильном состоянии..."
    FreeVipInterface(#_var);
  }
}
#end //mFreeVipInterface
//------------------------------------------------------------------------------
#undef mFreeCrossVipRef
#declare mFreeCrossVipRef(_var)
{
  if (not NullVipRef(#_var))
  {
    #(_var).FreeCrossVipRef;
    FreeVipInterface(#_var);
  }
}
#end //mFreeCrossVipRef
//******************************************************************************


//==============================================================================
// MODIFY CURRENT
//------------------------------------------------------------------------------
#undef mInsertCurrent
#declare mInsertCurrent(_Tbl)
{
  {
    _try
    {
      insert current #(_Tbl);
    }
    _except  
      on ExDataBase :  
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' insert current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }
      else
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' insert current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }

    //insert current #(_Tbl);
    /*
    var Res : integer;  Res := insert current #(_Tbl);
    if (Res <> tsOk )
    { FpLog(#(__InterfaceName__)+' : insert current #(_Tbl) <> tsOk'+' ErrorCode='+string(Res) ); 
      Message('Ошибка создания записи ErrorCode='+string(Res), Warning);
    }
    */
  }
}
#end //mInsertCurrent
//------------------------------------------------------------------------------
#undef mUpdateCurrent
#declare mUpdateCurrent(_Tbl)
{
  {
    _try
    {
      update current #(_Tbl);
    }
    _except  
      on ExDataBase :  
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' update current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }
      else
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' update current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }

    //update current #(_Tbl);
    /*
    var Res : integer;  Res := update current #(_Tbl);
    if (Res <> tsOk )
    { FpLog(#(__InterfaceName__)+' : update current #(_Tbl) <> tsOk'+' ErrorCode='+string(Res) ); 
      Message('Ошибка модификации записи ErrorCode='+string(Res), Warning);
    }
    */
  }
}
#end //mUpdateCurrent
//------------------------------------------------------------------------------
#undef mDeleteCurrent
#declare mDeleteCurrent(_Tbl)
{
  {
    _try
    { ExtAttrClass_DeleteAll(co#(_Tbl),#(_Tbl).Nrec)
      delete current #(_Tbl);
    }
    _except  
      on ExDataBase :  
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' delete current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }
      else
      {
        sLastError := ExploreException;
        FpLog(#(__InterfaceName__)+' delete current #(_Tbl)'#13''+ sLastError);
        Message(sLastError);
      }
    //delete current #(_Tbl);
    /*
    var Res : integer;  Res := delete current #(_Tbl);
    if (Res <> tsOk )
    { FpLog(#(__InterfaceName__)+' : delete current #(_Tbl) <> tsOk'+' ErrorCode='+string(Res) ); 
      Message('Ошибка удаления записи ErrorCode='+string(Res), Warning);
    }
    */
  }
}
#end //mDeleteCurrent
//******************************************************************************

//==============================================================================
// MARKER HANDLE
//------------------------------------------------------------------------------
#undef mMarkerHandle
#declare mMarkerHandle(_Tbl)
cmMarkUnMark :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  InvertMarker(Markers, #(_Tbl).NRec);
  RedrawCurrentAndGo(GetCurrentFormat, True);
  ShowIHead;
}
cmUnSelectAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  ClearMarker(Markers);
  ReScanPanel(tn#(_Tbl));
  ShowIHead;
}
cmInvertAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Обработано записей: ', 1);
  PushPos(tn#(_Tbl));
  _Loop #(_Tbl)
  {
    InvertMarker(Markers, #(_Tbl).NRec);
    if (Not NextVisual) Break;
  }
  PopPos(tn#(_Tbl));
  StopVisual('', 0);
  ReScanPanel(tn#(_Tbl));
  ShowIHead;
}
cmSelectAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  ClearMarker(Markers);
  PutCommand(cmInvertAll);
}
cmShowAll : // Пометить уровень  <Ctrl><+>
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  PutCommand(cmSelectAll);
  Exit;
}
cmHideAll : // Снять пометку с уровеня  <Ctrl><->
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  PutCommand(cmUnSelectAll);
  Exit;
}
#end //mMarkerHandle
//------------------------------------------------------------------------------
#undef mMarkerHandleCurRec
#declare mMarkerHandleCurRec(_Tbl)
cmMarkUnMark :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  InvertMarker(Markers, GetCurRec);
  RedrawCurrentAndGo(GetCurrentFormat, True);
  ShowIHead;
}
cmUnSelectAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  ClearMarker(Markers);
  ReScanPanel(tn#(_Tbl));
  ShowIHead;
}
cmInvertAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Обработано записей: ', 1);
  PushPos(tn#(_Tbl));
  _Loop #(_Tbl)
  {
    InvertMarker(Markers, GetCurRec);
    if (Not NextVisual) Break;
  }
  PopPos(tn#(_Tbl));
  StopVisual('', 0);
  ReScanPanel(tn#(_Tbl));
  ShowIHead;
}
cmSelectAll :
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  ClearMarker(Markers);
  PutCommand(cmInvertAll);
}
cmShowAll : // Пометить уровень  <Ctrl><+>
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  PutCommand(cmSelectAll);
  Exit;
}
cmHideAll : // Снять пометку с уровеня  <Ctrl><->
{
  if (not isValid(tn#(_Tbl)) )
  { Exit; }
  PutCommand(cmUnSelectAll);
  Exit;
}
#end //mMarkerHandleCurRec
//******************************************************************************

//==============================================================================
// BOUNDS
//------------------------------------------------------------------------------
#undef mAddBounds
#declare mAddBounds(_bound)
{
  if (not BoundActive(#_bound) )
  { AddBounds(#_bound); }
}
#end //mAddBounds
//------------------------------------------------------------------------------
#undef mSubBounds
#declare mSubBounds(_bound)
{
  if (BoundActive(#_bound) )
  { SubBounds(#_bound); } 
}
#end //mSubBounds
//------------------------------------------------------------------------------
#undef mChkBounds
#declare mChkBounds(_bound, _isSet)
{
  if (#(_isSet))
  { // если надо установить ограничение
    if (not BoundActive(#_bound) )
    { AddBounds(#_bound); }
  }
  else
  { // если надо снять ограничение
    if (BoundActive(#_bound) )
    { SubBounds(#_bound); } 
  }
}
#end //mChkBounds
//******************************************************************************


//==============================================================================
// FIELDS OPTION
//------------------------------------------------------------------------------
#undef mMyShowFld
#declare mMyShowFld(_Fld)
{
  SetFieldState  (#_Fld, sfVisible);
  ShowLabel4Field(#_Fld);
}
#end //mMyShowFld
//------------------------------------------------------------------------------
#undef mMyHideFld
#declare mMyHideFld(_Fld)
{
  HideLabel4Field(#_Fld);
  ClearFieldState(#_Fld, sfVisible);
}
#end //mMyHideFld
//------------------------------------------------------------------------------
#undef mMyVisibleFldLabel
#declare mMyVisibleFldLabel(_Fld,_Visible)
{
  if (#_Visible)
  {
    SetFieldState  (#_Fld, sfVisible);
    ShowLabel4Field(#_Fld);
  }
  else
  {
    HideLabel4Field(#_Fld);
    ClearFieldState(#_Fld, sfVisible);
  }
}
#end //mMySelecTableFld
//------------------------------------------------------------------------------
#undef mMySelectableFld
#declare mMySelectableFld(_Fld,_Selectable)
  if (#_SelecTable)
  { SetFieldOption  (#_Fld, ofSelecTable); }
  else
  { ClearFieldOption(#_Fld, ofSelecTable); }
#end //mMySelectableFld
//------------------------------------------------------------------------------
#undef mMyProtectableFld
#declare mMyProtectableFld(_Fld,_Protectable)
  if (#_Protectable)
  { SetFieldOption  (#_Fld, ofProtected); }
  else
  { ClearFieldOption(#_Fld, ofProtected); }
#end //mMyProtectableFld
//------------------------------------------------------------------------------
#undef mMyVisibleFld
#declare mMyVisibleFld(_Fld,_Visible)
{
  if (#_Visible)
  { SetFieldState  (#_Fld, sfVisible);  }
  else
  { ClearFieldState(#_Fld, sfVisible);  }
}
#end //mMyVisibleFld

//------------------------------------------------------------------------------
#undef mMySelecTableCommand
#declare mMySelecTableCommand(_Command,_Selectable)
{
  if (#_SelecTable)
  { EnableCommand (#_Command); }
  else
  { DisableCommand(#_Command); }
}
#end //mMySelecTableCommand
//******************************************************************************


//==============================================================================
// LOG
//------------------------------------------------------------------------------
#undef Var
#declare Var(_Var)
''#13''+' #_Var='+string(#_Var)
#end //Var
//------------------------------------------------------------------------------
#undef mObjLog
#ifdef  __FpTestObjLog__
  #declare mObjLog(_s)
  { FpLog(#(__InterfaceName__)+':'+#_s); }
  #end //mObjLog
#else// __FpTestObjLog__
  #declare mObjLog(_s)
  { }
  #end //mObjLog
#endif//__FpTestObjLog__
//******************************************************************************


//==============================================================================
// PROFILER
//------------------------------------------------------------------------------
#undef mEnableProfiler
#undef mDisableProfiler
#undef mAddArea
#undef mCloseArea
#ifdef  PROFILER
  #declare mEnableProfiler(_Num,_File)
  { EnableProfiler(#(_Num),#(_File)); }
  #end //mEnableProfiler

  #declare mDisableProfiler
  { DisableProfiler; }
  #end //mDisableProfiler

  #declare mAddArea(_Num,_Name)
  { AddArea(#(_Num),#(_Name)); }
  #end //mAddArea

  #declare mCloseArea(_Num)
  { CloseArea(#(_Num)); }
  #end //mCloseArea
#else //PROFILER
  #declare mEnableProfiler(_Num,_File)
  { }
  #end //mEnableProfiler

  #declare mDisableProfiler
  { }
  #end //mDisableProfiler

  #declare mAddArea(_Num,_Name)
  { }
  #end //mAddArea

  #declare mCloseArea(_Num)
  { }
  #end //mCloseArea
#endif//PROFILER
//******************************************************************************


//==============================================================================
// DOC_Create_DtTm
//------------------------------------------------------------------------------
#declare DOC_Create_DtTm_Var(Table)
var pVA_DOC_CreateDate:comp=0;
var pVA_DOC_CreateTime:comp=0;
Function GetDocCreateDateTime(_wTable:comp;_cRec:comp):DateTime;Cacheable;
{ if pVA_DOC_CreateDate=0 pVA_DOC_CreateDate:=ExtAttr_ID(_wTable,VA_DOC_CreateDate);
  if pVA_DOC_CreateTime=0 pVA_DOC_CreateTime:=ExtAttr_ID(_wTable,VA_DOC_CreateTime);
  Result:=_DateTime1( dGetAttrID(_wTable, _crec, pVA_DOC_CreateDate)
                     ,tGetattrID(_wTable, _crec, pVA_DOC_CreateTime)
                    );
  /*
  timelog('GetDocCreateDateTime:pVA_DOC_CreateDate='+string(pVA_DOC_CreateDate,0,0)
    +',pVA_DOC_CreateTime='+string(pVA_DOC_CreateTime,0,0)
    +', Result='+Result
    )*/
} //Function GetDocCreateDateTime(_wTable:comp;_cRec:comp):DateTime;Cacheable;
#end


#declare DOC_Create_DtTm_FLD(Table)
 //установка даты и времени создания документа
 //,dGetAttr(co#(Table), #(Table).nrec, VA_DOC_CreateDate) (Fieldname=Doc_Create_Date,FieldTitle='Дата создания документа')
 //,tGetattr(co#(Table), #(Table).nrec, VA_DOC_CreateTime) (Fieldname=Doc_Create_Time,FieldTitle='Время создания документа')
 //,_DateTime1( dGetAttr(co#(Table), #(Table).nrec, VA_DOC_CreateDate)
 //            ,tGetattr(co#(Table), #(Table).nrec, VA_DOC_CreateTime)
 //           )
 , GetDocCreateDateTime(co#(Table), #(Table).nrec)
               (Fieldname=Doc_Create_DtTm,FieldTitle='Дата/Время создания документа')
#end
#declare DOC_Create_DtTm_BROWSE( _Table)
 //Doc_Create_Date 'Дата','Создания' ('Дата создания документа')  :[11],Protect,NoDel;
 //Doc_Create_Time 'Время','создания' ('Время создания документа') :[7],Protect,NoDel;
 Doc_Create_DtTm 'Дата/Время','Создания' ('Дата/Время создания документа')  :[18],Protect,NoDel;
#end
#declare DOC_Create_DtTm_Add_Column ( Browse,Column)
 //Add_Column (cfsGetCurrentContainerSelf,'#(Browse)','Doc_Create_Date'  ,11,'Дата'+chr(13)+'создания'  ,#(Column));
 //Add_Column (cfsGetCurrentContainerSelf,'#(Browse)','Doc_Create_Time'  , 7,'Время'+chr(13)+'создания'  ,#(Column)+1);
 Add_Column (cfsGetCurrentContainerSelf,'#(Browse)','Doc_Create_DtTm'  ,18,'Дата/Время'+chr(13)+'создания'  ,#(Column));
#end


//******************************************************************************


//==============================================================================
// П Р О Ч Е Е
//------------------------------------------------------------------------------
#declare Month_List
[LIST 1 'Январь','Февраль','Март','Апрель','Май','Июнь','Июль',
              'Август','Сентябрь','Октябрь','Ноябрь','Декабрь'],protect ;
#end
//******************************************************************************
#declare CopyInfo_GP (DestTable, SourceTable)
begin
  var I : Integer;
  #DestTable.cSCHETD  := #SourceTable.cSCHETD;
  #DestTable.cSUBSCHD := #SourceTable.cSUBSCHD;
  for (I := cFirstKAU; I <= cLastKAU; I := I + 1)
  {
    #DestTable.TblD[I]  := #SourceTable.TblD[I];
    #DestTable.cKAUD[I] := #SourceTable.cKAUD[I];
  }
end;
#end //CopyInfo_



#endif//__GP_Declare_Vpp__
