/*************************************************************************************************\
* Наименование: Перечень показателей премирования                                                 *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#192          |14/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_UserFilterStoreDSK.vih
#include GP_UserFilterCatalogs.vih
#include GP_UserFilterYesNo.vih
#include GP_UserFilterList.vih
#include GP_QueryBuilder.vih
#include GP_xlMatrixUtil.vih

interface GP_ListKPI 'Перечень показателей премирования', Cyan;
show(10,5,190,35);
Function GetHeadPostName(_pDep:comp) :string;forward;
var FilterSwitch:longint;
    IsFilterSet:boolean;
    UserFilterList:GP_ObjUserFilterList;
    FilterStore:GP_IUserFilterStore;
    iQBuilder:GP_QueryBuilder new;
    xlMatrixUtil:GP_xlMatrixUtil new;

table struct ListKPI(
    cKPI_Plan        : comp
  , DepCode          : string
  , DepName          : string
  , depNrec          : comp
  , PostName         : string
  , KPICode          : string
  , KPIName          : string
  , KPIEd            : string
  , UdVes            : double
  , LowLimit         : double
  , HighLimit        : double
  , Plan             : double
  , UcPeriod         : string
  , dBegin           : date
  , dEnd             : date
  , ChiefDepCode     : string
  , ChiefPostName    : string
  , ChiefPeriod      : string
  , Executor         : string
  , Notice           : string
  , IsNeedCorrection : string[3]
  , IsArc            : string[3]
)
with index(i=DepCode+KPICode,i2=cKPI_Plan);

create view
as select
   GetHeadPostName(ListKPI.depNrec)  (fieldname=HeadPostName)
from
  ListKPI;
Create view vPodr
var pPodr :comp;
as select Catalogs.code, Catalogs.name
From Catalogs, Catalogs CatMain
where (( pPodr == Catalogs.nrec
and -11 == CatMain.syscode
));

browse brListKPI (,,sci1Esc);
table ListKPI;
fields
  HeadPostName      'Должность руководителя', 'функционального направления,','в чьем подчинении находится','структурное подразделение'
                     ('Наименование должности руководителя функционального направления деятельности, в чьем подчинении находится структурное подразделение',,):
                     [30],Protect;
  ListKPI.DepCode   'Код оцениваемого','подразделения' ('Код оцениваемого подразделения',,):[5],Protect;
  ListKPI.DepName   'Наименование', 'оцениваемого подразделения' ('Наименование оцениваемого подразделения',,):[25],Protect;
  ListKPI.PostName  'Наименование', 'оцениваемой должности' ('Наименование оцениваемой должности',,):[25],Protect;
  ListKPI.KPICode   'Код показателя','премирования' ('Код показателя премирования',,):[16],Protect;
  ListKPI.KPIName   'Наименование', 'показателя премирования' ('Наименование показателя премирования',,):[25],Protect;
  ListKPI.KPIEd     'Единица', 'измерения' ('Единица измерения показателя премирования',,):[10],Protect,NoAutoSize;
  ListKPI.UdVes     'Удельный','вес' ('Удельный вес показателя премирования',,):[10.2],Protect,NoAutoSize;
  ListKPI.LowLimit  'Нижняя','граница' ('Нижняя граница премирования',,):[10.2],Protect,NoAutoSize;
  ListKPI.HighLimit 'Верхняя','граница' ('Верхняя граница премирования',,):[10.2],Protect,NoAutoSize;
  ListKPI.Plan      'Плановое','значение' ('Плановое значение показателя премирования',,):[10.2],Protect,NoAutoSize;
  ListKPI.UcPeriod  'Учетный','период' ('Учетный период планового значения показателя',,):[10],Protect;
  ListKPI.dBegin    'Начало','действия' ('Период действия показателя премирования с',,):[10],Protect,NoAutoSize;
  ListKPI.dEnd         'Окончание','действия' ('Период действия показателя премирования по',,):[10],Protect,NoAutoSize;
  ListKPI.ChiefDepCode  'Подразделение','руководителя'
                        ('Код подразделения руководителя, отвечающего за учет и оценку достижений установленных показателей',,):[15],Protect,NoAutoSize;
  ListKPI.ChiefPostName 'Должность', 'руководителя'
                        ('Наименование должности руководителя, отвечающего за учет и оценку достижений установленных показателей',,):[25],Protect;
  ListKPI.ChiefPeriod   'Период действия', 'полномочий руководителей'
                        ('Период действия полномочий руководителей, отвечающих за учет и оценку достижений установленных показателей',,):[20],Protect;
  ListKPI.Executor     'Исполнитель'
                        ('Исполнители, отвечающие за ввод фактических оценок показателей премирования',,):[25],Protect;
  ListKPI.Notice           'Примечание':[25],Protect;
  ListKPI.IsNeedCorrection 'Требуется', 'корректировка':[15],Protect,NoAutoSize;
  ListKPI.IsArc            'Архивный':[10],Protect,NoAutoSize;
end;
Function FindZGD(_pDep:comp; Flag_ZGD:boolean=false) :string;cacheable;
var _pnrec:comp;
{ Result:='';
  vPodr.pPodr:=_pDep;
  if vPodr.getfirst Catalogs=tsok
  { _pnrec:=coGetAttr(coCatalogs,_pDep,'Верхний уровень иерархии');
    //-------------------------------
    //-- #193.21
    if _pnrec>0
    { Result:=vPodr.Catalogs.Name;
    }
    else
    { Result:=FindZGD(vPodr.Catalogs.cParent,pos('-',vPodr.Catalogs.Code)=0 or Flag_ZGD);
    }
    Exit;
    //-- #193.21
    //-------------------------------

    if Flag_ZGD
    { //#783.17 от 14.03.2018 16:06 , проверим - а вдруг, это еще не тот
      if pos('-',vPodr.Catalogs.Code)=0
      { Result:=vPodr.Catalogs.Name;
        Exit;
      }
    }
    if vPodr.Catalogs.cParent=vPodr.Catalogs.MainLink exit;
    // а вдруг Mainlink кривой
    if vPodr.Catalogs.cParent=vPodr.CatMain.Nrec exit;
    Result:=FindZGD(vPodr.Catalogs.cParent,pos('-',vPodr.Catalogs.Code)=0 or Flag_ZGD);
  }
} //Function FindZGD(_pDep:comp) :string;cacheable;

Function GetHeadPostName(_pDep:comp) :string;cacheable;
{ Result:=''; //oExtClass.GetSegName(ClassCodeHead,Statements.cDep);
  if Result=''
  { Result:=FindZGD(_pDep);
  }
}//Function GetHeadPostName(_pDep:comp) :string;cacheable;

window WinFilter 'Фильтр' DoAccept, EscClose, Gray;
show(50, 5, 110, 12);

screen scFilter ('', , sci13Esc);
Fields
  FilterSwitch(,,sci1Esc):noprotect;
  [FilterArc] UserFilterList.FilterStr(1):Protect,PickButton;
  [FilterKor] UserFilterList.FilterStr(2):Protect,PickButton;
  [FilterDep] UserFilterList.FilterStr(3):Protect,PickButton;
buttons
  cmOK,,,'Установить',,sci1Esc;
  cmCancel,,,'Выход',,sci1Esc;
<<

    [.] Архивный`                 .@@@@@@@@@@@@@@@@@@@@@@@
    [.] Требуется корректировка`  .@@@@@@@@@@@@@@@@@@@@@@@
    [.] Оцениваемое подразделение`.@@@@@@@@@@@@@@@@@@@@@@@

 <. ~У~становить .>                           <. ~О~тмена  .>
>>
end;

HandleEvent
cmInit:{
  UserFilterList.Load;
}
cmDone:{
  UserFilterList.Save;
}
cmOK:{
  PutCommand(cmDefault);
}
end;
end;//WinFilter

procedure FillListKPI;
var m:longint;
    d1,d2:date;
    cRec:comp;
{
  StartNewVisual(vtRotateVisual, vfTimer, 'Формирование перечня показателей премирования...', 0);

  d1:=dGetTune('UP.DATOTCH');//Управление персоналом\Отчетный период
  d1:=date(1,Month(d1),Year(d1));
  d2:=date(Last_Day(d1),Month(d1),Year(d1));
  cRec:=ListKPI.cKPI_Plan;

  delete all ListKPI;
  iQBuilder.AddToSelect('Distinct GP_KPI_Plan.NRec as cKPI_Plan,CatDep.Code,CatDep.Name,CatDep.Nrec,CatPost.Name,GP_KPI.Kod,GP_KPI.Name,KatEd.Name');
  iQBuilder.AddToSelect('GP_KPI_Plan.UdVes,GP_KPI_Plan.LowLimit,GP_KPI_Plan.HighLimit,GP_KPI_Plan.Plan,UcPeriod.Name');
  iQBuilder.AddToSelect('GP_KPI_Plan.dBegin,GP_KPI_Plan.dEnd,DepChief.Code,PostChief.Name');
  iQBuilder.AddToSelect('DATE2STR(''%dd/%MM/%yyyy'',GP_KPI_Chief.dBegin)||'' - ''||DATE2STR(''%dd/%MM/%yyyy'',GP_KPI_Chief.dEnd) as ChiefPeriod');
  iQBuilder.AddToSelect('Persons.FIO,GP_KPI_Plan.Notice');
  iQBuilder.AddToSelect('Case When Persons.DisDate>#date('+DateToStr(d1,'DD,MM,YYYY')+') Then ''Да'' '+
                             'When Appointments.NRec Is Not Null Then ''Да'' '+
                             'Else ''Нет'' End as IsNeedCorrection:string');
  iQBuilder.AddToSelect('Case When GP_KPI_Plan.dEnd<#date('+DateToStr(d1,'DD,MM,YYYY')+') and GP_KPI_Plan.dEnd>#date(0,0,0) Then ''Да'' '
                   +' Else Case When GP_KPI_Chief.dEnd<#date('+DateToStr(d1,'DD,MM,YYYY')+') and GP_KPI_Chief.dEnd>#date(0,0,0) Then ''Да'' '
                 +' Else ''Нет'' End End as IsArc:string');
  iQBuilder.AddToFrom('GP_KPI');
  iQBuilder.AddToFrom('left join KatEd on (GP_KPI.cKatEd = KatEd.NRec)');
  iQBuilder.AddToFrom('inner join GP_KPI_Chief on (GP_KPI.NRec = GP_KPI_Chief.cKPI)');
  iQBuilder.AddToFrom('inner join GP_KPI_Plan on (GP_KPI_Chief.NRec = GP_KPI_Plan.cChiefKPI)');
  iQBuilder.AddToFrom('left join Persons on (GP_KPI_Chief.cExecutor = Persons.NRec)');
  iQBuilder.AddToFrom('left join Appointments');
  iQBuilder.AddCondition('GP_KPI_Chief.cExecutor = Appointments.Person and Appointments.Person<>#comp(0)');
  iQBuilder.AddCondition('Appointments.lPrizn=',0);
  iQBuilder.AddCondition('Appointments.AppointDate>=',d1);
  iQBuilder.AddCondition('Appointments.AppointDate<=',d2);
  iQBuilder.AddToFrom('left join Catalogs DepChief on (GP_KPI_Chief.cPodrChief = DepChief.NRec)');
  iQBuilder.AddToFrom('left join Catalogs PostChief on (GP_KPI_Chief.cPostChief = PostChief.NRec)');
  iQBuilder.AddToFrom('left join Catalogs CatDep on (GP_KPI_Plan.cPodr = CatDep.NRec)');
  iQBuilder.AddToFrom('left join Catalogs CatPost on (GP_KPI_Plan.cPost = CatPost.NRec)');
  iQBuilder.AddToFrom('left join Catalogs UcPeriod on (GP_KPI_Plan.UcPeriod = UcPeriod.NRec)');

  if (IsFilterSet) {
    if ((FilterSwitch and 1b)<>0) {//Архивный
      if (FilterStore.LoadComp('FilterArc')>0)
        iQBuilder.AddToWhere('GP_KPI_Plan.dEnd>#date(0,0,0) and GP_KPI_Plan.dEnd<',d1)
      else
        iQBuilder.AddToWhere('(GP_KPI_Plan.dEnd=#date(0,0,0) or GP_KPI_Plan.dEnd>=#date('+DateToStr(d1,'DD,MM,YYYY')+'))');
    }

    if ((FilterSwitch and 10b)<>0) {//Требуется корректировка
      iQBuilder.AddToWhere('Case When Persons.DisDate>#date('+DateToStr(d1,'DD,MM,YYYY')+') Then ''Да'' '+
                                'When Appointments.NRec Is Not Null Then ''Да'' '+
                                'Else ''Нет'' End=',if(FilterStore.LoadComp('FilterKor')>0,'Да','Нет'));
    }

    if ((FilterSwitch and 100b)<>0) {//Оцениваемое подразделение
      m:=FilterStore.LoadMarker('mFilterDep');
      iQBuilder.AddToWhereMarker('GP_KPI_Plan.cPodr',m);
      DoneMarker(m,'');
    }
  }

  if (sqlSelectInto(iQBuilder.Make,tnListKPI)<>tsok)
    message('Ошибка выполнения DSQL запроса при формировании перечня.',error)
  else {
    if (cRec<>0)
      if (getfirst ListKPI where((cRec==ListKPI.cKPI_Plan))=tsok) {};
  }

  StopVisual;
}

procedure DropFilter;
{
  if (IsFilterSet) {
    IsFilterSet:=false;

    FillListKPI;
    ReReadRecord(tnListKPI);
  }
}

procedure SetFilter;
{
  IsFilterSet:=true;

  FillListKPI;

  if (RecordsInTable(tnListKPI)>0)
    ReReadRecord(tnListKPI);
  else {
    message('Не найдены записи удовлетворяющие фильтру.',Warning);
    DropFilter;
  }
}

HandleEvent
cmInit:{
  FilterStore:=GP_IUserFilterStore(new(GP_UserFilterStoreDSK,InitDSK('GP_ListKPI_')));
  UserFilterList:=GP_ObjUserFilterList(new(GP_UserFilterList,UserFilterList(FilterStore)));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterYesNo,UserFilter(fnFilterArc,'FilterArc'))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterYesNo,UserFilter(fnFilterKor,'FilterKor'))));
  UserFilterList.Add(GP_IUserFilter(new(GP_UserFilterCatalogs,UserFilterCatalogs(fnFilterDep,'mFilterDep',-11))));

  FillListKPI;
}
cmPick:{
  if (UserFilterList.Pick(CurField))
    RedrawPanel(CurTable);
}
cmDelOnProtect:{
  if (UserFilterList.Del(CurField))
    RedrawPanel(CurTable);
}
cmHotKeys:{
  if (IsFilterSet)
    EnableCommand(cmIEHist)
  else
    DisableCommand(cmIEHist);

  PutContextMenuCommand('GP_ListKPI_HotKeys');
}
cmFilterSave:{//Установка фильтра
  if (RunWindowModal(WinFilter)=cmDefault) {
    if (FilterSwitch=0)
      DropFilter
    else
      SetFilter;
  }
}
cmIEHist:{//Снятие фильтра
  DropFilter;
}
cmSortMC:{//Обновить
  FillListKPI;
}
cmPrintDoc:{//Печать перечня
  var sXLTFileName:string;
  sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS_ЭМ\Staff\' + 'Перечень показателей премирования (GP_ListKPI).xlt';

  if (not ExistFile(sXLTFileName)) {
    message('Не найден шаблон отчета "'+sXLTFileName+'"',error);
    exit;
  }

  if (not xlCreateNewExcelWithTemplate(sXLTFileName,true)) {
    message('Ошибка при открытии шаблона отчета "'+sXLTFileName+'".',error);
    exit;
  }
  xlDisplayAlerts(false);

  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Печать перечня показателей премирования...', RecordsInTable(tnListKPI));

  xlMatrixUtil.ExcelFirstRow:=2;
  xlMatrixUtil.ExcelFirstCol:=1;
  xlMatrixUtil.MatrixColCount:=19;

  PushPos(tnListKPI);
  _loop ListKPI {
    if (not NextVisual) break;

    if (not xlMatrixUtil.AddRow) break;
    xlMatrixUtil.StWrite(1,ListKPI.DepCode);
    xlMatrixUtil.StWrite(2,ListKPI.KPICode);
    xlMatrixUtil.StWrite(3,ListKPI.DepName);
    xlMatrixUtil.StWrite(4,ListKPI.ChiefDepCode);
    xlMatrixUtil.StWrite(5,ListKPI.ChiefPostName);
    xlMatrixUtil.StWrite(6,ListKPI.ChiefPeriod);
    xlMatrixUtil.StWrite(7,ListKPI.KPIName);
    xlMatrixUtil.StWrite(8,ListKPI.KPIEd);
    xlMatrixUtil.WriteSum(9,ListKPI.UdVes);
    xlMatrixUtil.WriteSum(10,ListKPI.LowLimit);
    xlMatrixUtil.WriteSum(11,ListKPI.HighLimit);
    xlMatrixUtil.WriteSum(12,ListKPI.Plan);
    xlMatrixUtil.StWrite(13,ListKPI.UcPeriod);
    xlMatrixUtil.DtWrite(14,ListKPI.dBegin);
    xlMatrixUtil.DtWrite(15,ListKPI.dEnd);
    xlMatrixUtil.StWrite(16,ListKPI.Executor);
    xlMatrixUtil.StWrite(17,ListKPI.Notice);
    xlMatrixUtil.StWrite(18,ListKPI.IsNeedCorrection);
    xlMatrixUtil.StWrite(19,ListKPI.IsArc);
  }//_loop ListKPI
  PopPos(tnListKPI);

  xlMatrixUtil.WriteMatrix;
  xlKillExcel;

  StopVisual;
}
end;
end.

GP_ListKPI_HotKeys menu
{
 - '~У~становка фильтра ...', cmFilterSave, 'Установить фильтр на данные', hcNoContext, 'Alt+B', kbAltB, sci1Esc,,,, bmpFilterSO;
 - '~С~нятие фильтра',cmIEHist,'Снять фильтр на данные',hcNoContext,'Alt+H',kbAltH,sci1Esc;
 --------;
 - 'Обновить', cmSortMC, 'Обновить содержимое перечня', hcNoContext, 'Alt+R', kbAltR, sci1Esc,,,, bmReport_Refresh;
 -------;
 - '~П~ечать',cmPrintDoc,'Печать перечня показателей премирования',hcNoContext,'Ctrl+P',kbCtrlP,sci1Esc,,,, bmpPrint;
}
