
/*************************************************************************************************\
* Наименование:  Базовый объект для ведомостей                                                               *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |20/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#DEFINE GP_KPI_BASE_DEBUG
#DEFINE GP_KPI_BASE_Print_TabnOld

#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию
#include Query.vih
#include GetKau.Vih
#include CatFunc.Vih
#include Contexts.vih // прикладные контексты (для инициализации табеля)
#include ChoiseYourPersons.vih
#include FRRecordDefinition.vih
#include AllowedDepartmentGroupList.vih // работа со списком разрешенных групп подразделений
//---------------------------------
#include CLSFUNCS.VIH // ф-ии пересканирования текущих л/с

//---------------------------------
#include GP_PickTypeDocs.Vih
#include GP_Status.vih
#include GP_StatusChange.vih
#include GP_StatusAccessEdit.vih
#include GP_VisibleHidden.vih //KBU
#include GP_Protector.Vih
#include GP_UserAccessService.vih

#include GP_KPI_AlG.Vih
#include GP_KPI_RaiseEdit.Vih
//--------------------------
#include GP_KPI_DOC.Vih
#include KPI_Report.vih
//----------------------------------------
/*
SQL insert into GP_UserRoles (cRoleGroup,cUser,cRole)
  select
   GP_ROLEGROUPS.Nrec
  ,#COMP(2814749767106679)          //cUser:=UserId,
  ,GP_Roles.Nrec
From GP_ROLEGROUPS
inner join GP_Roles on GP_Roles.CROLEGROUP = GP_ROLEGROUPS.Nrec and GP_Roles.IsAdmin=GP_Roles.IsAdmin
where ('Мотивация персонала' = GP_ROLEGROUPS.NAME)
*/
#doc
 Базовый интерфейс ведомостей
#end

//----------------------------------------
Interface GP_KPI_DOC_Base 'Базовый объект для ведомостей'  (,,sci17EnEsc);
#include ShowKau.Vpp
//----------------------------------------
#include GetKau.Var
//----------------------------------------
Const // wTypeRep
  KPI_DOC_PRN_Fast        =0;
  KPI_DOC_PRN_Excel       =1;
  KPI_DOC_PRN_Excel_It    =2;
  KPI_DOC_PRN_Excel_It_PL =3;
  KPI_DOC_PRN_Fast_IT     =4;
  KPI_DOC_PRN_Fast_IT_NEW =5;
end;
//----------------------------------------


Table Struct tmp_Staff_Raise
(  Department : comp // ссылка на подразделение СЕШР
 , StaffStr:comp// ссылка на вакантную должность
 , Department_to:comp // ссылка на подразделение Руководителя
 , StaffStr_to:comp // ссылка на вакантную должность Руководителя

)
with index
(  tmp_Staff_Raise01 = Department +StaffStr
  ,tmp_Staff_Raise02 = StaffStr
  ,tmp_Staff_Raise03 = Department_to+StaffStr
);
Table Struct tmp_err
( name:string[100]
 ,prim:string
)
with index
( tmp_err01 = name
);
//----------------------------------------
// Для печати
//----------------------------------------
Table struct tmp_print
(  DocNumber      : string[50]
  ,DocDate        : String[10]
  ,Name           : String
  ,cDoc           : tNrec
  ,sTypeVed       : string[200]
  ,sRazdel        : string[200]
  ,wType          : word
  ,wMonth         : word
  ,wYear          : word
  ,wKvartal       : word
  ,WYEARKVARTAL   : word
  ,Description    : string
  ,Katpodr_Code   : string[30]
  ,Katpodr_Name   : string
  ,ChiefPost_Name : string //('Должность ответственного',,):Protect,PickButton,NoDel;
  ,ChiefDep_Code  : string //('Подразделение ответственного',,):Protect,PickButton,NoDel;
  ,Executor_Fio   : string //         ('Исполнитель'):Protect,PickButton,NoDel;
)
with index
(  tmp_print01  = DocNumber+Name+sTypeVed
  ,tmp_print02  = cDoc+sTypeVed
);
// шапка полей - формируем на основе GP_KPI_FIelds
Table struct tmp_print_shap
(  Npp      : word
  ,cDoc     : tNrec
  ,Name_Col : string[200]
  ,sTypeVed : string[200]
  ,sRazdel  : string[200]
  ,Razdel   : word
  ,Vis      : word
  ,Itogo    : boolean
  ,Razr     : word
  ,Len      : word
  ,Option   : word
  ,Summa    : double
  ,Column   : word
  ,wRazdel  : word //тип области печати ведомости
)
with index
( tmp_print_shap01 = wRazdel+cDoc+Npp
 ,tmp_print_shap02 = cDoc+sTypeVed+NPP+Name_col
 ,tmp_print_shap03 = Name_col
 ,tmp_print_shap04 = wRazdel+Name_col
 ,tmp_print_shap05 = cDoc+Npp

);
// для агрегатов
Table struct tmp_print_SP
( cDoc     : tnrec
 ,NPP      : word
 ,Name     : string[200]
 ,sTypeVed : string[200]
 ,sRazdel  : string[200]
 ,Razdel   : word
 ,Title    : string[100]
 ,Value    : string[100]
)
with index
( tmp_print_SP01= cDoc +sTypeVed +Title+ Name+ NPP
 ,tmp_print_SP02= cDoc +sTypeVed +Name+ NPP+ Title
);
//---------- Для итогового отчета
Table struct tmp_Print_line
(  wRazdel  :word      //Номер раздела
  ,GrPers  :string[20] //Группа работников
  ,Podr_kod:string[20] //Подразделение, №
  ,Tabn    :string[20] //Таб. №
  ,TabnOld :string[20] //Таб. №
  ,Fio     :string[50] //Ф.И.О.
  ,Post    :string[200]// Должность/ профессия
  ,Kateg   :string[20] //Кат.перс.
  ,fArrVal :array[1..GP_KPI_Doc_Max_FLD_SP] of string[100]
  ,SuItog  :double
/*
Начислено ОЗ, руб.
Фактический % премии сотрудников за качество и дисциплину труда
Размер премии сотрудников за качество и дисциплину труда, руб.
Коэффициент выполнения показателей премирования
% премии за результаты работы подразделения и результаты работы работника
Коэффициент оценки личной результативности работника
Размер премии за результаты работы подразделения и результаты работы работника,руб.
% премии из фонда руководителя
Размер премии из фонда руководителя,руб.
Из фонда руководителя,руб.
Коэффициент выполнения показателей премирования для О.П.
Фактический % премирования за выполнение показателей для О.П.
Размер премии за выполнение показателей для О.П.
ИТОГО премия,руб.
*/
)
with index
( tmp_Print_line01=wRazdel+GrPers+Fio
 ,tmp_Print_line02=wRazdel+GrPers+Tabn
 ,tmp_Print_line03=wRazdel+GrPers+Podr_kod+Fio+Tabn+Post
);
//----------------------------------------
Table struct tmp_print_fond
( sFond  :string[100]
 ,cFond  :comp
 ,sGrRab :string[100]
 ,cGrRab :comp
 ,Econom:double //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
 //   и фонду премирования руководителя с начала периода, руб.
 ,SuProc:double //% на поощрение
 ,SuUse :double //Использование экономии по фондам, руб.
 ,SuRas :double //Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
 ,SuZGD :double //Выделено из фонда руководителя функционального направления, руб.
 ,SuDop :double //Доп.фонд по инициативным заказам и проч., руб.
 //Премия текущего месяца
 ,CurPlan :double //План, руб.
 ,CurFact :double //Факт, руб.
 ,CurOst :double //Остаток, руб.
)
with index
( tmp_print_fond01 = sFond+sGrRab
);
//----------------------------------------
var
//----------------------------------------
// объекты
//----------------------------------------
  iKPIReport          : KPIReport New;
  iGP_VisibleHidden   : GP_VisibleHidden;     // скрыть/показать поля
  DataProtector       : IGP_Protector2;//защита полей от модификации
  UserAccessService   : GP_UserAccessService NoAuto;//cgiSingleEdit
  StatusChange        : GP_StatusChange NoAuto;
  Status              : GP_Status NoAuto;
  pMarker:IMarker(Marker) new;
  iCatFunc            : CatalogsFunctions;   // Переменная типа интерфейс CatalogsFunctions
  iGp_KPI_ALG         : Gp_KPI_ALG_Calc New;
  viCYPersons         : ChoiseYourPersons;
  CS: IContextSession; // для захвата прикладного контекста табеля
  //-- пометка подразделения
  CLSF: CurLSFunctions;
  DA: IDepartmentAvailability(CurLSFunctions);
  // список разрешенных групп подразделений
  ADGL:             IAllowedDepartmentGroupList;

  _PodrMArkerPointer        : Longint; // сам маркер по подразделениям
  isPodrShare               : boolean;
//----------------------------------------
  wTypeDoc:word;//тип ведомости
  wTypeDoc_Status:word;//тип ведомости
  wIntMode:word; //тип запуска
  wVisibleRun : boolean;//Режим запуска = True через RunInterface
  cRec    :Comp   ; // ссылка на ведомость
  cRecSp  :Comp   ; // ссылка на Спецификацию
  isOpenSearch:boolean; //признак запуска быстрого выбора
  isProtect,isProtect2 :boolean; //защищенный выбор
  RoleGroupName    :string;
  boWinEdit        :boolean;//признак открытия окна редактирования
  boLocked         :boolean;//признак, что запись заблокирована другим пользователем
  boImmediately_SP :boolean;//True обновлять s SetFieldValue
  wParamCalc       :word;//параметры расчета ведомости
  wParamPrint      :word;//параметры печати
  sUserName        :string;//= UserName()
  fCurMainFormat    :longint; // список документов   - определить в CmInit
  fCurMainFormatEdit:longint; // окно редактирования - определить в CmInit
  count_oper:longint;// кол-во операций - например при расчете
  wTypeRep:word;
  boLoadZar:boolean;//загрузка ЗП
  //---------------------
  boRep01Nastr:boolean;//Есть настройка отчета 1 в полях
  //---------------------
  VA_GP_KPI_DOC_LOCK :comp;
  //---------------------
  #include Excel_Var.vpp
  //---------------------
  sArrFieldSpMask:Array[1..GP_KPI_Doc_Max_FLD_SP] of string; //массив масок ввода

 //--- ссылки на документ
  pGP_KPI_DOC:comp;
  pGP_KPI_DOC_SP:comp;
  //-----------------------------------------
  // настройки
  //-----------------------------------------
   USER_FIO :string; //User.Fio
   UP_STAFF_CATALOGS_SeniorExecutive:comp;//Доп.характеристика "Руководитель высшего звена"'
   UP_STAFF_CATALOGS_MiddleManager  :comp;//', 'Доп.характеристика "Руководитель среднего звена"
   NPOEM_OWN_Raise_Protect :word;//Использовать ограничения по подразделениям
   CanEditINClosePeriod    :boolean;//Разрешить доступ к ведомостям в закрытых периодах
  //-----------------------------------------
  // Фильтры - базовые
  //-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
   isFilterRun  :boolean;////признак работы ограничений
   wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :longint;
   #mrkfld_(KatPodr)
   #mrkfld_(Status)

   pKatpodr_Flt   :comp;
   pStatus_Flt    :comp;

   //-----------------------------
   pTmp:comp;

create view
as select GP_KPI_doc.Nrec,tmp_Staff_Raise.*
From
  GP_KPI_Doc
// ломается выборка
//, GP_KPI_Doc GP_KPI_Doc_F
, GP_KPI_Doc_SP
, KatPodr
, Gp_TypeDocs
, Gp_TypeDocs Gp_TypeDocs_Find
, GP_StatusChangeLog
, x$users
, Persons Executor // исполнитель
, StaffStruct,Catalogs ChiefPost,Catalogs ChiefDep // должность ответственного
, tmp_err(tmp_err01)
//---------- Печать
, tmp_print
, tmp_print_sp
, tmp_print_shap
, tmp_Staff_Raise
, tmp_Print_line (Tmp_print_line03)
, tmp_Print_line tmp_Print_line02(Tmp_print_line03)
, tmp_print_fond(tmp_print_fond01)
//------- фильтры
 , Katpodr        Katpodr_Flt
 , Katpodr        Katpodr_Flt_Up
 , GP_Status      Status_Flt

where ((
    wTypeDoc == GP_KPI_DOC.wType
and GP_KPI_DOC.cKatpodr == Katpodr.Nrec
and GP_KPI_DOC.cStatus  == Gp_Status.Nrec
//-------------------------
and GP_KPI_Doc.cCreator == x$users.Atl_nrec
and GP_KPI_Doc.cExecutor== Executor.NRec
//-- ответственный
and GP_KPI_Doc.cChiefStaffStr== StaffStruct.NRec
and StaffStruct.Post         == ChiefPost.NRec
and StaffStruct.Department   == ChiefDep.NRec

//---------------------------------------
and GP_KPI_DOC.wType    == Gp_TypeDocs.wType(noindex)
//and GP_KPI_Doc.wType    == GP_KPI_Doc_F.wType
//and GP_KPI_Doc.cKatPodr == GP_KPI_Doc_F.cKatPodr
//надо pGP_KPI_Doc_F == GP_KPI_Doc_F.Nrec
//---------------
and wTypeDoc_Status == Gp_TypeDocs_Find.wType(noindex)
//-------------------------
and GP_KPI_DOC.Nrec     == GP_KPI_DOC_SP.cGP_KPI_DOC
//---------------
and coGP_KPI_Doc    == GP_StatusChangeLog.wTbl
and GP_KPI_Doc.Nrec == GP_StatusChangeLog.cDoc
//------------------------
and tmp_print.cDoc    == tmp_print_sp.cDoc
and tmp_print.sTypeVed == tmp_print_sp.sTypeVed
and tmp_print.cDoc    == tmp_print_shap.cDoc
and tmp_print.sTypeVed == tmp_print_shap.sTypeVed
//Для итогового отчета
and 1 == tmp_Print_line.wRazdel
and 2 == tmp_Print_line02.wRazdel
//------- фильтры
and wc_nrec == Katpodr_Flt.Nrec
and Katpodr_Flt.cPodr == Katpodr_Flt_Up.Nrec
and wc_nrec == Status_Flt.Nrec

))
bounds byOne       pGP_KPI_DOC == GP_KPI_Doc.Nrec
;
Parameters
  wTypeDoc
#doc
  тип ведомости
#end
,  wIntMode
#doc
#end
, cRec
#doc
, возвращаемый параметр - ведомость
#end
, cRecSP
#doc
, возвращаемый параметр - спецификация
#end
;


//--------------------------------
Create  view vZar_User
var
   pPodr:comp;
as select Zar_User.Nrec
From
   Zar_User
  ,GP_USERRIGHTS
where
((   sUserName  == Zar_User.OwnName
and  sUserName  == GP_USERRIGHTS.OWNNAME
and  pPodr      == GP_USERRIGHTS.crecds
and  0          == GP_USERRIGHTS.wType
));


//--------------------------------
Create view vApp
var
  pPodr:comp;
  DTBeg:date;
  DTEnd:date;
as select Appointments.Nrec,tmp_Staff_Raise.*
From
  Appointments(APNTSTATUS06)
 ,extcatlinks
 ,Appointments Appointments_Next
 ,Appointments Appointments_Zam
 ,StaffStruct
 ,tmp_Staff_Raise
where
((
    11               == extcatlinks.objtype
and 1                == extcatlinks.modtype
and pPodr         == extcatlinks.extcat
and extcatlinks.staffcat  == Appointments.Department
and 0 << Appointments.Person(NoIndex)
and DTEND>>=Appointments.AppointDate(NoIndex)
and ( (Appointments.lPrizn=0
      or Appointments.lPrizn=2 // Заместительства
      or Appointments.lPrizn=3 // Совмещение
      or Appointments.lPrizn=Integer(100) //предыдущие
      or Appointments.lPrizn=integer(70)  //временные
         )
   and ( (Appointments.lPrizn<>2 and  (if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)=ZeroDate or if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)>=DTBEG ))
      or (Appointments.lPrizn=2 and  (Appointments.DATEEND=ZeroDate or Appointments.DATEEND>=DTBEG ))
    )
   )

//----------------------------
and Appointments.Person == Appointments_Zam.Person
and 2                   == Appointments_Zam.LPrizn
and DTBEG>> Appointments_Zam.AppointDate(Noindex)
and (Appointments_Zam.DATEEND>=DTBEG or Appointments_Zam.DATEEND=ZeroDate  )
and Appointments.StaffStr == tmp_Staff_Raise.StaffStr
and Appointments.StaffStr == StaffStruct.Nrec
//--------------------
and Appointments.LPrizn == Appointments_Next.LPrizn
and Appointments.Person == Appointments_Next.Person
and Appointments.AppointDate <<Appointments_Next.AppointDate
and Appointments.cAddNrec2 == Appointments_Next.cAddNrec2(noindex)
and ( Appointments_Next.AppointDate<=DTEND  )
//--------------------
))
bounds byDepartRukTmp  extcatlinks.staffcat  ==tmp_Staff_Raise.Department_To
//000A0000001AC1B7h Т. , старое 000A0000001A2263h
bounds byDepartRukApp  tmp_Staff_Raise.StaffStr ==Appointments.StaffStr
      and DTEND>>=Appointments.AppointDate(NoIndex)
    and ( (  Appointments.lPrizn=0
          or Appointments.lPrizn=2 // Заместительства
          or Appointments.lPrizn=3 // Совмещение
          or Appointments.lPrizn=Integer(100) //предыдущие
          or Appointments.lPrizn=integer(70)  //временные
          )
      and ( (Appointments.lPrizn<>2 and  (if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)=ZeroDate or if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)>=DTBEG ))
         or (Appointments.lPrizn=2 and  (Appointments.DATEEND=ZeroDate or Appointments.DATEEND>=DTBEG ))
          )
       )
;//Create view vApp

//-----------------
Create view vRaise
var
  DTBeg:date;
  DTEnd:date;
  pDoplata:comp;
  pAppoint:comp;
as select GP_KPI_RAISe.Nrec
from
 GP_KPI_RAISe
 //, Raise
 , Appointments,GP_TarStavExt,TARSTAV
 , GP_KPI_Pers_Raise
 , GP_KPI_Raise_STS_SP

where ((
      pDoplata == GP_KPI_RAISe.Nrec
/*and   pAppoint == Raise.Appoint
and   GP_KPI_RAISe.cDoplata == Raise.RaiseType(noindex)
and   DTEnd>>=Raise.FromDate(noindex)
and  ( Raise.ToDate=ZeroDate or DTBEG<=Raise.ToDate )
*/
//-------------------------
and   pAppoint == GP_KPI_Pers_Raise.cAppoint
//будем смотреть все and   GP_KPI_RAISe.cDoplata == GP_KPI_Pers_Raise.cDoplata(noindex)
and   DTEnd>>=GP_KPI_Pers_Raise.FromDate(noindex)
and  ( GP_KPI_Pers_Raise.ToDate=ZeroDate or DTBEG<=GP_KPI_Pers_Raise.ToDate )
//----------------
and Appointments.StaffStr == GP_KPI_Raise_Sts_SP.cStaffStruct
and   DTEnd>>=GP_KPI_Raise_STS_SP.DataN(noindex)
and  ( GP_KPI_Raise_STS_SP.DatOk=ZeroDate or DTBEG<=GP_KPI_Raise_STS_SP.DatOk )
//----------------
and  pAppoint == Appointments.Nrec
and  Appointments.TARIFF == TARSTAV.Nrec
and  Appointments.TARIFF == GP_TarStavExt.cTarStav

)); //Create view vRaise

//-----------------
Create view vRaise_102
var
  pDoplata:comp;
  DTBeg:date;
  DTEnd:date;
from
  GP_KPI_RAISe,GP_KPI_Pers_Raise
 ,Appointments,Persons
 ,StaffStruct
where ((
      pDoplata == GP_KPI_RAISe.Nrec
and   GP_KPI_RAISe.cDoplata == GP_KPI_Pers_Raise.CDOPLATA(noindex)
//будем смотреть все and   GP_KPI_RAISe.cDoplata == GP_KPI_Pers_Raise.cDoplata(noindex)
and   DTEnd>>=GP_KPI_Pers_Raise.FromDate(noindex)
and  ( GP_KPI_Pers_Raise.ToDate=ZeroDate or DTBEG<=GP_KPI_Pers_Raise.ToDate )
and  GP_KPI_Pers_Raise.cAppoint==Appointments.Nrec
and DTEND>>=Appointments.AppointDate(NoIndex)
and ( (Appointments.lPrizn=0
      or Appointments.lPrizn=2 // Заместительства
      or Appointments.lPrizn=3 // Совмещение
      or Appointments.lPrizn=Integer(100) //предыдущие
      or Appointments.lPrizn=integer(70)  //временные
    )
   and ( (Appointments.lPrizn<>2 and  (if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)=ZeroDate or if(Appointments.lPrizn=integer(70),Appointments.DATEEND ,Appointments.DisMissDate)>=DTBEG ))
      or (Appointments.lPrizn=2 and  (Appointments.DATEEND=ZeroDate or Appointments.DATEEND>=DTBEG ))
       )
    )
and  Appointments.StaffStr == StaffStruct.Nrec
and  GP_KPI_Pers_Raise.cPersons == Persons.nrec
));


create view vContDoc
var pContDoc:comp;
as select ContDoc.Nrec
From ContDoc
 , ContDoc Contdoc2
where ((
// по РПД 3(Заместительство) Appointments.Lprizn=2,
// если был установлен флаг "Не передавать в рабочую корзинУ"
//  ((ContDoc2.wDop and 010b) > 0)    (fieldname = fNotSignal),
// то пропустим
 pContdoc/*Appointments.cCont*/  == ContDoc.Nrec
and ContDoc.cPart       == ContDoc2.cPart
and ContDoc.TypeOper    == ContDoc2.TypeOper
and ContDoc.Person      == ContDoc2.Person
and Integer(1)          << ContDoc2.SeqNmb
and ContDoc.wRec        == ContDoc2.wRec(noIndex)

));

//******************************************************************************
// Функции
//******************************************************************************
  //---------------------
  #include Excel_Fun.vpp
  //---------------------


//-----------------------------------------------------
// по РПД 3(Заместительство), если был установлен флаг "Не передавать в рабочую корзинУ"
//  ((ContDoc2.wDop and 010b) > 0)    (fieldname = fNotSignal),
// то пропустим с типом 2
//-----------------------------------------------------
Function  Check_NoZarSignal(_pContDoc:comp):boolean;
{ Result:=false;
  vContDoc.pContDoc:=_pContDoc;
  if vContDoc.getfirst ContDoc=tsok
    if vContDoc.getfirst ContDoc2=tsok
      Result:=((vContDoc.ContDoc2.wDop and 010b) > 0)
}
//-----------------------------------------------------
// Для проверки архивности подразделений
//-----------------------------------------------------
Function Check_KatPodr_Arh(_pPodr:comp;_PeriodBegin:date):boolean;
{ Result:=GetKatPodr_isArh_On_Date(_pPodr,_PeriodBegin);
} //Function Check_KatPodr_Arh(_pPodr:comp;_PeriodBegin:date):boolean;


//-----------------------------------------------------
// Для поиска вышестоящего подразделения
//-----------------------------------------------------
Function GetKatPodrUp(_PKatPodr:comp):comp; cacheable;
{ Result:=_PKatPodr;
  set wc_nrec:=_PKatPodr;
  if getfirst KatPodr_Flt<>tsok exit;
  if pos('-',KatPodr_flt.kod)>0
  { Result:=GetKatPodrUp(KatPodr_flt.cPodr);
  }
} //Function GetKatPodrUp(_PKatPodr:comp):comp

Function FindZGD(_PKatPodr:comp; Flag_ZGD:boolean=false) :comp;cacheable;
var
   _pCatalogs:comp;
   _pnrec :comp;
{ Result:='';
  set wc_nrec:=_PKatPodr;
  if getfirst KatPodr_Flt<>tsok exit;
  _pCatalogs:=GetCatalogsByKatPodr(wc_nrec);
  _pnrec:=coGetAttr(coCatalogs,_pCatalogs,'Верхний уровень иерархии');
  if KatPodr_Flt.cPodr<>0 and _pNrec=0
  { Result:=FindZGD(KatPodr_Flt.cPodr,Flag_ZGD);
  }
  else
  { Result:=wc_nrec;
  }
  /* переделано на внешние атрибуты
  if Flag_ZGD
  { if pos('-',KatPodr_Flt.Kod)=0
    { Result:=wc_nrec;
      Exit;
    }
  }
  Result:=FindZGD(KatPodr_Flt.cPodr,pos('-',KatPodr_Flt.Kod)=0 or Flag_ZGD);
  */
} //Function FindZGD(_pDep:comp) :string;cacheable;


//-----------------------------------------------------
// Поиск следующего номера документа
//-----------------------------------------------------
function GetNextDocNumber(InYear:word):string;
{
  result:='';
  sql
    select max(GP_KPI_Doc.DocNumber)
    from GP_KPI_Doc
    where(:(InYear)=GP_KPI_Doc.wYear and GP_KPI_Doc.wType=:(wTypeDoc))
    and GP_KPI_Doc.DocNumber<>' КИС_Импорт'
    into (result);

  if (Trim(result)='')
    result:='000001'
  else
    result:=NextNumStr(result);
} //function GetNextDocNumber(InYear:word):string;

  //-------------------------------------------------
  // инициализировать зарплату
  //-------------------------------------------------
  Procedure Init_Zar;
  {  if boLoadZar exit;
     boLoadZar:=true;
     var CL: ContextList;
     if (not CL.Add(CS, 'IntInit'))
     {
     }
     Timelog('Init_Zar');
  } //Procedure Init_Zar;

//---------------------------------------
// Переключение сканирования подразделения
//---------------------------------------
Function SwitchAppScan(boDepart:boolean):boolean;
{ Result:=false;
  if boDepart
  { if vApp.BoundActive(vApp.tbbyDepartRukTmp)
    {
      vApp.ResetBounds(vApp.tntmp_Staff_Raise);
      vApp.PushBounds(vApp.tnAppointments);
      vApp.PushBounds(vApp.tntmp_Staff_Raise);
      Timelog('GP_KPI_Doc_Base->SwitchAppScan boDepart');
    }
  }
  else
  { if not vApp.BoundActive(vApp.tbbyDepartRukTmp)
    {  vApp.PushBounds(vApp.tbbyDepartRukTmp);
       vApp.PushBounds(vApp.tbbyDepartRukApp);
      Timelog('GP_KPI_Doc_Base->SwitchAppScan not boDepart');

    }
  }
  Result:=true;
} //Function SwitchAppScan(boDepart:boolean);

  SQL QUERY SqlTmp_Staff_App =
    SELECT DISTINCT
        StaffStruct.Department as Department
      , StaffStruct.Nrec       AS StaffStr
      , StaffStruct_To.Department as Department_To
      , StaffStruct_To.Nrec       AS StaffStr_Tp
    From AttrNam
    Inner join AttrVal on AttrVal.cAttrNam =AttrNam.Nrec
    Inner join StaffStruct on StaffStruct.Nrec = AttrVal.cRec
    Inner join StaffStruct StaffStruct_To on StaffStruct_To.Nrec = AttrVal.vComp
    Where (:PAttrNam = AttrNam.Nrec )
   ;

//------------------------------------
// Заполнить временную таблицу
//------------------------------------
Function Filltmp_Staff_Raise:boolean;
{ //vApp.ResetBounds(vApp.tntmp_Staff_Raise);
  Delete all tmp_Staff_Raise;
  var _PAttrNam:comp;
  _PAttrNam:=  ExtAttr_CreateComp  (coStaffStruct,'Должность руководителя для премии',
                                         cgAttrType_Comp,cgKatKau_System,coStaffStruct);
#IFDEF GP_KPI_BASE_DEBUG
      Timelog('GP_KPI_Doc_Base->FillTmp_Staff_App:_PAttrNam='+string(_PAttrNam,0,0));
#ENDIF

  var _wErr:Longint;// код ошибки установки свойств
  var stmt:Longint;
  var ExecuteErrorCode : longint;
  var ww_str:string='';
  Result:=False;
  _try
  {
      // вставка в Tmp_Staff_App
      stmt :=0;
      stmt := sqlAllocStmt;
      ExecuteErrorCode:=sqlPrepare(stmt,SqlTmp_Staff_App);
#IFDEF GP_KPI_BASE_DEBUG
      Timelog('GP_KPI_Doc_Base->FillTmp_Staff_App:ExecuteErrorCode 001='+string(ExecuteErrorCode));
#ENDIF
      if ExecuteErrorCode=0
      { sqlBindParamByName(stmt,'PAttrNam',   comp(_pAttrNam));
        ExecuteErrorCode:=SqlExecute(stmt);
#IFDEF GP_KPI_BASE_DEBUG
        Timelog('GP_KPI_Doc_Base->FillTmp_Staff_App:ExecuteErrorCode 004='+string(ExecuteErrorCode));
#ENDIF
        if ExecuteErrorCode=0
        { ExecuteErrorCode:=SqlFetchIntoByName(stmt,#tmp_Staff_Raise);
#IFDEF GP_KPI_BASE_DEBUG
          Timelog('GP_KPI_Doc_Base->FillTmp_Staff_App:ExecuteErrorCode 005='+string(ExecuteErrorCode)
              +', отобрали '+String(RecordsInTable(tntmp_Staff_Raise)));
#ENDIF
        }
      }
      //ExecuteErrorCode := q.Execute.ErrorCode;
   } // try
   _finally
   {
     if (ExecuteErrorCode <> 0)
        Message ('Ошибка при выполнении SQL-сценария (Вставка записей в TMP_Staff_App): код = ' + String(ExecuteErrorCode));
     else
        Result:=True;
   } // _finally
#IFDEF GP_KPI_BASE_DEBUG
   _Loop tmp_Staff_Raise //where (( 000A0000001A2EA3h == tmp_Staff_Raise.StaffStr ))
     Timelog('GP_KPI_Doc_Base->FillTmp_Staff_App:tmp_Staff_Raise='+
           string(tmp_Staff_Raise.Department,0,0) // ссылка на подразделение СЕШР
      +','+string(tmp_Staff_Raise.StaffStr,0,0)// ссылка на вакантную должность
      +','+string(tmp_Staff_Raise.Department_to,0,0) // ссылка на подразделение Руководителя
      +','+string(tmp_Staff_Raise.StaffStr_to,0,0) );

#ENDIF
  // vApp.SetBounds(vApp.tntmp_Staff_Raise);

} //Function Filltmp_Staff_Raise:boolean;

//------------------------------------
// Заблокировать запись
//------------------------------------
function fnLockCurrAndMsg(_bShowMsg: boolean = true): integer;
{
  UnLockAll(#GP_KPI_DOC);
  result := LockCurrent(#GP_KPI_DOC);
  if result <> tsOk
  { if _bShowMsg
      Message('Ведомость заблокирована другим пользователем!', Information);
  }
  else
  { sSetAttrID(coGP_KPI_DOC,GP_KPI_DOC.Nrec,VA_GP_KPI_DOC_LOCK,USER_FIO);
  }
  boLocked:=result <> tsOk;
}


//---------------------------------------
// Разрешение на редактирование
//---------------------------------------
Function CanEditTbl:boolean;
{
  Result:=(wIntMode and cgiNotEdit)=0;
  if not wVisibleRun exit;

  if wTypeDoc=100
  { Result:=false;
    exit;
  }
  //Приказ заблокирован другим пользователем!
  if not Result then Exit;
  if not isValid(#GP_KPI_Doc) then Exit;
  // Настройка 'NPOEM_OWN.Raise.CanEditINClosePeriod', 'Разрешить доступ к ведомостям в закрытых периодах'
  if not CanEditINClosePeriod
  { if GP_KPI_Doc.wYear<YearRas
    { Result:=false;exit;
    }
    if GP_KPI_Doc.wYear=YearRas and GP_KPI_Doc.wMonth<MonthRas
    { Result:=False;exit;
    }
  }
  if not (UserAccessService.CanEdit(GP_KPI_DOC.cStatus))
  { Result:=False; exit;
  }
  if boWinEdit
  { if fnLockCurrAndMsg(false)<>tsok
      Result:=false;
  }
} //Function CanEditTbl:boolean;

procedure SetEditMode(Value: boolean);
{ if not wVisibleRun exit;
  if isProtect=not Value exit;
  DataProtector.SetProtected(not Value);
  if Value
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpBlueWindow);
  else
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpCyanWindow);
  isProtect:=not Value;
} //Procedure SetEditMode(_isEdit:boolean);



Function Status_Init(_wType:word):boolean;
{ Result:=False;
  if wTypeDoc_Status<>_wType
  or (Status=NullRef)
  { wTypeDoc_Status:=_wType;
    if getfirst GP_TypeDocs_Find<>tsok then exit;
    //if (Status=NullRef)
    Status:=New(GP_Status,InitForTypeDoc(GP_TypeDocs_Find.Name));
  }
  else Result:=True;
} //Function Status_Init(_wType:word):boolean;


//-------------------------------------
// Установить статус
//-------------------------------------
function ChangeStatus(pDoc:comp;StatusChangeLog:type$GP_StatusChangeLog):boolean;
var Rez:integer;
{
  result:=false;
  Status_Init(GP_KPI_DOC.wType);
  //Начало транзакции
  Rez:=BeginConcurrentTransaction(trNoLock);
  if (Rez<>tsok)
    message('Ошибка открытия транзакции - '+string(Rez),error);
  else {
    GP_StatusChangeLog.buffer:=StatusChangeLog;
    GP_StatusChangeLog.NRec:=0;
    GP_StatusChangeLog.wTbl:=coGP_KPI_Doc;
    GP_StatusChangeLog.cDoc:=pDoc;
    GP_StatusChangeLog.DateOper:=_CurDateTime;
    GP_StatusChangeLog.cUser:=UserId;
    Rez:=insert current GP_StatusChangeLog;
    if (Rez<>tsok)
      message('Ошибка вставки записи в таблицу GP_StatusChangeLog - '+string(Rez),error);

    if (Rez=tsok) {
      Rez:=update GP_KPI_Doc where((pDoc==GP_KPI_Doc.NRec)) set
             GP_KPI_Doc.cStatus:=StatusChangeLog.cStatusTo;
      if (Rez<>tsok)
        message('Ошибка модификации записи в таблице GP_KPI_Statements - '+string(Rez),error);
    }

    if (Rez=tsok) {//Запись в БД
      Rez:=EndTransaction;
      if (Rez<>tsOK)
        message('Ошибка завершения транзакции - '+string(Rez),error);
      result:=Rez=tsok;
    } else {//Откат
      Rez:=AbortTransaction;
      if (Rez<>tsOK)
        message('Ошибка отката транзакции - '+string(Rez),error);
    }
  }
} //function ChangeStatus(pDoc:comp;StatusChangeLog:type$GP_StatusChangeLog):boolean;

//----------------------------------
//1754
Function GetPodrShare :boolean;
{ Result:=false;
  case NPOEM_OWN_Raise_Protect of
  0,2:  Result:= vZar_User.ZAR_USER.PODRSHARE = '+';
  end;
}//Function PodrShare :boolean;

//------------------------------------
// Доступность подразделения по зарплатным правам.
// 1754
//------------------------------------
Function EnablePodr(_cPodr:comp) :boolean; cacheable;
{ Result:=true;
  if _cPodr=0
  { exit;
  }
  case NPOEM_OWN_Raise_Protect of
  0: // по зарплате
  { Result:=DA.IsAvailable(_cPodr);
  }
  2:// делаем копию как то из DA
  { vZar_User.pPodr:=_cPodr;
    Result:=(vZar_User.RecordExists GP_USERRIGHTS)=tsok ;
  }
  3: // группы подразделений
  { // подразделения, относящиеся к одной из разрешенных групп
    Result:=ADGL.Has(KATPODR.CGRPODR);
  }
  end;
} //Function AVaiblePodr(_cPodr:comp) :comp; cacheable;


//------------------------------------
// Перед использованием нужно задать параметры во view vRaise
// VRaise.pDoplata
// VRaise.pAppoint
// VRaise.DTBRG
// VRaise.DTEND
//------------------------------------
Function CheckExistRaise(var _Summa:double;var _Reason:string):double;
var jj:word;
{ Result:=0;
  _Summa:=0;
  _Reason:='';
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run '+string(vRaise.GP_KPI_RAISe.cDoplata,0,0)+', '+vRaise.GP_KPI_RAISe.Name);
  timelog('CheckExistRaise  '+DateToStr(vRaise.DTBEG,'DD/MM/YYYY')+', '+DateToStr(vRaise.DTEND,'DD/MM/YYYY'));
#ENDIF
/*
  if vRaise.Getfirst Raise=tsok
  { if vRaise.Raise.RaiseAttr=2
    { Result:=vRaise.Raise.sum;
    }
    else
    if vRaise.Raise.RaiseAttr=0
    { _Summa:=vRaise.Raise.sum;
    }
    exit;
  }
*/
  if vRaise.Getfirst GP_KPI_Pers_Raise=tsok
  {
#IFDEF GP_KPI_BASE_DEBUG
    timelog('CheckExistRaise PERS ');
#ENDIF
    vRaise._Loop GP_KPI_Pers_Raise
    {
#IFDEF GP_KPI_BASE_DEBUG
      timelog('CheckExistRaise PERS '+string(vRaise.GP_KPI_Pers_Raise.Nrec,0,0));
#ENDIF
      if vRaise.GP_KPI_RAISe.cDoplata = vRaise.GP_KPI_Pers_Raise.cDoplata
      { Result:=vRaise.GP_KPI_Pers_Raise.Procent;
        _Summa:=vRaise.GP_KPI_Pers_Raise.Summa;
#IFDEF GP_KPI_BASE_DEBUG
        timelog('CheckExistRaise PERS '+string(Result,0,2)+','+string(_Summa,0,0));
#ENDIF
        //if Result<>0 or _Summa<>0
        break;
      }
    } //vRaise._Loop GP_KPI_Pers_Raise
    if _Summa=0 and Result=0
    { _Reason:='Персональные премии не попадают под тип ведомости';
    }
    exit;
  } //if vRaise.Getfirst GP_KPI_Pers_Raise=tsok
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run 001 '+string(vRaise.GP_KPI_RAISe.cDoplata,0,0));
#ENDIF
  if vRaise.GetFirst Appointments<>tsok exit;
  if vRaise.getfirst GP_KPI_Raise_STS_SP=tsok
  {
#IFDEF GP_KPI_BASE_DEBUG
    timelog('CheckExistRaise PERS_ST ');
#ENDIF
    vRaise._Loop GP_KPI_Raise_STS_SP
    {
#IFDEF GP_KPI_BASE_DEBUG
      timelog('CheckExistRaise PERS '+string(vRaise.GP_KPI_Raise_STs_SP.Nrec,0,0));
#ENDIF
      if vRaise.GP_KPI_RAISe.cDoplata = vRaise.GP_KPI_Raise_STS_SP.cDoplata
      { Result:=vRaise.GP_KPI_Raise_STS_SP.Procent;
        _Summa:=vRaise.GP_KPI_Raise_STS_SP.Summa;
        //договорились, что если премия есть по штатке, хоть и с 0
        //добавлять все равно
        //чтобы не плодить лишних параметров вернем -999
        if _Summa=0 and Result=0
        { Result:=-999;
        }
#IFDEF GP_KPI_BASE_DEBUG
        timelog('CheckExistRaise PERS '+string(Result,0,2)+','+string(_Summa,0,0));
#ENDIF
        //if Result<>0 or _Summa<>0

        break;
      }
    } //vRaise._Loop GP_KPI_Pers_Raise
    if _Summa=0 and (Result=0 and Result<>-999)
    { _Reason:='Премии по штатному расписанию не попадают под тип ведомости';
    }
    exit;
  } //if vRaise.Getfirst GP_KPI_Pers_Raise=tsok

  if vRaise.GetFirst fastfirstrow TARSTAV<>tsok
  { _Reason:='Нет привязки к тарифной сетки в назначении от '+DateToStr(vRaise.Appointments.AppointDate,'DD/MM/YYYY');
    exit;
  }
  timelog('CheckExistRaise Run 002 '+vRaise.TARSTAV.NAITAR);
  if vRaise.GetFirst fastfirstrow GP_TarStavExt<>tsok then exit;
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run 003');
#ENDIF

  for(jj:=1;jj<=3;jj++)
  {
#IFDEF GP_KPI_BASE_DEBUG
    timelog('CheckExistRaise jj='+string(jj)+','+string(vRaise.GP_TarStavExt.MonthlyBonus[jj])
        +', '+string(vRaise.GP_TarStavExt.cMonthlyBonusType[jj],0,0) );
#ENDIF
    if vRaise.GP_TarStavExt.MonthlyBonus[jj]>0
    { if vRaise.GP_TarStavExt.cMonthlyBonusType[jj]=vRaise.GP_KPI_RAISe.cDoplata
      {  Result:=vRaise.GP_TarStavExt.MonthlyBonus[jj];
         exit;
      }
    }
  } //for(jj:=1;jj<=3;jj++)
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run 004');
#ENDIF

  if vRaise.GP_TarStavExt.QuarterlyBonus>0
  { if vRaise.GP_TarStavExt.cQuarterlyBonusType=vRaise.GP_KPI_RAISe.cDoplata
    { Result:=vRaise.GP_TarStavExt.QuarterlyBonus;
      Exit;
    }
  } //if GP_TarStavExt.QuarterlyBonus>0
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run 005');
#ENDIF
  if vRaise.GP_TarStavExt.AnnualBonus>0
  { if vRaise.GP_TarStavExt.cAnnualBonusType=vRaise.GP_KPI_RAISe.cDoplata
    { Result:=vRaise.GP_TarStavExt.AnnualBonus;
      Exit;
    }
  } //if GP_TarStavExt.QuarterlyBonus>0
#IFDEF GP_KPI_BASE_DEBUG
  timelog('CheckExistRaise Run - не нашли');
#ENDIF
  if _Summa=0 and Result=0
  { _Reason:='в назначении от '+DateToStr(vRaise.Appointments.AppointDate,'DD.MM.YYYY')
       +', тариф '+vRaise.TarStav.NaiTar+DateToStr(vRaise.TarStav.DatIzm,' от DD.MM.YYYY')+' премии не попадают под тип ведомости';
  }

} //Function CheckExistRaise;

//---------------------------------
//получить период расчета премии
Function GetPeriodPrem(_TypePeriod:word;var _PeriodBegin:date;var _PeriodEnd:date;
  _wMonth:word=0; _wYear:word=0; _wKvartal:word=0;_WYEARKVARTAL:word=0; _wYearPrem:word=0 ):boolean;
{ Result:=true;
  if _wMonth  =0      _wMonth  :=GP_KPI_DOC.wMonth;
  if _wYear   =0      _wYear   :=GP_KPI_DOC.wYear;
  if _wKvartal=0      _wKvartal:=GP_KPI_Doc.wKvartal;
  if _WYEARKVARTAL=0  _WYEARKVARTAL:=GP_KPI_Doc.WYEARKVARTAL;
  if _wYearPrem=0     _wYearPrem:=GP_KPI_Doc.wYearPrem;

  _PeriodBegin:= Sub_Months(to_date(1,_wMonth,_wYear),wGetTune('NPOEM_OWN.Raise.ColMonthsForPremiya'));
  _PeriodEnd  := to_date(Last_day(_PeriodBegin),month(_PeriodBegin),year(_PeriodBegin));

  timelog('GetPeriodPrem income parameters ');
  timelog('  _TypePeriod   ='+ _TypePeriod   );
  timelog('  _PeriodBegin  ='+ _PeriodBegin  );
  timelog('  _PeriodEnd    ='+ _PeriodEnd    );
  timelog('  _wMonth       ='+ _wMonth       );
  timelog('  _wYear        ='+ _wYear        );
  timelog('  _wKvartal     ='+ _wKvartal     );
  timelog('  _WYEARKVARTAL ='+ _WYEARKVARTAL );
  timelog('  _wYearPrem    ='+ _wYearPrem    );


  case _TypePeriod of//[List
      0:{}// '-',
      1:{}// 'месяц',
      2:{
       _PeriodBegin:=date(1,1+(_wKvartal-1)*3,_WYEARKVARTAL);
       _PeriodEnd  :=date(1,_wKvartal*3,_WYEARKVARTAL);
       _PeriodEnd  :=date(Last_Day(_PeriodEnd),month(_PeriodEnd),year(_PeriodEnd));
      }// 'квартал'
      3:{
        _PeriodBegin:=date(01,01,_wYearPrem);
        _PeriodEnd  :=date(31,12,_wYearPrem);
      }// 'год',
      4:{
       if _WYEARKVARTAL<3
       { _PeriodBegin:=date(01,01,_wYearPrem);
         _PeriodEnd  :=date(30,06,_wYearPrem);
       }
       else
       { _PeriodBegin:=date(01,07,_wYearPrem);
         _PeriodEnd  :=date(31,12,_wYearPrem);
       }
      }//  'полугодие',
      5:{}// 'Разовая']
      end;
  timelog('     NPOEM_OWN.Raise.ColMonthsForPremiya = ' + wGetTune('NPOEM_OWN.Raise.ColMonthsForPremiya'));
  timelog('GetPeriodPrem outcome parameters ');
  timelog('  _TypePeriod   ='+ _TypePeriod   );
  timelog('  _PeriodBegin  ='+ _PeriodBegin  );
  timelog('  _PeriodEnd    ='+ _PeriodEnd    );
  timelog('  _wMonth       ='+ _wMonth       );
  timelog('  _wYear        ='+ _wYear        );
  timelog('  _wKvartal     ='+ _wKvartal     );
  timelog('  _WYEARKVARTAL ='+ _WYEARKVARTAL );
  timelog('  _wYearPrem    ='+ _wYearPrem    );

  Result:=true;
} //Function SetPeriod:boolean;

#undef GP_KPI_DOC_TypeRep
#declare GP_KPI_DOC_TypeRep
  wTypeRep :[List
      5 'FastReport итоговый NEW'  //KPI_DOC_PRN_Fast_IT_NEW
     ,4 'FastReport итоговый'  //KPI_DOC_PRN_Fast_IT
//    ,0 'FastReport'           //KPI_DOC_PRN_Fast
//    ,1 'Excel'                //KPI_DOC_PRN_Excel
//    ,2 'Excel - итоговый'     //KPI_DOC_PRN_Excel_It
//    ,3 'Excel - итоги+ план.%'//KPI_DOC_PRN_Excel_It_PL

    ] Protect;

#end


//---------------------------
// Задание параметров печати ведомостей на премирования
//---------------------------
Window wnParamPrint 'Параметры печати';
show at (5,10,55,17);
screen scParamPrint;
Table KatPodr_Flt;
Fields
  #GP_KPI_DOC_TypeRep
  wParamPrint :NoProtect;

Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Тип отчета`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  (.) Текущая закладка`
  (.) Все`

   <. Продолжить .>  <.   Отмена   .>
>>
end;
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnParamPrint,cmDefault);
}
end;
end;//wnParamPrint

Window wnParamPrintM 'Параметры печати';
show at (5,10,55,17);
screen scParamPrintM ;
Table KatPodr_Flt;
Fields
  #GP_KPI_DOC_TypeRep
Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Тип отчета`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   <. Продолжить .>  <.   Отмена   .>
>>
end;
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnParamPrintM,cmDefault);
}
end;
end;//wnParamPrint
#undef GP_KPI_DOC_TypeRep

//---------------------------
//
//---------------------------
Window wnCalcParam 'Задайте параметры расчета' , EscClose;
show at (5,10,55,17);
screen scCalcParaml;
Table KatPodr_Flt;
Fields
  wParamCalc ('Для пересчета вручную введенных показателей обращайтесь к Администратору БД') :NoProtect;
Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<

  [.] Подробный протокол`
  [.] Пересчитывать вручную введенные показатели`

 <. Продолжить .>  <.   Отмена   .>
>>
end;
HandleEvent
cmInit:
{
  ClusterDisabledField(#wParamCalc,if(pr_CurUserAdmin,0,2));
}
cmOk:
{ if not pr_CurUserAdmin
  { if IsbitCTW(wParamCalc,2)
    { Message('Для пересчета вручную введенных параметров'
        +chr(13)+'обратитесь к администратору БД' );

      BitOffW(wParamCalc,2);
    }

  }
  CloseWindowEx(wnCalcParam,cmDefault);
}
end;
end; //Window wnCalcParam

//-----------------------------------------------
// Рассчитать кол-во операция
//-----------------------------------------------
Procedure Calc_Count_Oper(bMulti:boolean);
var ii:longint;
{ var _count_oper:longint=0;
  if bMulti
  { For(ii:=0;ii<GetMarkerCount(Marker_Tmp);ii++)
    { if not GetMarker(Marker_Tmp,ii,pTmp)  continue;
      SQL select Count(*) From GP_KPI_DOC_SP where GP_KPI_DOC_SP.cGP_KPI_DOC=:(pTmp)
        into (_count_oper);
      count_oper:=count_oper+1+_count_oper;
    }
  }
  else
  { pTmp:=GP_KPI_DOC.Nrec;
    SQL select Count(*) From GP_KPI_DOC_SP where GP_KPI_DOC_SP.cGP_KPI_DOC=:(pTmp)
         into (_count_oper);
    count_oper:=count_oper+1+_count_oper;
  }

} //Procedure Calc_Count_Oper;

//-----------------------------------------------
// Рассчитать документ
//-----------------------------------------------
Function CalculateDoc(bMulti:boolean;bNeedParam:boolean=true;bRezerv:boolean=false) :Boolean;
var isAllOk:boolean;
    ii:longint;
{ UpdateTable;
  if Marker_Tmp=0
  { bMulti:=false;
  }
  if bMulti
  {
    timelog(' отобрано ведомостей '+String(GetMarkerCount(Marker_Tmp)));
    if GetMarkerCount(Marker_Tmp)=0
    {  bMulti:=false
    }
    else
    { if bNeedParam
      { if Message('Рассчитать текущую ведомость(Да)'
        +chr(13)+'или помеченные(Нет)?',YesNo)=cmYes
        { bMulti:=false;
        }
      }
    } //if pMarker.Count=0
  } //if bMulti
  isAllOk:=true;
  if bNeedParam
  { isAllOk:=RunWindowModal(wnCalcParam)=cmDefault
  }
  else
  { wParamCalc:=0;
  }

  If isAllOk
  { //displ иначе не работает
    Init_Zar;

    LockLogFile;
    displ('================');
    displ('Время начала расчета:'+TimeToStr(Cur_Time,'HH:MM:SS:SSS'));
    //посчитаем кол -во записей
    if count_oper=0 // - надо всегда
    { Calc_Count_Oper(bMulti);
    }
    //if count_oper=0
    StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm,'Расчет ведомостей',count_oper);
    count_oper:=0;
    timelog('GP_KPI_DOC_BASE->CalculateDoc Расчет ведомостей');
    if bMulti //Надо сначала набить маркер Marker_Tmp
    { PushPos(#Gp_KPI_Doc);
      For(ii:=0;ii<GetMarkerCount(Marker_Tmp);ii++)
      { if not NextVisual then break;
        if not GetMarker(Marker_Tmp,ii,pTmp)  continue;
        if getfirst GP_KPI_DOC where (( pTmp == GP_KPI_DOC.Nrec ))<>tsok continue;
         timelog('GP_KPI_DOC_BASE->CalculateDoc Расчет ведомостей '+GP_KPI_DOC.DocNumber);
        Status_Init(GP_KPI_DOC.wType);
        if not iNextVisual('Расчет ведомости '+GP_KPI_DOC.DocNumber) then break;
        if Gp_KPI_Doc.cStatus<>Status.GetDefault
        { displ('Ведомость '+GP_KPI_DOC.DocNumber+' не в оформляемом статусе');
          continue;
        }
        if not CanEditTbl
        { displ('Ведомость '+GP_KPI_DOC.DocNumber+' - установлен запрет на редактирование');
        }
        if fnLockCurrAndMsg(false)<>tsok
        { displ('Ведомость '+GP_KPI_DOC.DocNumber+' - редактируется '+
            sGetAttrID(coGP_KPI_DOC,GP_KPI_DOC.Nrec,VA_GP_KPI_DOC_LOCK));
          continue;
        }
        if not iGp_KPI_ALG.CalcDoc(GP_KPI_DOC.wType,GP_KPI_DOC.Nrec,IsBitCTW(wParamCalc,2),IsBitCTW(wParamCalc,1),bRezerv) break;
        timelog('GP_KPI_DOC_BASE->CalculateDoc Расчет ведомостей '+GP_KPI_DOC.DocNumber+' завершен');
      } //For(ii:=0;ii<GetMarkerCount(Marker_Tmp);ii++)
      PopPos(#Gp_KPI_Doc);
    } //if bMulti
    else
    { timelog('   Расчет одной ведомости');
      Status_Init(GP_KPI_DOC.wType);
      if Gp_KPI_Doc.cStatus<>Status.GetDefault
      { displ('Ведомость '+GP_KPI_DOC.DocNumber+' не в оформляемом статусе');
      }
      else
      if not CanEditTbl
      { displ('Ведомость '+GP_KPI_DOC.DocNumber+' - установлен запрет на редактирование');
      }
      else
      if fnLockCurrAndMsg(false)<>tsok
      { displ('Ведомость '+GP_KPI_DOC.DocNumber+' - редактируется '+
            sGetAttrID(coGP_KPI_DOC,GP_KPI_DOC.Nrec,VA_GP_KPI_DOC_LOCK));

      }

      else
      { iGp_KPI_ALG.CalcDoc(GP_KPI_DOC.wType,GP_KPI_DOC.Nrec,IsBitCTW(wParamCalc,2),IsBitCTW(wParamCalc,1),bRezerv);
      }
    } //else if bMulti
    if VisualizationActive
    StopVisual('',0);
    displ('Время окончания расчета:'+TimeToStr(Cur_Time,'HH:MM:SS:SSS'));
    UnLockLogFile;
    ShowErrors();
    Result:=True;
    ReReadRecord(#GP_KPI_DOC_SP);
    ReReadRecord(#GP_KPI_DOC);
  } //If RunWindowModal(wnCalcParam)=cmDefault
} //Function CalculateDoc(bMulti:boolean) :Boolean;

//****************************** DataStream ************************************
DataStream dtsKPI_DOC_BASE
//****************************** DataStream ************************************
(
  [CommonFormHeader ] CommonFormHeader; // Системный заголовок отчета
  table tmp_print
  ( [DocNumber]      tmp_print.DocNumber;
    [DocDate]        tmp_print.DocDate;
    [Name]           tmp_print.Name;
    [cDoc]           tmp_print.cDoc;
    [sTypeVed]       tmp_print.sTypeVed;
    [sRazdel]        tmp_print.sRazdel ;
    [wType]          tmp_print.wType;
    [wMonth]         tmp_print.wMonth;
    [wYear]          tmp_print.wYear;
    [wKvartal]       tmp_print.wKvartal;
    [WYEARKVARTAL]   tmp_print.WYEARKVARTAL;
    [Description]    tmp_print.Description;
    [Katpodr_Code]   tmp_print.Katpodr_Code;
    [Katpodr_Name]   tmp_print.Katpodr_Name;
    [ChiefPost_Name] tmp_print.ChiefPost_Name;
    [ChiefDep_Code]  tmp_print.ChiefDep_Code ;
    [Executor_Fio]   tmp_print.Executor_Fio;
    [Nrec]           tmp_print.cDoc;
    //------------------------
    table tmp_print_sp
    ( [NPP]    tmp_print_sp.NPP;
      [Name]   tmp_print_sp.Name;
      [Value]  tmp_print_sp.Value;
      [Title]  tmp_print_sp.Title;
      [Razdel] LPadCh(string(tmp_print_sp.Razdel),'0',2)+' '+tmp_print_sp.sRazdel;
    );
    //------------------------
    Table tmp_print_shap
    ( [Npp]      tmp_print_shap.Npp;
      [cDoc]     tmp_print_shap.cDoc;
      [Name_Col] tmp_print_shap.Name_Col;
      [sRazdel]  tmp_print_shap.sRazdel;
      [Vis]      tmp_print_shap.Vis;
      [Itogo]    tmp_print_shap.Itogo;
      [Razr]     tmp_print_shap.Razr;
      [Len]      tmp_print_shap.Len;
      [Option]   tmp_print_shap.Option;
      [Summa]    tmp_print_shap.Summa;
    );
  );
)
//------------------------------------------------------------------------------
HandleEvent     // DataStream dtsContrAct
cmPreProcess:
{
  //StartNewVisual (vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Формирование отчета', 1);
}
cmPostProcess:
{
  //StopVisual ('', 0);
}
end; // HandleEvent DataStream dtsU_RepStatis
end;// end DataStream


//****************************** DataStream ************************************
DataStream dtsKPI_DOC_IT
//****************************** DataStream ************************************
(
  [CommonFormHeader ] CommonFormHeader; // Системный заголовок отчета
  [Ved_Title] 'Ведомость премирования работников цеха/отдела '+Katpodr.Kod
         +' за '+string(GP_KPI_DOC.wMonth)+'.'+string(GP_KPI_DOC.wYear);
  [Ved_Title02] 'Ведомость премирования работников основного производства цеха/отдела '+Katpodr.Kod
         +' за '+string(GP_KPI_DOC.wMonth)+'.'+string(GP_KPI_DOC.wYear);
  [Ved_Date] string(GP_KPI_DOC.wMonth)+'.'+string(GP_KPI_DOC.wYear);
  [Podr_kod] KatPodr.Kod;
  [Description]    GP_KPI_DOC.Description;
  [Katpodr_Code]   Katpodr.Code;
  [Katpodr_Name]   Katpodr.Name;
  [ChiefPost_Name] ChiefPost.Name;
  [ChiefDep_Code]  ChiefDep.Code ;
  [Executor_Fio]   Executor.Fio;
  [Nrec]           GP_KPI_DOC.Nrec;
  [wTypeved]       wTypeRep;
  table Tmp_print_line
  (
    [GrPers   ] Tmp_print_line.GrPers ; //Группа работников
    [Podr_kod ] Tmp_print_line.Podr_kod ; //Подразделение, №
    [Tabn     ] Tmp_print_line.Tabn ; //Таб. №
    [Fio      ] MyGetInitial(Tmp_print_line.Fio,True) ; //Ф.И.О.
    [Post     ] Tmp_print_line.Post ;// Должность/ профессия
    [Kateg    ] Tmp_print_line.Kateg ; //Кат.перс.
    [fArrVal01] double(Tmp_print_line.fArrVal[01]);
    [fArrVal02] double(Tmp_print_line.fArrVal[02]);
    [fArrVal03] double(Tmp_print_line.fArrVal[03]);
    [fArrVal04] double(Tmp_print_line.fArrVal[04]);
    [fArrVal05] double(Tmp_print_line.fArrVal[05]);
    [fArrVal06] double(Tmp_print_line.fArrVal[06]);
    [fArrVal07] double(Tmp_print_line.fArrVal[07]);
    [fArrVal08] double(Tmp_print_line.fArrVal[08]);
    [fArrVal09] double(Tmp_print_line.fArrVal[09]);
    [fArrVal10] double(Tmp_print_line.fArrVal[10]);
    [fArrVal11] double(Tmp_print_line.fArrVal[11]);
    [fArrVal12] double(Tmp_print_line.fArrVal[12]);
    [fArrVal13] double(Tmp_print_line.fArrVal[13]);
    [fArrVal14] double(Tmp_print_line.fArrVal[14]);
    [fArrVal15] double(Tmp_print_line.fArrVal[15]);
    [fArrVal16] double(Tmp_print_line.fArrVal[16]);
    [fArrVal17] double(Tmp_print_line.fArrVal[17]);
    [fArrVal18] double(Tmp_print_line.fArrVal[18]);
    [fArrVal19] double(Tmp_print_line.fArrVal[19]);
    [fArrVal20] double(Tmp_print_line.fArrVal[20]);
    [SuItog   ] Tmp_print_line.SuItog;

    [Description]    GP_KPI_DOC.Description;
    [Katpodr_Code]   Katpodr.Code;
    [Katpodr_Name]   Katpodr.Name;
    [ChiefPost_Name] ChiefPost.Name;
    [ChiefDep_Code]  ChiefDep.Code ;
    [Executor_Fio]   Executor.Fio;
    [Nrec]           GP_KPI_DOC.Nrec;
  );
  //Основные рабочие ОП (236)
  table Tmp_print_line02
  (
    [GrPers   ] Tmp_print_line02.GrPers ; //Группа работников
    [Podr_kod ] Tmp_print_line02.Podr_kod ; //Подразделение, №
    [Tabn     ] Tmp_print_line02.Tabn ; //Таб. №
    [Fio      ] MyGetInitial(Tmp_print_line02.Fio,True) ; //Ф.И.О.
    [Post     ] Tmp_print_line02.Post ;// Должность/ профессия
    [Kateg    ] Tmp_print_line02.Kateg ; //Кат.перс.
    [fArrVal01] double(Tmp_print_line02.fArrVal[01]);
    [fArrVal02] double(Tmp_print_line02.fArrVal[02]);
    [fArrVal03] double(Tmp_print_line02.fArrVal[03]);
    [fArrVal04] double(Tmp_print_line02.fArrVal[04]);
    [fArrVal05] double(Tmp_print_line02.fArrVal[05]);
    [fArrVal06] double(Tmp_print_line02.fArrVal[06]);
    [fArrVal07] double(Tmp_print_line02.fArrVal[07]);
    [fArrVal08] double(Tmp_print_line02.fArrVal[08]);
    [fArrVal09] double(Tmp_print_line02.fArrVal[09]);
    [fArrVal10] double(Tmp_print_line02.fArrVal[10]);
    [fArrVal11] double(Tmp_print_line02.fArrVal[11]);
    [fArrVal12] double(Tmp_print_line02.fArrVal[12]);
    [fArrVal13] double(Tmp_print_line02.fArrVal[13]);
    [fArrVal14] double(Tmp_print_line02.fArrVal[14]);
    [fArrVal15] double(Tmp_print_line02.fArrVal[15]);
    [fArrVal16] double(Tmp_print_line02.fArrVal[16]);
    [fArrVal17] double(Tmp_print_line02.fArrVal[17]);
    [fArrVal18] double(Tmp_print_line02.fArrVal[18]);
    [fArrVal19] double(Tmp_print_line02.fArrVal[19]);
    [fArrVal20] double(Tmp_print_line02.fArrVal[20]);
    [SuItog   ] Tmp_print_line02.SuItog;

  );
  table Tmp_print_Fond
  (
   [sFond  ] Tmp_print_Fond.sFond;
   [cFond  ] Tmp_print_Fond.cFond;
   [sGrRab ] Tmp_print_Fond.sGrRab;
   [cGrRab ] Tmp_print_Fond.cGrRab;
   [Econom ] Tmp_print_Fond.Econom; //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
   //   и фонду премирования руководителя с начала периода, руб.
   [SuProc] Tmp_print_Fond.SuProc;//% на поощрение
   [SuUse ] Tmp_print_Fond.SuUse;//Использование экономии по фондам, руб.
   [SuRas ] Tmp_print_Fond.SuRas;//Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
   [SuZGD ] Tmp_print_Fond.SuZGD;//Выделено из фонда руководителя функционального направления, руб.
   [SuDop ] Tmp_print_Fond.SuDop;//Доп.фонд по инициативным заказам и проч., руб.
   //Премия текущего месяца
   [CurPlan ] Tmp_print_Fond.CurPlan; //План, руб.
   [CurFact ] Tmp_print_Fond.CurFact; //Факт, руб.
   [CurOst  ] Tmp_print_Fond.CurOst; //Остаток, руб.

  );

)
//------------------------------------------------------------------------------
HandleEvent     // DataStream dtsContrAct
cmPreProcess:
{
//  StartNewVisual (vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Формирование отчета', 1);
}
cmPostProcess:
{
//  StopVisual ('', 0);
}
end; // HandleEvent DataStream dtsU_RepStatis
end;// end DataStream



//-------------------------------------------------------
// Печать итогового отчета в FastReport
// Заточен под вывод одного документа
//-------------------------------------------------------
Function PrintDocumentFast:boolean;
var FReport: LongInt;
    ReportNames: array [0..0] of String;
#IFDEF _2019_02_13_
    ExportParam:String;
#ELSE
    ExportParam:frxPDFExportParam;
#ENDIF
{ Result:=True;
  var boPrintToPDF:boolean=true;
  Fill_Tmp_Print_Fond;

  if ExistTune('NPOEM_OWN.Raise.Print2Pdf')
     boPrintToPDF:=boGetTune('NPOEM_OWN.Raise.Print2Pdf');
  if not boPrintToPDF
  { RunFReportByGroup(dtsKPI_DOC_IT,'DOCS'+LPadCh(string(wTypeDoc),'0',3));
  }
  else
  { FReport := FRCreate(dtsKPI_DOC_IT);
    FRGetReportNames(FReport, ReportNames);
    if (count(ReportNames)>0)
    { if (FROpenReport(FReport, ReportNames[0]))
      {
#IFDEF _2019_02_13_
        //'Pages=1-5;Picture=False;DeleteEmptyRows=True;OpenAfterExport=True'
        ExportParam:='OpenAfterExport=True';
#ELSE
        ClearAdvRecord(ExportParam);
        FRGetDefaultParameters(frExportPDF, ExportParam);
        ExportParam.Pages:='';
        ExportParam.ShowDialog := False;
        ExportParam.OpenAfterExport := True;
#endif //_2019_02_13_
        if (FRSetParameters(FReport, frExportPDF, ExportParam))
         FRExportReport(FReport, frExportPDF, '');
      } //if (FROpenReport(FReport, ReportNames[0]))
    }
    else
    { Result:=false;
    }
    FRDestroy(FReport);
  } //else if not boPrintToPDF
} //Function PrintDocumentFast:boolean;

//-------------------------------------------------
// Получить первую позицию спецификации
//-------------------------------------------------
Function GetFirstSP:boolean;
{ Result:=false;

}//Function GetFirstSP:boolean;

//-------------------------------------------------
// Получить следующую позицию спецификации
//-------------------------------------------------
Function GetNextSP:boolean;
{ Result:=false;

}//Function GetNextSP:boolean;

//-------------------------------------------------
// Установить раздел
//-------------------------------------------------
Function SetRazdel(nRazdel:word): boolean;
{ #__UNUSED__(nRazdel)
  Result:=false;

}//Function SetRazdel(nRazdel:word): boolean;

//-------------------------------------------------
// Получить текущий раздел
//-------------------------------------------------
Function GetRazdel: word;
{ Result:=0;
}//Function SetRazdel(nRazdel:word): boolean;

//-------------------------------------------------
//получить наименование раздела
//-------------------------------------------------
Function GetRazdelName:string;
{ Result:='';

} //Function GetRazdelName:string;

//-------------------------------------------------
//Получить наименование поля
//-------------------------------------------------
Function GetFieldTitle(wNpp:word):string;
{ #__UNUSED__(wNpp)
  Result:=''

}//Function GetFieldTitle(wNpp:word):string;

//-------------------------------------------------
//Получить наименование поля
//-------------------------------------------------
Function GetFieldParam(wNpp:word;_Param:word):word;
{ #__UNUSED__(wNpp,_Param)
  Result:=0
}//Function GetFieldTitle(wNpp:word):string;

//-------------------------------------------------
// Получить наименование строки
//-------------------------------------------------
Function GetNameSP:string;
{ Result:='';

}//Function GetNameSP:string;

//---------------------
// Печать документа - наполнение по одному документу
//---------------------
Procedure InsTmp_Print(_pDoc:comp; _sTypeVed:string);
{ if getfirst tmp_print where ((
       _pDoc    == tmp_print.cDoc
   and _sTypeVed == tmp_print.sTypeVed
   )) <>tsok
  { ClearBuffer(#tmp_print);
    tmp_print.DocNumber   := GP_KPI_DOC.DocNumber;
    tmp_print.DocDate     := GP_KPI_DOC.DocDate;
    tmp_print.Name        := Gp_TypeDocs.Name;
    tmp_print.cDoc        := _Pdoc;
    tmp_print.sRazdel     := _sTypeVed;
    tmp_print.sTypeVed    := _sTypeVed;
    tmp_print.wType       := GP_KPI_DOC.wType;
    tmp_print.wMonth      := GP_KPI_DOC.wMonth;
    tmp_print.wYear       := GP_KPI_DOC.wYear;
    tmp_print.wKvartal    := GP_KPI_DOC.wKvartal;
    tmp_print.WYEARKVARTAL:= GP_KPI_DOC.WYEARKVARTAL;
    tmp_print.Description := GP_KPI_DOC.Description;
    tmp_print.Katpodr_Code:= Katpodr.Kod;
    tmp_print.Katpodr_Name:= Katpodr.Name;
    tmp_print.ChiefPost_Name :=ChiefPost.Name; //('Должность ответственного',,):Protect,PickButton,NoDel;
    tmp_print.ChiefDep_Code  :=ChiefDep.Code; //('Подразделение ответственного',,):Protect,PickButton,NoDel;
    tmp_print.Executor_Fio   :=Executor.Fio; //         ('Исполнитель'):Protect,PickButton,NoDel;
    insert current tmp_print;
  } //if getfirst tmp_print where ((
  Timelog('InsTmp_Ptint '+String(tmp_print.DocNumber)+',' +tmp_print.sTypeVed);

} //Procedure InsTmp_Ptint(_pDoc:comp; _pRazdel:comp);

//-------------------------------------------------
#doc
 заполнить таблицу для печати tmp_print_fond
#end
Procedure  Fill_Tmp_Print_Fond;
{

}//Procedure  Fill_Tmp_Print_Fond;


//----------------------------------------------------
// Получить наименование раздела для печати
//----------------------------------------------------
Function GetPrintRazdelName(_wRazdel:word) :string;
{  Result:='расчет';
   case _wRazdel of
   1: Result:= 'отработанное время';
   2: Result:= 'начислено' ;
   end;
} //Function GetRazdelName(_wRazdel) :string;

//=======================================
//Скрываем колонки в XLS
//=======================================
Function HideShowColumnXLS(hideColumn:longint; _width:word=0):boolean;
{
  Result:=xlSetColumnWidth(_width, 1,hideColumn, 1,hideColumn);
}

//---------------------
// Печать подписей
//---------------------
Procedure PrintPodpisXLS(_Post,_Fio:string;_Col_Post,_Col_Podpis,_Col_Fio:word);
{ wexrow++;
  wexcol:=_Col_Post;
  MyPutExcel(_Post,10,0,-1,-1); //
  if _Col_Post>_Col_Podpis-2 exit;
  xlMergeCells(wexrow,_Col_Post, wexrow,_Col_Podpis-2); //Объединяем ячейки
  if _Post=''
  MyxlFrameCells(xlBorderB, xlThin, 0, 0, wexrow,_Col_Post, wexrow,_Col_Podpis-2); //Обрамление
  if _Col_Podpis>_Col_Fio-2 exit;
  MyxlFrameCells(xlBorderB, xlThin, 0, 0, wexrow,_Col_Podpis, wexrow,_Col_Fio-2); //Обрамление
  xlMergeCells(wexrow,_Col_Podpis, wexrow,_Col_Fio-2);
  MyPutExcel(_Fio,10,0,-1,-1); //
  xlMergeCells(wexrow,_Col_Fio, wexrow,_Col_Fio+2);
  if _Fio=''
   MyxlFrameCells(xlBorderB, xlThin, 0, 0, wexrow,_Col_Fio, wexrow,_Col_Fio+2); //Обрамление
  wexrow++;
  wexcol:=_Col_Podpis;
  MyPutExcel('подпись',8,0,-1,-1); //
  xlMergeCells(wexrow,_Col_Podpis, wexrow,_Col_Fio-2);
  xlAlignCellsEx(xlCenter,xlTop,wexrow, _Col_Podpis, wexrow,_Col_Fio-2)
} //Procedure PrintPodpisXLS(_Post,_Fio:string;_Col_Post,Col_Podpis,Col_Fio:word);

//---------------------
// Печать документа в Excel
//---------------------
Procedure PrintDocumentXls;
var maxColCount:word;
    maxColCount1:word;
    werr:word;
{ maxColCount:=50;
  wexrow:=0;
  werr:=ExcelInit('GP_KPI_DOC.Xlsx',true);
  HideShowColumnXLS(05,30);//фио
  _loop tmp_print
  { wexrow:=wexrow+2;
    HeaderStrCount:=wexrow;
    MyXlCreaMatrix(1000, maxColCount);
    matrixkl:=true;
    matrixsdvig:=wexrow;
    maxColCount1:=0;
    //---------------------
    wexrow++;
    wexcol:=1;
    MyPutExcel(tmp_print.sTypeVed,10,0,-1,-1);
    //---------------------
    wexrow++;
    wexcol:=1;
    MyPutExcel('Номер',10,0,-1,-1); //
    MyPutExcel('Дата',10,0,-1,-1); //
    MyPutExcel('Месяц',10,0,-1,-1); //
    MyPutExcel('Код подразд.',10,0,-1,-1); //
    MyPutExcel('ФИО',10,0,-1,-1);
    var _sRazdel:string;
    _sRazdel:='?????????';
    var _wCol_prev:word=0;

    var _wCol:word=0;
    for(_wcol:=1; _wcol<=5;_wcol++)
    { xlMergeCells(wexrow,_wCol,wexrow+1,_wcol); //Объединяем ячейки
    }
    _wCol:=wexcol-1;
    _Loop fullcache tmp_print_shap where ((
           tmp_print.cDoc    == tmp_print_shap.cDoc
       and tmp_print.sTypeVed == tmp_print_shap.sTypeVed

      ))
      ordered by index tmp_print_shap02
    { _wCol++;
      update current tmp_print_shap set tmp_print_shap.Column:=_wCol;
      HideShowColumnXLS(_wCol,20);//фио
      if _sRazdel<>tmp_print_shap.sRazdel
      { if _wCol_prev<>0
        { xlMergeCells(wexrow,_wCol_prev, wexrow,_wcol-1); //Объединяем ячейки
        }
        _wCol_prev:=_wCol;
        wexcol:=_wCol;
        MyPutExcel(tmp_print_shap.sRazdel,10,0,-1,-1); //
        _sRazdel:=tmp_print_shap.sRazdel;
      }
    }
    if _wCol_prev<>0
    { xlMergeCells(wexrow, _wCol_prev,wexrow,_wcol); //Объединяем ячейки
    }
    //--------------------------
    wexrow++;
    wexcol:=6;
    _Loop fullcache tmp_print_shap where ((
           tmp_print.cDoc    == tmp_print_shap.cDoc
       and tmp_print.sTypeVed == tmp_print_shap.sTypeVed

      ))
      ordered by index tmp_print_shap02
    { MyPutExcel(tmp_print_shap.Name_Col,10,0,-1,-1); //
    }

    maxColCount1:=wexcol-1;
    xlMergeCells(wexrow-2,1, wexrow-2,maxColCount1); //Объединяем ячейки
    xlSetFontStyle(xlbold, wexrow-2,1, wexrow,maxColCount1); //Bold

    var _Name:string='?????????';
    _loop tmp_print_sp where (( tmp_print.cDoc    == tmp_print_sp.cDoc
         and tmp_print.sTypeVed == tmp_print_sp.sTypeVed
    )) ordered by index tmp_print_sp02
    {
      if _Name<>tmp_print_sp.Name
      { wexrow++;
        wexcol:=1;
        MyPutExcel(tmp_print.DocNumber,10,0,-1,-1); //
        MyPutExcel(tmp_print.DocDate  ,10,0,-1,-1); //
        MyPutExcel(tmp_print.wMonth   ,10,0,-1,-1); //
        MyPutExcel(tmp_print.Katpodr_Code       ,10,0,-1,-1); //
        MyPutExcel(tmp_print_sp.Name       ,10,0,-1,-1); //
        _Name:=tmp_print_sp.Name
      }
      /*
      if getfirst tmp_print_shap where ((
           tmp_print.cDoc    == tmp_print_shap.cDoc
       and tmp_print.sRazdel == tmp_print_shap.sRazdel
       and tmp_print_sp.Npp  == tmp_print_shap.Npp
       ))=tsok
      { wexcol:=tmp_print_shap.Column;
      }
      */
        MyPutExcel(tmp_print_sp.Value,10,0,-1,-1); //

    }
    wexrow++;
    wexcol:=1;
    MyPutExcel('Итого',10,0,-1,-1); //
    xlSetFontStyle(xlbold, wexrow,wexcol, wexrow,maxColCount1); //Bold
    _Loop fullcache tmp_print_shap where ((
           tmp_print.cDoc     == tmp_print_shap.cDoc
       and tmp_print.sTypeVed == tmp_print_shap.sTypeVed

      ))
      ordered by index tmp_print_shap02
    { if tmp_print_shap.Itogo
      { wexcol:=tmp_print_shap.Column;
        xlSetFontStyle(xlbold, HeaderStrCount,wexcol, wexrow,wexcol); //Bold
        MyPutExcelNumber(tmp_print_shap.Summa,2,10,0,-1,-1); //
      }
    }
    MyxlWriteMatrix(wexrow);
    xlFreeMatrix;
    matrixkl:=false;
    MyxlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH, xlThin, 0, 0, HeaderStrCount+1 ,1,wexrow,maxColCount1); //Обрамление
    xlWrapText(HeaderStrCount, 1, wexrow, maxColCount1);

  }//_loop tmp_print
  MyXlEnd;

} //Procedure PrintDocumentXls;


//---------------------
// Печать документа в Excel 02
//---------------------
Procedure PrintDocumentXls02;
var maxColCount:word;
    _ItSu:double;
    _wRazdel:word;
{
   timelog('PrintDocumentXls02  START');
   Fill_Tmp_Print_Fond;
   wexRow:=wexrow+1;
   wexcol:=1;
   matrixkl:=false;
   xlSetFontStyle(xlbold, wexrow,wexcol, wexrow,wexcol); //Bold
   MyPutExcel('Ведомость премирования работников цеха/отдела '+Katpodr.Kod
         +' за '+string(GP_KPI_DOC.wMonth)+'.'+string(GP_KPI_DOC.wYear),10,0,-1,-1 );
   FOR(_wRazdel:=1;_wRazdel<=2;_wRazdel++)
   { if getfirst Tmp_print_line where (( _wRazdel == Tmp_print_line.wRazdel  ))<>tsok then continue;
     wexrow++;
     wexcol:=1;
     //1
     HideShowColumnXLS(wexcol,10);
     MyPutExcel('Группа работников',10,0,-1,-1 );
     //2
     HideShowColumnXLS(wexcol,10);
     MyPutExcel('Подразделение, №',10,0,-1,-1 );
     //3
     HideShowColumnXLS(wexcol,7);
     MyPutExcel('Таб. №',10,0,-1,-1 );
  #IFDEF GP_KPI_BASE_Print_TabnOld
     HideShowColumnXLS(wexcol,7);
     MyPutExcel('Таб. Старый',10,0,-1,-1 );
  #ENDIF
     //4
     HideShowColumnXLS(wexcol,27);
     MyPutExcel('Ф.И.О.',10,0,-1,-1 );
     //5
     HideShowColumnXLS(wexcol,27);
     MyPutExcel('Должность/ профессия',10,0,-1,-1 );
     //6
     HideShowColumnXLS(wexcol,7);
     MyPutExcel('Кат.перс.',10,0,-1,-1 );
     timelog('PrintDocumentXls02  002');

     _Loop Tmp_print_shap where (( _wRazdel == Tmp_print_shap.wRazdel )) ordered by index tmp_print_shap01
     { HideShowColumnXLS(wexcol,10);
       timelog('Шапка '+string(wexcol)+','+string(Tmp_print_shap.Name_Col)+','+Tmp_print_shap.Name_Col);
       MyPutExcel(Tmp_print_shap.Name_Col ,10,0,-1,-1 );
     }

     maxColCount:=wexcol;
     HideShowColumnXLS(wexcol,12);
     MyPutExcel('ИТОГО премия,руб.',10,0,-1,-1 );
     xlSetFontStyle(xlbold, wexrow,1, wexrow,maxColCount); //Bold
     HeaderStrCount:=wexrow;
     MyXlCreaMatrix(1000, maxColCount);
     matrixkl:=true;
     matrixsdvig:=wexrow;
     timelog('PrintDocumentXls02 maxColCount='+string(maxColCount));
     _ItSu:=0;
     _Loop Tmp_print_line where (( _wRazdel == Tmp_print_line.wRazdel  )) ordered by index Tmp_print_line01
     { wexrow++;
       wexcol:=1;
       timelog('PrintDocumentXls02 Tmp_print_line FIO='+Tmp_print_line.Fio);

       MyPutExcel(Tmp_print_line.GrPers  ,10,0,-1,-1 ); //1 Группа работников
       MyPutExcel(Tmp_print_line.Podr_kod,10,0,-1,-1 );//2 Подразделение, №
       MyPutExcel(Tmp_print_line.Tabn    ,10,0,-1,-1 );//3 Таб. №
  #IFDEF GP_KPI_BASE_Print_TabnOld
       MyPutExcel(Tmp_print_line.TabnOLd    ,10,0,-1,-1 );//4 Таб. №
  #ENDIF
       MyPutExcel(Tmp_print_line.Fio     ,10,0,-1,-1 );//Ф.И.О.
       MyPutExcel(Tmp_print_line.Post    ,10,0,-1,-1 );// Должность/ профессия
       MyPutExcel(Tmp_print_line.Kateg   ,10,0,-1,-1 );//Кат.перс.
       do
       { var _wnpp:longint=wexcol-6;
  #IFDEF GP_KPI_BASE_Print_TabnOld
         _wnpp--;
  #ENDIF
         if _wnpp<0 continue;
         if _wnpp>GP_KPI_Doc_Max_FLD_SP break;

         MyPutExcel(Tmp_print_line.fArrVal[_wnpp],10,0,-1,-1 );

       } while wexcol<maxColCount
       MyPutExcelNumber(Tmp_print_line.SuItog,2,10,0,-1,-1 );
       _ItSu:=_ItSu+Tmp_print_line.SuItog;

       timelog('PrintDocumentXls02 Tmp_print_line FIO='+Tmp_print_line.Fio+' ===');
     } //_Loop Tmp_print_line ordered by index Tmp_print_line01

     //------------------------
     wexrow++;
     wexcol:=1;
     timelog('PrintDocumentXls02 Печать итогов ');
     MyPutExcel('Итого' ,10,0,-1,-1 ); //Группа работников
     wexcol:=7;
  #IFDEF GP_KPI_BASE_Print_TabnOld
     wexcol++;
  #ENDIF
     _Loop Tmp_print_shap where (( _wRazdel == Tmp_print_shap.wRazdel )) ordered by index tmp_print_shap01
     { if tmp_print_shap.Summa>0
       {  MyPutExcelNumber(Tmp_print_shap.Summa,2,10,0,-1,-1 );
       }
       else wexcol++;
     }
     MyPutExcelNumber(_ItSu,2,10,0,-1,-1 );
     xlSetFontStyle(xlbold, wexrow,1, wexrow,maxColCount); //Bold
     //------------------------
     MyxlWriteMatrix(wexrow);
     xlFreeMatrix;
     matrixkl:=false;
     MyxlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH, xlThin, 0, 0, HeaderStrCount ,1,wexrow,maxColCount); //Обрамление
     xlWrapText(HeaderStrCount, 1, wexrow, maxColCount);

   } //FOR(_wRazdel:=1;_wRazdel<=2;_wRazdel++)

   //*********************************************
   timelog('PrintDocumentXls02 Печать фондов ');
   //*********************************************
   //-------------------------------------
   if getfirst tmp_print_fond=tsok
   { wexrow:=wexrow+2;
     wexcol:=1;
     timelog('PrintDocumentXls02 Печать фондов Start ');
     //1-2
     HideShowColumnXLS(wexcol,20);
     MyPutExcel('Ведомость премирования работников цеха/отдела '+Katpodr.Kod
         +' за '+string(GP_KPI_DOC.wMonth)+'.'+string(GP_KPI_DOC.wYear),10,0,-1,-1 );
     xlMergeCells(wexrow,1,wexrow+1,2); //Объединяем ячейки


     wexcol++;
     //3
     HideShowColumnXLS(wexcol,20);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('Экономия по по фонду премирования за результаты работы подразделения'
      +' и результаты работы работника'
      +' и фонду премирования руководителя с начала периода, руб.',10,0,-1,-1 );
     //4
     HideShowColumnXLS(wexcol,15);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('% на поощрение',10,0,-1,-1 );
     //5
     HideShowColumnXLS(wexcol,27);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('Использование экономии по фондам, руб.',10,0,-1,-1 );
     //6
     HideShowColumnXLS(wexcol,20);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.',10,0,-1,-1 );
     //7
     HideShowColumnXLS(wexcol,12);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('Выделено из фонда руководителя функционального направления, руб.',10,0,-1,-1 );
     //8
     HideShowColumnXLS(wexcol,13);
     xlMergeCells(wexrow,wexcol,wexrow+1,wexcol); //Объединяем ячейки
     MyPutExcel('Доп.фонд по инициативным заказам и проч., руб.',10,0,-1,-1 );
     //9
     HideShowColumnXLS(wexcol,10);
     xlMergeCells(wexrow,wexcol,wexrow,wexcol+2); //Объединяем ячейки
     MyPutExcel('Премия текущего месяца',10,0,-1,-1 );
     xlSetRowHeight(24,wexrow,1,wexrow,11);
     wexrow:=wexrow+1;
     wexcol:=9;

     HideShowColumnXLS(wexcol,12);
     MyPutExcel('План, руб.',10,0,-1,-1 );
     HideShowColumnXLS(wexcol,12);
     MyPutExcel('Факт, руб.',10,0,-1,-1 );
     HideShowColumnXLS(wexcol,12);
     MyPutExcel('Остаток, руб.',10,0,-1,-1 );
     xlSetFontStyle(xlbold, wexrow-1,1, wexrow,11); //Bold
     var _sFond:string='?????';
     var _row_prev:word=0;

     HeaderStrCount:=wexrow;
     MyXlCreaMatrix(10, 11);
     matrixkl:=true;
     matrixsdvig:=wexrow;
     _Loop tmp_print_fond
     { wexrow++;
       wexcol:=1;
       timelog('PrintDocumentXls02 tmp_print_fond.sFond='+tmp_print_fond.sFond);

       if _sFond<>tmp_print_fond.sFond
       { if _row_prev<>0
         { xlMergeCells(_row_prev,1,wexrow-1,1); //Объединяем ячейки

         }
         _sFond:=tmp_print_fond.sFond;
         MyPutExcel(_sFond,10,0,-1,-1 );
         _row_prev:=wexrow;
       }
       wexcol:=2;
       MyPutExcel(tmp_print_fond.sGrRab ,10,0,-1,-1 ); //группа работников
       MyPutExcelNumber(tmp_print_fond.Econom,2,10,0,-1,-1 ); //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
            //   и фонду премирования руководителя с начала периода, руб.
       MyPutExcelNumber(tmp_print_fond.SuProc,2,10,0,-1,-1 ); //% на поощрение
       MyPutExcelNumber(tmp_print_fond.SuUse ,2,10,0,-1,-1 ); //Использование экономии по фондам, руб.
       MyPutExcelNumber(tmp_print_fond.SuRas ,2,10,0,-1,-1 ); //Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
       MyPutExcelNumber(tmp_print_fond.SuZGD ,2,10,0,-1,-1 ); //Выделено из фонда руководителя функционального направления, руб.
       MyPutExcelNumber(tmp_print_fond.SuDop ,2,10,0,-1,-1 ); //Доп.фонд по инициативным заказам и проч., руб.
     //Премия текущего месяца
       MyPutExcelNumber(tmp_print_fond.CurPlan ,2,10,0,-1,-1 ); //План, руб.
       MyPutExcelNumber(tmp_print_fond.CurFact ,2,10,0,-1,-1 ); //Факт, руб.
       MyPutExcelNumber(tmp_print_fond.CurOst ,2,10,0,-1,-1 ); //Остаток, руб.

     } //_Loop tmp_print_fond
     if _row_prev<>0
     { xlMergeCells(_row_prev,1,wexrow,1); //Объединяем ячейки
     }

     MyxlWriteMatrix(wexrow);
     xlFreeMatrix;
     matrixkl:=false;
     MyxlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH, xlThin, 0, 0, HeaderStrCount-1 ,1,wexrow,11); //Обрамление
     xlWrapText(HeaderStrCount-1, 1, wexrow, 11);
     timelog('PrintDocumentXls02 Печать фондов finish ');
   } //if getfirst tmp_print_fond
   timelog('PrintDocumentXls02 Печать подписей');

   wexrow:=wexrow+2;
   PrintPodpisXLS('Руководитель структурного подразделения '+Katpodr.Kod,'',1,5,10);
   wexrow:=wexrow+2;
   PrintPodpisXLS('Руководитель функционального направления','',1,5,10);
   wexrow:=wexrow+2;
   PrintPodpisXLS('','',1,5,10);


   wexrow:=wexrow+3;
   timelog('PrintDocumentXls02 Finish');
} //Procedure PrintDocumentXls02;

//----------------------------------------------------
// собираем спецификацию
//----------------------------------------------------
function PrintDocument_Sp :Boolean;
var Dm_title  :array[1..GP_KPI_Doc_Max_FLD_SP] of string;
    //Dm_Razr   :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Option :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Sum    :array[1..GP_KPI_Doc_Max_FLD_SP] of Double;
    Dm_Razdel :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Razdels:array[1..GP_KPI_Doc_Max_FLD_SP] of string;
    Dm_Column :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    ii:word;
    _sTypeVed:string;
    //_wRazdel:word;
    _ww_name:string;
{ _sTypeVed:=GetRazdelName;
  Timelog('PrintDocument_Sp->_sRazdel='+_sTypeVed);
  Result:=true;
  if _sTypeVed='' exit;
  InsTmp_Print(GP_KPI_DOC.Nrec,_sTypeVed);
  For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  { Dm_title[ii]:=GetFieldTitle(ii);
    Timelog('PrintDocument_Sp->Dm_title[ii]='+Dm_title[ii]+','+string(ii));
    Dm_Sum    [ii]:=0;
    Dm_Option [ii]:=GetFieldParam(ii,1);
    Dm_Razdel [ii]:=GetFieldParam(ii,5);
    Dm_Razdels[ii]:=GetPrintRazdelName(Dm_Razdel[ii]);
    Dm_Column [ii]:=GetFieldParam(ii,101);//номер колонки в отчете 01
    if Dm_title[ii]='' continue;
    clearbuffer(#tmp_print_shap);
    tmp_print_shap.Npp     :=ii;
    tmp_print_shap.cDoc    :=tmp_print.cDoc;
    tmp_print_shap.Name_Col:=Dm_title[ii];
    tmp_print_shap.sTypeVed:=tmp_print.sTypeVed;
    tmp_print_shap.Razdel  :=Dm_Razdel [ii];
    tmp_print_shap.sRazdel :=Dm_Razdels[ii];
    tmp_print_shap.Option  :=Dm_Option [ii];
    tmp_print_shap.Len     :=GetFieldParam(ii,2);
    tmp_print_shap.Razr    :=GetFieldParam(ii,3);
    tmp_print_shap.Vis     :=0;
    tmp_print_shap.Itogo   :=isBitCTW(Dm_Option[ii],2);
    tmp_print_shap.Summa   :=0;
    insert current tmp_print_shap;

  } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  if GetFirstSP
  do {
    if not NextVisual then
    { Result:=false;
      Exit;
    }
    _ww_name:=GetNameSp();
    For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
    { if Dm_title[ii]='' then continue;
      tmp_print_SP.cDoc  :=tmp_print.cDoc;
      tmp_print_SP.NPP   :=ii;
      tmp_print_SP.Name  :=_ww_name;
      tmp_print_SP.sTypeVed:=tmp_print.sTypeVed;
      tmp_print_SP.Razdel  :=Dm_Razdel [ii];
      tmp_print_SP.sRazdel :=Dm_Razdels[ii];
      tmp_print_SP.Title:=string(ii,2)+' '+Dm_title[ii];
      tmp_print_SP.Value :=GetFieldVals(3,ii);
      insert current tmp_print_SP;
      if isBitCTW(Dm_Option[ii],2)
      { var _Value:double=0;
        if tmp_print_SP.Value=''  tmp_print_SP.Value:='0';
        _Value:=Double(tmp_print_SP.Value);
        Dm_Sum[ii]:=Dm_Sum[ii]+_Value;

      }
      Timelog('PrintDocument_Sp '+String(tmp_print_SP.cDoc,0,0)+','+tmp_print_SP.Value+',' +tmp_print.sRazdel);
    } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  } while GetNextSP
  For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  { if Dm_Sum[ii]>0
    if getfirst tmp_print_shap where ((
          tmp_print.cDoc    == tmp_print_shap.cDoc
      and tmp_print.sTypeVed== tmp_print_shap.sTypeVed
      and ii                == tmp_print_shap.NPP ))=0
    { update current tmp_print_shap set tmp_print_shap.Summa:=Dm_Sum[ii];
    }
  } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  Result:=true;
  Timelog('PrintDocument_Sp SP   '+RecordsInTable(#tmp_print_SP)+',' );
  Timelog('PrintDocument_Sp Main '+RecordsInTable(#tmp_print)+',' );

}//function PrintDocument_Sp :Boolean;

Function Ins_tmp_print_shap(_NPP:word; var _wRazdel:word;_sRazdel:string;_sTypeVed:string=''
  ;_NppSP:word=0;_Column:word=0 ):longint;
{ Result:=0;
  if _wRazdel=0 then _wRazdel:=1;
  if _Npp=0
  { if getlast Tmp_print_shap ordered by index Tmp_print_shap01=tsok
    { _Npp:=Tmp_print_shap.Npp+1;
    }
    else
    { _Npp:=1;
    }
/*
Начислено ОЗ, руб.
Фактический % премии сотрудников за качество и дисциплину труда
Размер премии сотрудников за качество и дисциплину труда, руб.
Коэффициент выполнения показателей премирования
% премии за результаты работы подразделения и результаты работы работника
Коэффициент оценки личной результативности работника
Размер премии за результаты работы подразделения и результаты работы работника,руб.
% премии из фонда руководителя
Размер премии из фонда руководителя,руб.
Из фонда руководителя,руб.
Коэффициент выполнения показателей премирования для О.П.
Фактический % премирования за выполнение показателей для О.П.
Размер премии за выполнение показателей для О.П.
ИТОГО премия,руб.
*/
    if GP_KPI_Doc.wtype=101
    { _wRazdel:=1;
      if boRep01Nastr
      { if _Column=0 then Exit;
        _wRazdel:=(_Column div 100)+1;
        Result:=_Column mod 100;
        exit;
      }
      //-----------------
      case _sTypeVed of
      'Премия за качество и дисциплину труда':
      { case _NPPSP of
        9: //Начислено, итого
        { _sRazdel:='Начислено ОЗ, руб.';
        }
        2://Фактический процент
        { _sRazdel:='Плановый % премии сотрудников за качество и дисциплину труда';
        }
        3://Фактический процент
        { _sRazdel:='Фактический % премии сотрудников за качество и дисциплину труда';
        }
        4://Премия за качество и дисц.труда
        { _sRazdel:='Размер премии сотрудников за качество и дисциплину труда, руб.';
        }
        end;
      }
      'Премия за результаты работы':
      { case _NPPSP of
        14://Начислено, формула. 14 Начислено,Всего, руб.
        { _sRazdel:='Начислено ОЗ, руб.';
        }
        2://Коэффициент выполнения показателей премирования
        { _sRazdel:='Коэффициент выполнения показателей премирования';
        }
        3://Нормативный процент для расчета премии
        { _sRazdel:='% премии за результаты работы подразделения и результаты работы работника';
        }
        6://Коэффициент оценки эффективности деятельности работника
        { _sRazdel:='Коэффициент оценки личной результативности работника';
        }
        7://Премия за результат работы подразделения,  руб
        { _sRazdel:='Размер премии за результаты работы подразделения и результаты работы работника,руб.';
        }
        end;
      }
      'Премия из премиального фонда руководителя':
      { case _NPPSP of
        15://Начислено - формула //14://Начислено, всего
        { _sRazdel:='Начислено ОЗ, руб.';
        }
        1://Фактический процент
        { _sRazdel:='План. % премии из фонда руководителя';
        }
        10://Итоговый процент из фонда руководителя
        { _sRazdel:='% премии из фонда руководителя';
        }
        //5://Премия из фонда руководителя - по письму от 14.12.2017
        9://Премия из фонда руководителя, всего
        { _sRazdel:='Размер премии из фонда руководителя,руб.';
        }
        //7://Распределение фонда руководителя, руб. - по письму от 14.12.2017
        5: //Премия из фонда руководителя>
        { _sRazdel:='Из фонда руководителя,руб.';
        }
        end;

      }
      'Премия за выполнение показателей' :
      { case _NPPSP of
        4://Начислено, формула. //14 Начислено,Всего, руб.
        { _sRazdel:='Начислено ОЗ, руб.';
        }
        3://Коэффициент выполнения показателей премирования
        { _sRazdel:='Коэффициент выполнения показателей премирования для О.П.';
        }
        1://Фактический процент
        { _sRazdel:='Плановый % премирования за выполнение показателей для О.П.';
        }
        2://Фактический процент
        { _sRazdel:='Фактический % премирования за выполнение показателей для О.П.';
        }
        5://Премия за выполнение показателей премирования, руб
        { _sRazdel:='Размер премии за выполнение показателей для О.П.';
        }
        end;
      }
      'Основные рабочие ОП (236)'
     ,'Основные рабочие ОП (236) до 2018.02'
     ,'Основные рабочие ОП (236) до 2018.03'
      :
      { _wRazdel:=2;
        case _NPPSP of
        1://Начисленно всего2
        { _sRazdel:='Начислено ОЗ, руб.';
        }
        7://Общий % премии (план)
        { _sRazdel:='% премии, план';
        }
        8: //Сумма премии (план)
         _sRazdel:='Плановый размер премии.'
        9://до 2018.03 - Общий % премии (факт)
          //после      - Из фонда руководителя
        { if _sTypeVed='Основные рабочие ОП (236)'
            _sRazdel:='Из фонда руководителя';
          else
            _sRazdel:='% премии, факт';
        }
        10://
        { if _sTypeVed='Основные рабочие ОП (236)'
            _sRazdel:='% премии, факт';
          else
            _sRazdel:='Из фонда руководителя';
        }
        11://Общая сумма премии (факт)
        { //_sRazdel:='Итого премии (руб.)';
        }
        4:_sRazdel:='коэф. производства';
        5:_sRazdel:='коэф. качества';
        6:_sRazdel:='коэф. технологической и трудовой дисциплины';
        end;
      } //'Основные рабочие ОП (236)'
      end;
    } //if GP_KPI_Doc.wtype=101
    timelog('Ищем шапку:'+string(_NPPSP)+','+_sRazdel );
    if getfirst Tmp_print_shap where (( _wRazdel == Tmp_print_shap.wRazdel and _sRazdel == Tmp_print_shap.Name_Col ))=tsok
    { Result:=Tmp_print_shap.Npp;
      timelog('нашли '+string(_NPPSP)+','+string(Result) );
      exit;
    }
    if GP_KPI_Doc.wtype=101 Exit;

  } //if _Npp=0

  if _Npp=0 then exit;
  if _Npp>GP_KPI_Doc_Max_FLD_SP exit;
  insert into Tmp_print_shap set
       Tmp_print_shap.Name_Col:=_sRazdel
      ,Tmp_print_shap.Npp     :=_Npp
      ,Tmp_print_shap.wRazdel :=_wRazdel;
      ;
  Result:=_Npp;

} //Function Ins_tmp_print_shap(_NPP:word;_sRazdel:string;_sTypeVed:string='')
//----------------------------------------------------
// собираем спецификацию
//----------------------------------------------------
function PrintDocument_Sp_Line :Boolean;
var Dm_title  :array[1..GP_KPI_Doc_Max_FLD_SP] of string;
    //Dm_Razr   :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Option :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Sum    :array[1..GP_KPI_Doc_Max_FLD_SP] of Double;
    Dm_Razdel :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Razdels:array[1..GP_KPI_Doc_Max_FLD_SP] of string;
    Dm_ItNpp  :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    Dm_Column :array[1..GP_KPI_Doc_Max_FLD_SP] of word;
    ii:word;
    _sTypeVed:string;
    //_ww_name:string;
    _wRazdel:word;//1 - старые премии до 2018 года
                  //2 - Основные рабочие ОП (236)

{ _sTypeVed:=GetRazdelName;
  Timelog('PrintDocument_Sp_Line->_sRazdel='+_sTypeVed);
  Result:=true;
  if _sTypeVed='' exit;
  boRep01Nastr:=False;
  _wRazdel:=1;
  For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  { Dm_title[ii]:=GetFieldTitle(ii);
    Timelog('For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++) II='+string(ii) + ' Dm_title[ii] =' + Dm_title[ii]);
    if Dm_title[ii]='' then continue;
    Timelog('For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++) after continue II='+string(ii));
    Dm_Sum    [ii]:=0;
    Dm_Option [ii]:=GetFieldParam(ii,1);
    Dm_Razdel [ii]:=GetFieldParam(ii,5);
    case wTypeRep of
    KPI_DOC_PRN_Excel_It_PL:
    { Dm_Column [ii]:=GetFieldParam(ii,102); // номер колонки в отчете 01
    }
    else
    { Dm_Column [ii]:=GetFieldParam(ii,101); // номер колонки в отчете 01
    }
    end;
    if  Dm_Column[ii]<>0   boRep01Nastr:=True;
    Dm_Razdels[ii]:=GetPrintRazdelName(Dm_Razdel[ii]);
    Dm_ItNpp[ii]:=Ins_tmp_print_shap(0,_wRazdel,Dm_title[ii],_sTypeVed,ii,Dm_Column [ii]);
    /* уже не нужно
    if _sTypeVed='Премия из премиального фонда руководителя'
    { //Распределение фонда руководителя, руб.
      //Премия из фонда руководителя
      //на входят в итого
      if ii=5 or ii=7 Dm_Option[ii]:=Dm_Option[ii] or 2;

    }
    */
    //Timelog('PrintDocument_Sp_Line->Dm_title[ii]='+Dm_title[ii]+','+string(ii)+','+string(Dm_ItNpp[ii]));
  } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  if GetFirstSP
  do {
    if not NextVisual then
    { Result:=false;
      Exit;
    }
    var _GrPers  :string=GetFieldVals(4,6); //Группа работников
    var _Podr_kod:string=GetFieldVals(4,1); //Подразделение, №
    var _Tabn    :string=GetFieldVals(4,2); //Таб. №
    var _Fio     :string=GetFieldVals(4,3); //Ф.И.О.
    var _Post    :string=GetFieldVals(4,5); //Должность/ профессия
    var _Kateg   :string=GetFieldVals(4,4); //Кат.перс.
#IFDEF GP_KPI_BASE_Print_TabnOld
    var _cPersons:comp  =comp(GetFieldVals(4,7)); //ссылка на Persons
    var _TabnOld :string='';
    if _cPersons>0
    { if vRaise_102.getfirst Persons where (( _cPersons == Persons.Nrec  )) =tsok
        _TabnOld:=vRaise_102.Persons.Tabnmb;
    }
#ENDIF
    Timelog('PrintDocument_Sp_Line->'+_Fio+','+_Tabn);
    if getfirst tmp_print_line where ((
           _wRazdel  == tmp_print_line.wRazdel
       and _GrPers   == tmp_print_line.GrPers
       and _Podr_kod == tmp_print_line.Podr_kod
       and _Fio      == tmp_print_line.Fio
       and _Tabn     == tmp_print_line.Tabn
       and _Post     == tmp_print_line.Post
      )) <>tsok
    { Clearbuffer(#tmp_print_line);
      tmp_print_line.wRazdel :=_wRazdel;
      tmp_print_line.GrPers  :=_GrPers; //Группа работников
      tmp_print_line.Podr_kod:=_Podr_kod; //Подразделение, №
      tmp_print_line.Tabn    :=_Tabn; //Таб. №
#IFDEF GP_KPI_BASE_Print_TabnOld
      tmp_print_line.TabnOld :=_TabnOld; //Таб. №
#ENDIF
      tmp_print_line.Fio     :=_Fio; //Ф.И.О.
      tmp_print_line.Post    :=_Post;// Должность/ профессия
      tmp_print_line.Kateg   :=_Kateg; //Кат.перс.
      //tmp_ptint_line.fArrVal :
      //tmp_ptint_line.SuItog  :double
      insert current tmp_print_line;
    }
    var _Value :double=0;
    var _ValueS:string='';
    For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
    { if length(Dm_title[ii])=0 and (not isBitCTW(Dm_Option[ii],2)) then continue;
      _Values:=GetFieldVals(3,ii);
      if _Values='' _Values:='0';
      _Value:=0;
      _Value:=Double(_Values);
      if isBitCTW(Dm_Option[ii],2)
      { tmp_print_line.SuItog:=tmp_print_line.SuItog+_Value;
        Timelog('PrintDocument_Sp_Line ii='+string(ii)+', Itogo= '+String(tmp_print_line.SuItog,0,2));
      }
      if length(Dm_title[ii])=0 then continue;
      if Dm_ItNpp[ii]=0  then continue;
      if Dm_ItNpp[ii]>GP_KPI_Doc_Max_FLD_SP then continue;
      tmp_print_line.fArrVal[Dm_ItNpp[ii]] :=_Values;
      if isBitCTW(Dm_Option[ii],4) //Агрегат
      { Dm_Sum[Dm_ItNpp[ii]] :=Dm_Sum[Dm_ItNpp[ii]]+_Value;
      }
      //Timelog('PrintDocument_Sp_Line ii='+string(ii)+', '+tmp_print_line.fArrVal[Dm_ItNpp[ii]]);
    } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
    update current tmp_print_line;
  } while GetNextSP
  For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  { if Dm_Sum[ii]>0
    if getfirst tmp_print_shap where ((
          0  == tmp_print_shap.cDoc
      and ii == tmp_print_shap.NPP
      and _wRazdel == tmp_print_shap.wRazdel
       ))=0
    { update current tmp_print_shap set tmp_print_shap.Summa:=tmp_print_shap.Summa+Dm_Sum[ii];
    }
  } //For(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)

  Result:=true;
  Timelog('PrintDocument_Sp SP_Line  '+RecordsInTable(#tmp_print_SP)+',' );

}//function PrintDocument_Sp_Line :Boolean;


function PrintDocument_One :Boolean;
var nRazdel:word;
    _wRazdel:word;
{ Result:=false;
  Timelog('   PrintDocument_One START' );
  case wTypeRep of
   KPI_DOC_PRN_Excel_It
  ,KPI_DOC_PRN_Excel_It_PL
  ,KPI_DOC_PRN_Fast_IT
  ,KPI_DOC_PRN_Fast_IT_NEW :  //-----------------------
  { ResetBounds(#tmp_print_shap);
    delete all tmp_print_shap;
    SetBounds(#tmp_print_shap);
    //-----------------------
    delete all tmp_Print_line;
    delete all tmp_print_fond;
    //вставим записи в шапку
    if wTypeRep <> KPI_DOC_PRN_Fast_IT_NEW
    {
            if GP_KPI_DOC.wType=101
            { var _npp:word=0;
              _wRazdel:=1;
              _npp++; Ins_tmp_print_shap(_npp,_wRazdel,'Начислено ОЗ, руб.');
              if wTypeRep= KPI_DOC_PRN_Excel_It_PL
              { _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Плановый % премии сотрудников за качество и дисциплину труда');
              }
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Фактический % премии сотрудников за качество и дисциплину труда');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Размер премии сотрудников за качество и дисциплину труда, руб.');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Коэффициент выполнения показателей премирования');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'% премии за результаты работы подразделения и результаты работы работника');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Коэффициент оценки личной результативности работника');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Размер премии за результаты работы подразделения и результаты работы работника,руб.');
              if wTypeRep= KPI_DOC_PRN_Excel_It_PL
              { _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'План. % премии из фонда руководителя');
              }
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'% премии из фонда руководителя');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Размер премии из фонда руководителя,руб.');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Из фонда руководителя,руб.');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Коэффициент выполнения показателей премирования для О.П.');
              if wTypeRep= KPI_DOC_PRN_Excel_It_PL
              { _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Плановый % премирования за выполнение показателей для О.П.');
              }
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Фактический % премирования за выполнение показателей для О.П.');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Размер премии за выполнение показателей для О.П.');
              //----------------------------- 2 раздел ----------------------
              _npp:=0;
              _wRazdel:=2;
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Начислено ОЗ, руб');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'% премии, план');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Плановый размер премии.');
              //--- Коэффициенты премирования
        			_npp++;Ins_tmp_print_shap(_npp,_wRazdel,'коэф. производства');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'коэф. качества');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'коэф. технологической и трудовой дисциплины');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Из фонда руководителя');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'% премии, факт');
              //--------Итого премии (руб.)

            } //if GP_KPI_DOC.wType=101
    }
    else
    {
       Timelog(' wTypeRep = KPI_DOC_PRN_Fast_IT_NEW ');
          if GP_KPI_DOC.wType=101
            { var _npp:word=0;
              _wRazdel:=1;

              _npp++; Ins_tmp_print_shap(_npp,_wRazdel,'Начислено ОЗ, руб');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'К ИндНЗ');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'К качество труда');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Общий % премии (факт)');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Итого премия (руб.)');

              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Коэффициент выполнения показателей премирования');
//              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Размер премии за результаты работы подразделения и результаты работы работника,руб.');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Коэффициент оценки эффективности деятельности работника');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Сумма из фонда');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Премия за результат работы подразделения,  руб');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'% снижения премии');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Сумма снижения премии');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Пустышка');
              _npp++;Ins_tmp_print_shap(_npp,_wRazdel,'Итоговый процент');
            }
    }
  } //if wTypeRep=2
  end;
  SetDocPosition(GP_KPI_DOC.wType,GP_KPI_DOC.Nrec,0);
  if wParamPrint=0
  { Timelog('PrintDocument_One:wnParamPrint= '+string(wParamPrint));
    if not PrintDocument_Sp exit;
  }
  else
  { //For(nRazdel:=1; nRazdel<=11;nRazdel++)
    For(nRazdel:=1; nRazdel<=10;nRazdel++)
    { Timelog('PrintDocument_One:nRazdel= '+string(nRazdel));
      if not SetRazdel(nRazdel) then continue;
      case wTypeRep of
       KPI_DOC_PRN_Excel_It, KPI_DOC_PRN_Excel_It_PL, KPI_DOC_PRN_Fast_IT,KPI_DOC_PRN_Fast_IT_NEW:
      { if not PrintDocument_Sp_Line exit;
      }
      else
      { if not PrintDocument_Sp exit;
      }
      end;
    }
  }
  Result:=true;
  case wTypeRep of
  KPI_DOC_PRN_Excel_It, KPI_DOC_PRN_Excel_It_PL: PrintDocumentXls02;
  KPI_DOC_PRN_Fast_IT,KPI_DOC_PRN_Fast_IT_NEW:
  { PrintDocumentFast;

  }
  end;
  Timelog('   PrintDocument_One Finish' );

} //function PrintDocument_One :Boolean;

//---------------------
// Печать документа
//---------------------
function PrintDocument(bMulti:boolean) :Boolean;
var FReport: LongInt;
    ReportNames: array [0..0] of String;
#IFDEF _2019_02_13_
    ExportParam:String;
#ELSE
    ExportParam:frxPDFExportParam;
#ENDIF
    var _Prev_RazDel:word;
{ Result:=False;
  //UpdateTable;
  Timelog('PrintDocument bMulti='+string(bMulti));
  if not ReadMyDsk(wTypeRep,'GP_KPI_DOC_wTypeRep',false) wTypeRep:=KPI_DOC_PRN_Fast_IT_NEW;
  if bMulti
  { if pMarker.Count=0
      bMulti:=false
    else
    if Message('Рассчитать текущую ведомость или помеченные?',YesNo)=cmYes
    { bMulti:=false;
    }
  }
  if wTypeDoc>100 and (not bMulti)
  { if RunWindowModal(wnParamPrint)<>cmDefault  Exit;
  }
  else
  { if RunWindowModal(wnParamPrintM)<>cmDefault  Exit;
    wParamPrint:=if(wTypeDoc>100,1,0);
  }
  _Prev_RazDel:=GetRazdel;
  //проверим параметры для итого отчета
  case wTypeRep of
  KPI_DOC_PRN_Excel_It, KPI_DOC_PRN_Excel_It_PL,KPI_DOC_PRN_Fast_IT,KPI_DOC_PRN_Fast_IT_NEW:
  { if wTypeDoc<100 and wTypeDoc<>3
    {  if wTypeRep=KPI_DOC_PRN_Fast_IT or wTypeRep = KPI_DOC_PRN_Fast_IT_NEW
       {  wTypeRep:=0; // здесь смысла нет
       }
       else
       {  wTypeRep:=1; // здесь смысла нет
       }
    }
    else
    { wParamPrint:=1;
      if wTypeRep<>KPI_DOC_PRN_Fast_IT and wTypeRep<>KPI_DOC_PRN_Fast_IT_NEW
      { ExcelInit('GP_KPI_DOC_Line.Xlsx',true);
        wexrow:=1;
      }
    }
  } //KPI_DOC_PRN_Excel_It, KPI_DOC_PRN_Excel_It_PL,KPI_DOC_PRN_Fast_IT:
  end; //case wTypeRep of
  //------------------------------------
  SaveMyDsk(wTypeRep,'GP_KPI_DOC_wTypeRep');
  var boWinEdit_prev:boolean;
  boWinEdit_prev:=boWinEdit;
  //boWinEdit:=True;
  var isAllOk:boolean=true;

  PushPos(#GP_KPI_DOC_SP);
  PushPos(#GP_KPI_DOC);
  delete all tmp_print;
  //-----------------------
  ResetBounds(#tmp_print_sp);
  delete all tmp_print_sp;
  SetBounds(#tmp_print_sp);
  //-----------------------
  ResetBounds(#tmp_print_shap);
  delete all tmp_print_shap;
  SetBounds(#tmp_print_shap);
  //-----------------------
  ResetBounds(#tmp_print_line);
  delete all tmp_Print_line;
  SetBounds(#tmp_print_line);
  delete all tmp_print_fond;

  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm,'Печать ведомостей',0);
  if bMulti //Надо сначала набить маркер Marker_Tmp
  { timelog('   Печать нескольких ведомостей');
    var ii:longint;
    For(ii:=0;ii<GetMarkerCount(Marker_Tmp);ii++)
    { if not NextVisual then
      { isAllOk:=false;
        break;
      }
      if not GetMarker(Marker_Tmp,ii,pTmp)  continue;
      if getfirst GP_KPI_DOC where (( pTmp == GP_KPI_DOC.Nrec ))<>tsok continue;
      if not iNextVisual('Печать ведомости '+GP_KPI_DOC.DocNumber) then break;
      if not PrintDocument_One
      { isAllOk:=false;
        break;
      }
    } //For(ii:=0;ii<GetMarkerCount(Marker_Tmp);ii++)
  } //if bMulti
  else
  { timelog('   Печать одной ведомости');
    if not PrintDocument_One
    { isAllOk:=false;
    }
  } //else if bMulti
  if VisualizationActive
  StopVisual('',0);
  PopPos(#GP_KPI_DOC);
  Timelog('PrintDocument 00002');

  //Procedure PositionChanged;Forward;
  SetDocPosition(GP_KPI_DOC.wType,GP_KPI_DOC.Nrec,0);
  PopPos(#GP_KPI_DOC_SP);
  SetRazdel(_Prev_RazDel);
  if VisualizationActive
    StopVisual('',0);
  Timelog('PrintDocument 00003');

  if isAllOk
  or wTypeRep= KPI_DOC_PRN_Excel_It_PL
  or wTypeRep= KPI_DOC_PRN_Excel_It
  { case wTypeRep of
    0:
    { var boPrintToPDF:boolean=true;
      if ExistTune('NPOEM_OWN.Raise.Print2Pdf')
        boPrintToPDF:=boGetTune('NPOEM_OWN.Raise.Print2Pdf');
      if not boPrintToPDF
      { RunFReportByGroup(dtsKPI_DOC_BASE,'DOCS'+LPadCh(string(wTypeDoc),'0',3));
      }
      else
      { FReport := FRCreate(dtsKPI_DOC_BASE);
        FRGetReportNames(FReport, ReportNames);
        if (count(ReportNames)>0)
        if (FROpenReport(FReport, ReportNames[0]))
        {
#IFDEF _2019_02_13_
          //'Pages=1-5;Picture=False;DeleteEmptyRows=True;OpenAfterExport=True'
          ExportParam:='ShowDialog=False;OpenAfterExport=True';
#ELSE
          ClearAdvRecord(ExportParam);
          FRGetDefaultParameters(frExportPDF, ExportParam);
          ExportParam.Pages:='';
          ExportParam.ShowDialog := False;
          ExportParam.OpenAfterExport := True;
#ENDIF
          if (FRSetParameters(FReport, frExportPDF, ExportParam))
           FRExportReport(FReport, frExportPDF, '');
        } //if (FROpenReport(FReport, ReportNames[0]))
        FRDestroy(FReport);
      } //else if not boPrintToPDF
    } //0
    KPI_DOC_PRN_Excel: PrintDocumentXls;
    KPI_DOC_PRN_Excel_It, KPI_DOC_PRN_Excel_It_PL: MyXlEnd;// сразу и закончим
    KPI_DOC_PRN_Fast_IT,KPI_DOC_PRN_Fast_IT_NEW :
    { //message('Не реализовано!'); - каждую ведомость делаем отдельным файлом.

    }
    end;//case wTypeRep of
    Timelog('PrintDocument 00004');
  }
  Timelog('PrintDocument 00005');
  ReScanPanel(#GP_KPI_DOC);
  Result:=True;
  //boWinEdit:=boWinEdit_Prev;
  if VisualizationActive
    StopVisual('',0);
  Timelog('PrintDocument 00006');

} //function PrintDocument(bMulti:boolean) :Boolean;


//-------------------------------------
#doc
 Установить позицию
#end
Function SetDocPosition(_wTypeDoc:word;_cDoc:comp;_cDocSp:comp):boolean;//Abstract;
{ #__UNUSED__(_wTypeDoc,_cDoc,_cDocSp)
  Result:=True;
}

//===============================================
// Установить значение полей
//===============================================
Function SetFieldVal(wTp:word; wwNum:word; _Value: Variant;_ClearManual:boolean=false):boolean ;//Abstract;
{ #__UNUSED__(wTp,wwNum,_Value,_ClearManual)
  Result:=False;
}
//===============================================
// Получить значение полей - строка
//===============================================
Function GetFieldValS(wTp:word; wwNum:word) : string;//Abstract;
{ #__UNUSED__(wTp,wwNum)
  Result:='';
}
//===============================================
// Получить получить значение полей
//===============================================
Function GetFieldVal(wTp:word; wwNum:word) : Variant;//Abstract;
{ #__UNUSED__(wTp,wwNum)
  Result:='';
}

//-------------------------------------
#doc
 Установить режим обновления спецификации
#end
Procedure SetUpdateMode(_Immediately_SP:boolean);
{ boImmediately_SP:=_Immediately_SP;
}
//-------------------------------------
#doc
 Сохранить спецификация
#end
Function Update_SP:longint;
{ if boImmediately_SP exit;
  Result:=Update current GP_KPI_DOC_SP;
}

//-----------------------------------------
// инициализация интерфейса
//-----------------------------------------
Procedure LoadInterface(_wVisibleRun:boolean);
{ isFilterRun:=True;
  UnLockAll(#GP_KPI_DOC);
  wVisibleRun:=_wVisibleRun;
  boLoadZar:=false;
  if not wVisibleRun // пусть будет один документ!
  { DisableCommand(cmInsert);
    DisableCommand(cmInsertRecord);
    DisableCommand(cmSetDefault);
    PushBounds(tbByOne);

  }
  delete all tmp_err;
  //---------------------------------
  Timelog_init;
  BoLocked:=False;
  //-----------------------------
  VA_GP_KPI_DOC_LOCK:=ExtAttr_Create(coGP_KPI_DOC,'Заблокировал',cgAttrType_Str);
  //-----------------------------
  USER_FIO:=sGetTune('USER.FIO');
  if USER_FIO='' USER_FIO:=UserName();

  UP_STAFF_CATALOGS_SeniorExecutive:=coGetTune('UP.STAFF.CATALOGS.SeniorExecutive');//Доп.характеристика "Руководитель высшего звена"'
  UP_STAFF_CATALOGS_MiddleManager  :=coGetTune('UP.STAFF.CATALOGS.MiddleManager');//', 'Доп.характеристика "Руководитель среднего звена"
  NPOEM_OWN_Raise_Protect          :=wGetTune ('NPOEM_OWN.Raise.Protect');//Использовать ограничения по подразделениям
  CanEditINClosePeriod             :=boGetTune('NPOEM_OWN.Raise.CanEditINClosePeriod');//Разрешить доступ к ведомостям в закрытых периодах

  //---------------------------------
  SetUpdateMode(true);
  //---------------------------------
  if wVisibleRun
  { sUserName :=UserName();
    if vZar_User.getfirst Zar_user=tsok {}
    isPodrShare:=GetPodrShare;
    //---------------------------------

    LoadVipRef(DataProtector, 'GP_Protector');
    DataProtector.LinkToExt(cfsGetCurrentContainerSelf, '', true);
    DataProtector.ProtectedStatusCtx := sci1EscIns;
    if wTypeDoc=100
    { DataProtector.ProtectedStatusCtx := sci1EscIns;
    }
    DataProtector.AutoPalette := true;
    if isPodrShare //- в это зачем.? прав по подраздению что ли не будет
    and wVisibleRun
    { // CLSF.ReScan; - будут проблемы - уберем
    }
    if (wIntMode and cgiPick)<>0
    {
    }
    pMarker.AutoSave := True;
    pMarker.LoadAuto := True;
    pMarker.StoreName := 'GP_KPI_DOC';
    pMarker.Caption   := (' Отмечено [%d] ');
    //-----------------------------
    RoleGroupName:='Мотивация персонала';
    UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
    if (UserAccessService=NullRef) {
        abort;
        exit;
    }
    if wTypeDoc=100
    { DataProtector.ProtectedStatusCtx := sci1EscIns;
      Status_Init(101);
    }
    else
    { Status_Init(wTypeDoc);
      if (UserAccessService.CanIns(wTypeDoc))
      { DataProtector.ProtectedStatusCtx := sci17EnIns;
      }
    }
    //-----------------------------
    StatusChange:=New(GP_StatusChange,InitForRoleGroup(UserAccessService.RoleGroup));
    //-----------------------------

  } //
} //Procedure LoadInterface(_wVisibleRun:boolean);

Function SetDocFieldsState: boolean;
{ var _CanEdit:boolean=True;
  _CanEdit:=CanEditTbl;
  var _CanDel:boolean=true;
  SetEditMode(_CanEdit);
  if not wVisibleRun exit;
  if BoLocked exit;
  if (UserAccessService.CanDel(GP_KPI_DOC.cStatus))
    SetHelpAndStatusContext(fCurMainFormatEdit, -1, sci18Esc, hcKeepCurrent)
  else
  { SetHelpAndStatusContext(fCurMainFormatEdit, -1, sci1Esc, hcKeepCurrent);
    _CanDel:=false;
  }

   if (StatusChange.CanChangeStatus(GP_KPI_DOC.cStatus)) {
      timelog('StatusChange.CanChangeStatus(GP_KPI_DOC.cStatus');
      if _CanDel
        SetHelpAndStatusContext(fCurMainFormatEdit, #GP_Status.Name, sci1348Esc, hcKeepCurrent);
      else
        SetHelpAndStatusContext(fCurMainFormatEdit, #GP_Status.Name, sci134Esc, hcKeepCurrent);

      SetHelpAndStatusContext(fCurMainFormat    , #GP_Status.Name, sci134Esc, hcKeepCurrent);
      SetInputLineFlags(fCurMainFormatEdit, #GP_Status.Name, inPickButtonDefault);
      SetInputLineFlags(fCurMainFormat    , #GP_Status.Name, inPickButtonDefault);
      //timelog('SetDocFieldsState - enable _status')
    } else {
      timelog('not StatusChange.CanChangeStatus(GP_KPI_DOC.cStatus');
      if _CanDel
        SetHelpAndStatusContext(fCurMainFormatEdit, #GP_Status.Name, sci18Esc, hcKeepCurrent);
      else
        SetHelpAndStatusContext(fCurMainFormatEdit, #GP_Status.Name, sci1Esc, hcKeepCurrent);
      SetHelpAndStatusContext(fCurMainFormat    , #GP_Status.Name, sci1Esc, hcKeepCurrent);
      SetInputLineFlags(fCurMainFormatEdit, #GP_Status.Name, 0);
      SetInputLineFlags(fCurMainFormat    , #GP_Status.Name, 0);
      //timelog('SetDocFieldsState - disable _status')
    }
  Result:=true
} //Function CanEdit: boolean;


//******************************************************************************
// HandleEvent таблиц
//******************************************************************************


//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
HandleEvent
cmInit:
{ LoadInterFace(true);
  if cRec=0
  { if ReadMyDsk(cRec,'GP_KPI_DOC_'+string(wTypeDoc)+'_crec',false) cRec:=0;
  }
  if cREc>0
  { if getfirst GP_KPI_DOC where (( cRec == GP_KPI_DOC.Nrec )) =tsok {}
  }
}
cmDone:
{ SaveMyDsk(GP_KPI_DOC.Nrec,'GP_KPI_DOC_'+string(wTypeDoc)+'_crec');
  UnLockAll(#GP_KPI_DOC);
}
cmOnVipLoad:
{ LoadInterFace(False)
}
cmPick:
{  case curField of
   //----------------------------
   #Executor.Fio:
   {
      var wK:word;
      var DummyMarker1, DummyMarker2: TPtr;

      DummyMarker1 := InitMarker('', 8, 10, 10);
      DummyMarker2 := InitMarker('', 8, 1, 1);
      wK:=0;
      pTmp:=GP_KPI_DOC.cExecutor;

      if (viCYPersons.Choice(DummyMarker1, 3, vfCanSelect, wK, cRec, DummyMarker2))
      {
        set GP_KPI_DOC.cExecutor:=viCYPersons.GetPsnByKindChoice(wK, cRec);
        //set NewExecutor:=GetPersonsFIO(BufNewStatement.cExecutor);
      }
      DoneMarker(DummyMarker1, '');
      DoneMarker(DummyMarker2, '');
   }
   //----------------------------
   #ChiefPost.Name,  //('Должность ответственного',,):Protect,NoDel;
   #ChiefDep.Code : // fnNewChiefPost:
   {
      var sTmp:string='';
      pTmp:=GP_KPI_DOC.cChiefStaffStr;
      if (RunInterface(GP_PickChiefPost, GP_KPI_DOC.cExecutor, pTmp, sTmp,GP_KPI_DOC.DocDate) <> cmCancel)
      {
        GP_KPI_DOC.cChiefStaffStr:=cRec;
        //set NewChiefPost:=sTmp;
      }
   }
   end;

} //cmPick
end;
end.

GP_KPI_DocEdit_Main_HotKey Menu
{
- 'Показать/скрыть колонки', cmManagerID, 'Показать/скрыть колонки',  ,'',,sci1Esc;
- 'Рассчитать ведомости'   , cmValue10  , 'Рассчитать ведомости',  ,'',,sci1Esc;
 -----------;
 - '~П~ечать',cmPrintDoc,'Печать ведомости',hcNoContext,'Ctrl+P',kbCtrlP,sci1Esc,,,, bmpPrint;
 - 'Печать дополнительных отчетов'         , cmValue2,'Печать ведомости',hcNoContext,,,sci1Esc,,,, bmpPrint;
 -----------;
- 'Фильтр на данные'     , cmFilterSave, 'Фильтр на данные', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;

}

GP_KPI_DocEdit_Edit_HotKey Menu
{
- 'Рассчитать ведомость'                , cmValue1  , 'Рассчитать ведомости',  ,'',,sci1Esc;
 -----------;
 - '~П~ечать',cmPrintDoc,'Печать ведомости',hcNoContext,'Ctrl+P',kbCtrlP,sci1Esc,,,, bmpPrint;
 - 'Печать дополнительных отчетов'         , cmValue2,'Печать ведомости',hcNoContext,,,sci1Esc,,,, bmpPrint;
 -----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;

}
