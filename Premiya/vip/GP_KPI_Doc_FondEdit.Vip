/*************************************************************************************************\
* Наименование: Фондовые ведомости                                                                *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |20/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#779          |20/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию
#include GetKau.Vih
#include CatFunc.Vih
#include GP_Status.vih
#include GP_StatusChange.vih
#include GP_StatusAccessEdit.vih
#include GP_VisibleHidden.vih //KBU
#include GP_Protector.Vih
#include GP_UserAccessService.vih
#include GP_KPI_RaiseEdit.Vih
#include GP_KPI_Doc_RaiseEdit_Sp.Vih
#include GP_Status.vih
#include GP_KPI_Alg.Vih
//-----------------------------------------
#include GP_KPI_Doc_FondEdit.Vih
//-----------------------------------------
#doc
Фондовые ведомости
#end
//----------------------------------------
Interface GP_KPI_Doc_FondEdit 'Фондовые ведомости' , EscClose;
//----------------------------------------
Show At (,,,);
//----------------------------------------
// Список фондов
//----------------------------------------
// для отображения закладок
Table Struct tmp_KPI_FOND
( Npp : Word
 ,cGp_KPI_FOND :comp
 ,Name  :string
 ,Code  :string[30]
 //дополнительные поля
   , fArrName   : Array [1..GP_KPI_Doc_Max_FLD_SP] of string   "Массив наименований полей спецификации"
   , fArrType   : Array [1..GP_KPI_Doc_Max_FLD_SP] of Word     "Тип полей спецификации"
   , fArrKodGr  : Array [1..GP_KPI_Doc_Max_FLD_SP] of Longint  "Аналитика полей спецификации"
   , fArrAlg    : Array [1..GP_KPI_Doc_Max_FLD_SP] of tNrec    "Алгоритмы полей спецификации"
   , fArrAlgChk : Array [1..GP_KPI_Doc_Max_FLD_SP] of tNrec    "Алгоритмы полей спецификации - контроль"
   , fArrOpt    : Array [1..GP_KPI_Doc_Max_FLD_SP] of Word     "Опции полей спецификации"
   , fArrLen    : Array [1..GP_KPI_Doc_Max_FLD_SP] of Word     "Ширина полей полей спецификации"
   , fArrRazr   : Array [1..GP_KPI_Doc_Max_FLD_SP] of Word     "Разрядность полей полей спецификации"

)
with index
(  tmp_KPI_RAISE01 = cGp_KPI_Fond
  ,tmp_KPI_RAISE02 = Name
  ,tmp_KPI_RAISE03 = NPP

);


//----------------------------------------
// Forward
//----------------------------------------
Function SetFormatSP :boolean;Forward;
Function MyGetFieldSpByNpp(_wNpp:longint):longint;Forward;
Function MyGetFieldSpByNppDo(_wNpp:longint):longint;Forward;
Procedure PositionChanged;Forward;

//------------------------------------
// декларация сложного фильтра
//------------------------------------
function isFilterAnCorrect(ww_nrec:comp): boolean; forward;

//----------------------------------------
#include ShowKau.Vpp
//----------------------------------------
var
//----------------------------------------

  pKatpodr: comp;
  pKatpodr_Ved: comp;//Для создания ведомости
  tmp_Post,tmp_Persons:comp;//Для функции руководитель подразделения

//-----------------------------------------
// Фильтры
//-----------------------------------------
   #mrkfld_(Fond)
   #mrkfld_(KatPodrIns)
   #mrkfld_(FondIns)


   wType_Flt      :word;
   wYear_Flt      :word;
   wMonth_b_Flt   :word;
   wMonth_e_Flt   :word;
   //-----------------------
   pFond_Flt      :comp;
   pFond_Ins      :comp;
Create View
as select tmp_KPI_FOND.*
//--------------------------------
 , GetFieldValS(3,01) (FieldName=FieldSp01,FieldTitle='Поле 01')
 , GetFieldValS(3,02) (FieldName=FieldSp02,FieldTitle='Поле 02')
 , GetFieldValS(3,03) (FieldName=FieldSp03,FieldTitle='Поле 03')
 , GetFieldValS(3,04) (FieldName=FieldSp04,FieldTitle='Поле 04')
 , GetFieldValS(3,05) (FieldName=FieldSp05,FieldTitle='Поле 05')
 , GetFieldValS(3,06) (FieldName=FieldSp06,FieldTitle='Поле 06')
 , GetFieldValS(3,07) (FieldName=FieldSp07,FieldTitle='Поле 07')
 , GetFieldValS(3,08) (FieldName=FieldSp08,FieldTitle='Поле 08')
 , GetFieldValS(3,09) (FieldName=FieldSp09,FieldTitle='Поле 09')
 , GetFieldValS(3,10) (FieldName=FieldSp10,FieldTitle='Поле 10')
 , GetFieldValS(3,11) (FieldName=FieldSp11,FieldTitle='Поле 11')
 , GetFieldValS(3,12) (FieldName=FieldSp12,FieldTitle='Поле 12')
 , GetFieldValS(3,13) (FieldName=FieldSp13,FieldTitle='Поле 13')
 , GetFieldValS(3,14) (FieldName=FieldSp14,FieldTitle='Поле 14')
 , GetFieldValS(3,15) (FieldName=FieldSp15,FieldTitle='Поле 15')
 , GetFieldValS(3,16) (FieldName=FieldSp16,FieldTitle='Поле 16')
 , GetFieldValS(3,17) (FieldName=FieldSp17,FieldTitle='Поле 17')
 , GetFieldValS(3,18) (FieldName=FieldSp18,FieldTitle='Поле 18')
 , GetFieldValS(3,19) (FieldName=FieldSp19,FieldTitle='Поле 19')
 , GetFieldValS(3,20) (FieldName=FieldSp20,FieldTitle='Поле 20')
//------------------------------
 , Double(GetFieldValS(3,01)) (FieldName=doFieldSp01,FieldTitle='Поле 01')
 , Double(GetFieldValS(3,02)) (FieldName=doFieldSp02,FieldTitle='Поле 02')
 , Double(GetFieldValS(3,03)) (FieldName=doFieldSp03,FieldTitle='Поле 03')
 , Double(GetFieldValS(3,04)) (FieldName=doFieldSp04,FieldTitle='Поле 04')
 , Double(GetFieldValS(3,05)) (FieldName=doFieldSp05,FieldTitle='Поле 05')
 , Double(GetFieldValS(3,06)) (FieldName=doFieldSp06,FieldTitle='Поле 06')
 , Double(GetFieldValS(3,07)) (FieldName=doFieldSp07,FieldTitle='Поле 07')
 , Double(GetFieldValS(3,08)) (FieldName=doFieldSp08,FieldTitle='Поле 08')
 , Double(GetFieldValS(3,09)) (FieldName=doFieldSp09,FieldTitle='Поле 09')
 , Double(GetFieldValS(3,10)) (FieldName=doFieldSp10,FieldTitle='Поле 10')
 , Double(GetFieldValS(3,11)) (FieldName=doFieldSp11,FieldTitle='Поле 11')
 , Double(GetFieldValS(3,12)) (FieldName=doFieldSp12,FieldTitle='Поле 12')
 , Double(GetFieldValS(3,13)) (FieldName=doFieldSp13,FieldTitle='Поле 13')
 , Double(GetFieldValS(3,14)) (FieldName=doFieldSp14,FieldTitle='Поле 14')
 , Double(GetFieldValS(3,15)) (FieldName=doFieldSp15,FieldTitle='Поле 15')
 , Double(GetFieldValS(3,16)) (FieldName=doFieldSp16,FieldTitle='Поле 16')
 , Double(GetFieldValS(3,17)) (FieldName=doFieldSp17,FieldTitle='Поле 17')
 , Double(GetFieldValS(3,18)) (FieldName=doFieldSp18,FieldTitle='Поле 18')
 , Double(GetFieldValS(3,19)) (FieldName=doFieldSp19,FieldTitle='Поле 19')
 , Double(GetFieldValS(3,20)) (FieldName=doFieldSp20,FieldTitle='Поле 20')

From

//, GP_KPI_GroupPers
  tmp_KPI_FOND
, KatPodr KatPodr_SP
, KatPodr KAtPodr_Ved
, GP_KPI_FOND GP_KPI_FOND_INS
, SPKAU
//------- фильтры
 , GP_TypeDocs    TypeDocs_Flt
 , GP_KPI_FOND    Fond_Flt
where ((
    GP_KPI_Doc.cGP_KPI_FOND == GP_KPI_FOND.Nrec
and GP_KPI_Doc.cGP_KPI_FOND == tmp_KPI_FOND.cGp_KPI_FOND
and 1                       == GP_KPI_Fields.wType
and GP_KPI_Doc.cGP_KPI_FOND == GP_KPI_Fields.cDoc
and GP_KPI_Fields.KodGroup        == SpKau.KodGrKau
//--------------------------
and GP_KPI_Doc_SP.cKatPodr  == Katpodr_Sp.Nrec
//---------------
and coGP_KPI_Doc    == GP_StatusChangeLog.wTbl
and GP_KPI_Doc.Nrec == GP_StatusChangeLog.cDoc
//---------------
and wTypeDoc_Status == Gp_TypeDocs_Find.wType(noindex)
and pFond_Ins       == GP_KPI_FOND_INS.Nrec
//-------------------
and pKatPodr_Ved == KatPodr_Ved.Nrec
//------- фильтры
and wc_nrec == TypeDocs_Flt.Nrec
and wc_nrec == Fond_Flt.Nrec
))
Bounds byKatpodr pKatPodr_flt   == GP_KPI_Doc.cKatPodr(noindex) ordered by TableOrder
Bounds byMonth wMonth_b_Flt <<= GP_KPI_Doc.wMonth(noindex)
           and wMonth_e_Flt >>= GP_KPI_Doc.wMonth(noindex)
          ordered by TableOrder
Bounds byYear      wYear_Flt   == GP_KPI_Doc.wYear(noindex) ordered by TableOrder
Bounds byStatus    pStatus_Flt == GP_KPI_Doc.cStatus(noindex) ordered by TableOrder
Bounds byFond      pFond_Flt   == GP_KPI_Doc.cGP_KPI_FOND(noindex) ordered by TableOrder
condition FilterAn = // использование сложного фильтра
  (isFilterAnCorrect(GP_KPI_DOC.Nrec))

;
//------------------------------------------------------
Create view vOst
var
  _wMonth : word;
  _wYear : word;
From GP_KPI_Doc,GP_KPI_DocSumFond, GP_KPI_FIELDS
where ((
        101     == GP_KPI_DOC.wType
 and    _wMonth == GP_KPI_DOC.wMonth
 and    _wYear  == GP_KPI_DOC.wYear
 and GP_KPI_Doc.wType == GP_KPI_DocSumFond.wType
 and GP_KPI_Doc.Nrec  == GP_KPI_DocSumFond.cDoc
 and 1                              == GP_KPI_Fields.wType
 and GP_KPI_DocSumFond.cGP_KPI_FOND == GP_KPI_FIELDS.cDoc


));

//*************************************************8
QuickChoice qcByCode
{
  AcceptField = GP_KPI_Doc.Nrec;
  ViewField = GP_KPI_Doc.DocNumber;
  ViewField = GP_KPI_Doc.wYear;
  ViewField = GP_KPI_Doc.wMonth;
  ViewField = GP_KPI_Doc.wKvartal;
  ViewField = GP_KPI_FOND.Name;
  // только текстовый поля!
  SearchField = GP_KPI_Doc.DocNumber;
  OnOpen : {
  }
  OnClose : {
    cRec  := GP_KPI_Doc.Nrec;
    cRecSP:=0;
  }
}
QuickChoice qcByName
{
  AcceptField = GP_KPI_Doc.Nrec;
  ViewField = GP_KPI_Doc.DocNumber;
  ViewField = GP_KPI_Doc.wYear;
  ViewField = GP_KPI_Doc.wMonth;
  ViewField = GP_KPI_Doc.wKvartal;
  ViewField = GP_KPI_FOND.Name;

  // только текстовый поля!
  SearchField = GP_KPI_Doc.DocNumber;
  OnOpen : {
  }
  OnClose : {
    cRec  := GP_KPI_Doc.Nrec;
    cRecSP:=0;
  }
}
  //****************************************************************************
  // Функции
  //****************************************************************************
  //-----------------------------
  // Цвет полей
  //-----------------------------
  #GP_KPI_Doc_Color_SP_Func
  //------------------------------------
  // сохранить параметры
  //------------------------------------
  Procedure SaveParam;
  { SaveMyDsk(wFilter  ,GetInterfaceName+'_wFilter');
    SaveMyDsk(wYear_Flt,GetInterfaceName+'_wYear_Flt');
    SaveMyDsk(wMonth_b_Flt,GetInterfaceName+'_wMonth_b');
    SaveMyDsk(wMonth_e_Flt,GetInterfaceName+'_wMonth_e');
    SaveMyDsk(wType_Flt,GetInterfaceName+'_wType_Flt');
    SaveMyDsk(pKatPodr_Ved,GetInterfaceName+'pKatPodr_Ved');
    //-----------------------
    DoneMarker(Marker_Fond_A, '' );
    DoneMarker(Marker_Status_A, '' );
    DoneMarker(Marker_KatPodr_A, '' );
    //-----------------------
    DoneMarker(Marker_Fond    , GetInterfaceName+'_Fond' );
    DoneMarker(Marker_Katpodr , GetInterfaceName+'_Katpodr'  );
    DoneMarker(Marker_Status  , GetInterfaceName+'_Status'   );
    //-- для создания
    DoneMarker(Marker_KatPodrIns , GetInterfaceName+'_KatpodrIns'  );
    DoneMarker(Marker_FondIns    , GetInterfaceName+'_FondIns'  );
  } //Procedure SaveParam;

  //------------------------------------
  // восстановить параметры
  //------------------------------------
  Procedure ReadParam;
  { if not ReadMyDsk(wFilter,GetInterfaceName+'_wFilter',false) wFilter:=0;
    if not ReadMyDsk(wYear_Flt,GetInterfaceName+'_wYear_Flt',false)  wYear_Flt:=YearRas;
    if not ReadMyDsk(wMonth_b_Flt,GetInterfaceName+'_wMonth_b',false) wMonth_b_Flt:=MonthRas;
    if not ReadMyDsk(wMonth_e_Flt,GetInterfaceName+'_wMonth_e',false) wMonth_e_Flt:=MonthRas;
    if not ReadMyDsk(pKatPodr_Ved,GetInterfaceName+'pKatPodr_Ved',false) pKatPodr_Ved:=0;

    Marker_Fond      :=InitMarker(GetInterfaceName+'_Fond'     , 8, 50, 10, True);
    Marker_KatPodr   :=InitMarker(GetInterfaceName+'_KatPodr'  , 8, 50, 10, True);
    Marker_Status    :=InitMarker(GetInterfaceName+'_Status'   , 8, 50, 10, True);

    Marker_Fond_A     :=InitMarker('' , 8, 50, 10, True);
    Marker_KatPodr_A  :=InitMarker('' , 8, 50, 10, True);
    Marker_Status_A   :=InitMarker('' , 8, 50, 10, True);
    //-- для создания
    Marker_KatPodrIns :=InitMarker(GetInterfaceName+'_KatpodrIns' , 8, 50, 10, True);
    Marker_FondIns    :=InitMarker(GetInterfaceName+'_FondIns'  , 8, 50, 10, True);

  } //  Procedure ReadParam;

  //------------------------------------
  // декларация сложного фильтра
  //------------------------------------
  function isFilterAnCorrect(ww_nrec:comp): boolean; cacheable;
  { #__UNUSED__(ww_nrec)
    Result:=true;
    if isPodrShare
    { if not EnablePodr(GP_KPI_Doc.cKatPodr) then
      { Result:=false;
        exit;
      }
    }
    if IsBitCTW(wFilter,3)
    { if Count_Fond>1
      { If not FoundMarker(Marker_Fond_A,GP_KPI_Doc.cGP_KPI_FOND)
        { Result:=false;
          Exit;
        }
      }
    }
    if IsBitCTW(wFilter,4)
    { if Count_Status>1
      { If not FoundMarker(Marker_Status_A,GP_KPI_Doc.cStatus)
        { Result:=false;
          Exit;
        }
      }
    }
    if IsBitCTW(wFilter,5)
    { if Count_KatPodr>1
      { If not FoundMarker(Marker_Katpodr_A,GP_KPI_Doc.cKatpodr)
        { Result:=false;
          Exit;
        }
      }
    }

  }//function isFilterAnCorrect(ww_nrec:comp): boolean;

    //-------------------------------------------
  // скопировать фильтры в данные для отборв
  //-------------------------------------------
  Procedure CopyToA;
  { CopyMarker(Marker_Fond_A     ,Marker_Fond);
    CopyMarker(Marker_Katpodr_A  ,Marker_Katpodr);
    CopyMarker(Marker_Status_A   ,Marker_Status);
  } //Procedure CopyToA;

  //-------------------------------------------
  // восстановить данные для задания фильтрации
  // из данных для отбора
  //-------------------------------------------
  Procedure RestFromA;
  { CopyMarker(Marker_Fond     ,Marker_Fond_A );
    CopyMarker(Marker_Katpodr  ,Marker_Katpodr_A);
    CopyMarker(Marker_Status   ,Marker_Status_A);
  } //Procedure RestFromA;

  //-------------------------------------------
  #doc
    Установить ограничения
  #end
  Function SetFilterBounds(_IsArch:word) : boolean;
  { #__UNUSED__(_IsArch)
    Result:=false;
    isFilterRun:=True;
    if ConditionActiveInLeave(tcFilterAn, #GP_KPI_Doc)
    { PopConditionForLeave(tcFilterAn, #GP_KPI_Doc);
    }
    If BoundActive(tbByYear    ) SubBounds(tbByYear    );
    If BoundActive(tbByMonth   ) SubBounds(tbByMonth   );
    If BoundActive(tbByFond    ) SubBounds(tbByFond    );
    If BoundActive(tbByKatpodr ) SubBounds(tbByKatPodr );
    If BoundActive(tbByStatus  ) SubBounds(tbByStatus  );
    //-----------------------
    CopyToA;
    //-----------------------
    ClearFuncCache; // очистим кэш функций
    var need_FilterAn:boolean=false;
    if IsBitCTW(wFilter,1)
    {  AddBounds(tbByYear);
    }
    if IsBitCTW(wFilter,2)
    {  if wMonth_b_flt>wMonth_e_flt wMonth_b_flt:=wMonth_e_flt;
       AddBounds(tbByMonth);
    }
    if IsBitCTW(wFilter,3)
    {  Count_Fond:=GetMarkerCount(Marker_Fond);
       GetMarker(Marker_Fond,0,pFond_Flt);
       if Count_Fond=1
       { AddBounds(tbByFond);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,4)
    {  Count_Status:=GetMarkerCount(Marker_Status);
       GetMarker(Marker_Status,0,pStatus_flt);
       if Count_Status=1
       {
         AddBounds(tbByStatus);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,5)
    {  Count_Katpodr:=GetMarkerCount(Marker_Katpodr);
       GetMarker(Marker_Katpodr,0,pKatpodr_Flt);
       if Count_Katpodr=1
       {
         AddBounds(tbByKatpodr);
       }
       else need_FilterAn:=true;
    }
    if isPodrShare  need_FilterAn:=true;
    // использование сложного фильтра
    if need_FilterAn
    { PushConditionForLeave(tcFilterAn, #GP_KPI_DOC);
    }
    ReReadRecord(#GP_KPI_Doc);
    Result:=true;
    isFilterRun:=False;

  } //Function SetFilterBounds : boolean;

  //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_Fond
    { #mrkfiltr_(Fond_Flt,Fond,Nrec,wc_nrec,Fond_Flt.Name);
    }
    if _Field=0 or _Field=#Filtr_KatPodr
    { #mrkfiltr_(KatPodr_Flt,KatPodr,Nrec,wc_nrec,KatPodr_Flt.Name);
    }
    if _Field=0 or _Field=#Filtr_Status
    { #mrkfiltr_(Status_Flt,Status,Nrec,wc_nrec,Status_Flt.Name);
    }
    if _Field=0 or _Field=#Filtr_KatPodrIns
    { #mrkfiltr_(KatPodr_Flt,KatPodrIns,Nrec,wc_nrec,KatPodr_Flt.Name);
    }
    if _Field=0 or _Field=#Filtr_FondIns
    { #mrkfiltr_(Fond_Flt,FondIns,Nrec,wc_nrec,Fond_Flt.Name);
    }
    ReScanPanel(#TypeDocs_Flt);
  } //Procedure SetFilterNM(_Field:longint)



//-------------------------------------------------
// Получить первую позицию спецификации
//-------------------------------------------------
Function GetFirstSP:boolean;
{ Result:=GetFirst GP_Kpi_Doc_Sp=tsok;
}//Function GetFirstSP:boolean;

//-------------------------------------------------
// Получить следующую позицию спецификации
//-------------------------------------------------
Function GetNextSP:boolean;
{
  Result:=GetNext GP_Kpi_Doc_Sp=tsok;

}//Function GetNextSP:boolean;

//-------------------------------------------------
// Установить раздел
//-------------------------------------------------
Function SetRazdel(nRazdel:word): boolean;
{ #__UNUSED__(nRazdel)
  Result:=true;
}//Function SetRazdel(nRazdel:word): boolean;

//-------------------------------------------------
//получить наименование раздела
//-------------------------------------------------
Function GetRazdelName:string;
{ Result:='';
  Result:=GP_KPI_Fond.Name;

} //Function GetRazdelName:string;

//-------------------------------------------------
//Получить наименование поля
//-------------------------------------------------
Function GetFieldTitle(wNpp:word):string;
{ #__UNUSED__(wNpp)
  Result:='';
  Result:=tmp_KPI_Fond.fArrName[wNpp];
}//Function GetFieldTitle(wNpp:word):string;

//-------------------------------------------------
// Получить наименование строки
//-------------------------------------------------
Function GetNameSP:string;
{ Result:='';
  Result:=Katpodr_Sp.Kod;
}//Function GetNameSP:string;



//------------------------------------------
// Создание документов
//------------------------------------------
Function InsetDocSp(_cPodr:comp):boolean;
{ Result:=True;
  if getfirst GP_KPI_Doc_SP where ((
      GP_KPI_DOC.Nrec  == GP_KPI_Doc_SP.cGP_KPI_Doc
  and _cPodr             == GP_KPI_Doc_SP.cKatpodr(noindex)
    ))<>tsok
  { clearbuffer(#GP_KPI_Doc_SP);
    GP_KPI_Doc_SP.wType      :=GP_KPI_DOC.wType;
    GP_KPI_Doc_SP.cGP_KPI_Doc:=GP_KPI_DOC.Nrec ;
    GP_KPI_Doc_SP.cKatpodr   :=_cPodr;
    Insert current GP_KPI_Doc_SP;
  }
//  timelog('GP_KPI_Doc_FondEdit->InsertDocSP:_cPodr='+string(_cPodr,0,0)
//            +',GP_KPI_Doc_SP.cKatpodr='+string(GP_KPI_Doc_SP.cKatpodr,0,0));
} //Function InsetDocSp;
//----------------------
Function InsertDoc :boolean;
var ii:longint;
    _DTB, _DTE:date;
    _PDoc:comp;
    _cPodr:comp;
{ _PDoc:=0;
  Timelog('GP_KPI_Doc_FomdEdit->InsertDoc');
  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm,
          'Создание фондовых ведомостей', GetMarkerCount(Marker_KatpodrIns));
  Status_Init(wTypeDoc);
  _DTB:=date(1,wmonth_b_flt,wYear_Flt);
  _DTE:=date(Last_day(_DTB),wmonth_b_flt,wYear_Flt);
  ClearBuffer(#GP_KPI_DOC);
  _cPodr:=0;

  //---------------------------------------------
  // сначала проверим на закрытость
  For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
  { if not GetMarker(Marker_KatpodrIns,ii,wc_Nrec) continue;
    if Check_KatPodr_Arh(wc_Nrec,_DTB)
    { DeleteMarker(Marker_KatpodrIns,wc_Nrec);
      ii--; // надо сместиться
    }
  } //For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
  _cPodr:=pKatPodr_Ved;
  if _cPodr=0
  { GetMarker(Marker_KatpodrIns,0,wc_Nrec);
    _cPodr:=GetKatPodrUp(wc_nrec);
  }
  GP_KPI_DOC.wType   :=wTypeDoc;
  GP_KPI_DOC.cKatpodr:=_cPodr;
  GP_KPI_DOC.wYear   :=wYear_Flt;
  GP_KPI_DOC.wMonth  :=wMonth_b_flt;
  GP_KPI_DOC.DocCreate:=_CurDateTime;
  GP_KPI_DOC.cCreator :=UserId;
  GP_KPI_DOC.cStatus  :=Status.GetDefault;
  GP_KPI_DOC.DocNumber:=GetNextDocNumber(wYear_Flt);
  GP_KPI_DOC.DocDate  :=Cur_Date;
  GP_KPI_DOC.cGP_KPI_FOND:=pFond_Ins;
  insert current GP_KPI_DOC;
  _PDoc:= GP_KPI_DOC.Nrec;
  For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
  { if Not NextVisual then break;
    if not GetMarker(Marker_KatpodrIns,ii,wc_Nrec) continue;
    _cPodr:=GetKatPodrUp(wc_nrec);
    timelog('GP_KPI_Doc_FondEdit->InsertDoc:KatPodr_flt.kod='+KatPodr_flt.kod
       +',_cPodr='+string(_cPodr,0,0)+','+string(KatPodr_flt.nrec,0,0));
    InsetDocSp(_cPodr);
  } //For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
  StopVisual('',0);
  ReReadRecord(#GP_KPI_DOC);
  ShowErrors;
  if getfirst GP_KPI_DOC where ((     _PDoc==GP_KPI_DOC.Nrec ))=tsok {}
  PositionChanged;
  ReScanPanel(#GP_KPI_DOC);
  Result:=True;
  Timelog('GP_KPI_Doc_FomdEdit->InsertDoc Finish');

} //Function InsertDoc :boolean;

//--------------------------------------------
#doc
  Установка статуса документа
#end
Function SetDocFieldsState: boolean;
{ Result:=Inherited::SetDocFieldsState;
  if (StatusChange.CanChangeStatus(GP_KPI_DOC.cStatus))
  { cfsSetProp('c_ brDocFond_GP_STATUS.NAME_Статус_док-та','ButtonType',inPickButton); //WINCOMM.INC
    cfsSetProp('i_ScrFondEdit_GP_STATUS.NAME','ButtonType',inPickButton);
  }
}//Function SetDocFieldsState: boolean;


//===============================================
// обновить связанные окна
//===============================================
Procedure PositionChanged;
{
  if boWinEdit=True
  { SetFormatSP;
  }
  SetDocFieldsState;
}//Procedure PositionChanged;


//===============================================
// Перечитать запись при изменении в связанных окнах
//===============================================
Procedure onEvent_ReReadContainer;
{ ReScanPanel(#GP_KPI_DOC);

} //Procedure onEvent_ReReadContainer;


//========================================================
// Визуальная часть
//========================================================
Window wnFilter 'Установите фильтры'  Cyan, EscClose;
  Show at (,,50,9);
Screen scrFilter 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wFilter :NoProtect;
  wYear_Flt:NoProtect;
  wMonth_b_Flt : NoProtect;
  wMonth_e_Flt : NoProtect;
  Filtr_Fond     : PickButton,Protect;
  Filtr_Status   : PickButton,Protect;
  Filtr_KatPodr  : PickButton,Protect;
Buttons
  cmOk    ,,, 'Установить фильтр', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Фильтр по`
 [.] Году`          .@@@@@@@
 [.] Месяцам`       с .@@@@@@@@@@ по .@@@@@@@@@@
 [.] Фонду         `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Статусу       `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Подразделению `.@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnFilter,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;

//----------------------------------------------
// Окно параметров вставки записи
//----------------------------------------------
Window wnInsert 'Установите параметры создания'  Cyan, EscClose;
  Show at (,,50,9);
Screen scrInsert 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wYear_Flt:NoProtect;
  wMonth_b_Flt : NoProtect;
  GP_KPI_FOND_INS.Name : PickButton,Protect;
  Filtr_KatPodrIns  : PickButton,Protect;
  [Podr_Ved] KatPodr_Ved.Kod+' '+KatPodr_Ved.Name  : PickButton,Protect;
Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
 `Год`          .@@@@@@@
 `Месяц`        .@@@@@@@
 `Фонд         `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразделения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразд.шапки`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{
  //--------------------------
  wYear_Flt   :=YearRas;
  wMonth_b_Flt:=MonthRas;
  //--------------------------
  isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ if GetMarkerCount(Marker_KatPodrIns)=0
  { Message('Задайте фильтр по подразделениям!');
    exit;
    abort;
  }
  if pFond_Ins=0
  { Message('Задайте фонд!');
    exit;
    abort;
  }
  if wYear_Flt<YearRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    exit;
    abort;
  }
  if wMonth_b_Flt=0
  { Message('Не задан месяц формирования');
    abort;

  }
  if wYear_Flt=YearRas and wMonth_b_Flt<MonthRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    abort;
  }

  CloseWindowEx(wnInsert,cmDefault)

}
end;// HandleEvent
end; //Windows wnInsert 'Установите фильтры' , Cyan, EscClose;

//----------------------------------------------
// Окно параметров вставки записи
//----------------------------------------------
Window wnInsOst 'Установите параметры формирования остатков'  Cyan, EscClose;
  Show at (,,50,9);
Screen scrInsOst 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wYear_Flt:NoProtect;
  wMonth_b_Flt : NoProtect;
Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
 `Год`          .@@@@@@@
 `Месяц`        .@@@@@@@

 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{
  //--------------------------
  if wYear_Flt=0    wYear_Flt   :=YearRas;
  if wMonth_b_Flt=0 wMonth_b_Flt:=MonthRas;
  //--------------------------
  isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ if wYear_Flt<YearRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    exit;
    abort;
  }
  if wMonth_b_Flt=0
  { Message('Не задан месяц формирования');
    abort;

  }
  if wYear_Flt=YearRas and wMonth_b_Flt<MonthRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    abort;
  }
  CloseWindowEx(wnInsOst,cmDefault)
}
end;// HandleEvent
end; //Windows wnInsert 'Установите фильтры' , Cyan, EscClose;

//-----------------------------------------
Window wnEdit 'Редактирование фондовой ведомости' ;
Show at (,,120,30);
Screen ScrFondEdit;
Show at (,,,9);
Table GP_KPI_Doc;
Fields
  GP_KPI_Doc.DocCreate    ('Дата создания')  : Protect,NoDel;
  x$users.XU$FULLNAME     ('пользователь, создавший документ')  : Protect,NoDel;
  GP_KPI_Doc.DocNumber    ('Номер документа') : NoProtect,PickButton,NoDel;
  GP_KPI_Doc.DocDate      ('Дата документа') : NoProtect;
  GP_KPI_Doc.Summa        ('Итого по ведомости') : ['\2p[|-]366`666`666`666`666.88'],Protect;
  Katpodr.Kod             ('Код подразделения') :[6],Protect,NoDel;
  Katpodr.Name            ('Наименование подразделения') :[25],Protect,NoDel;
  GP_Status.Name          ('Статус документа',,sci1378Esc) :Protect,PickButton,EditButton,NoDel;
  GP_KPI_FOND.Name        ('Тип ведомости') :[15],Protect,NoDel;
  GP_KPI_Doc.wYear        ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       ('Месяц ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wKvartal     ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.WYEARKVARTAL ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.Description  ('Описание')     :NoProtect,NoPickButton,NoDel;
  //------------------------------
  ChiefPost.Name ('Должность ответственного',,):Protect,PickButton,NoDel;
  ChiefDep.Code  ('Подразделение ответственного',,):Protect,PickButton,NoDel;
  Executor.Fio            ('Исполнитель'):Protect,PickButton,NoDel;
  [RecordProtected] if (boLocked,'Редактир. '
    +sGetAttrID(coGP_KPI_DOC,GP_KPI_DOC.Nrec,VA_GP_KPI_DOC_LOCK),'')
      ('Признак редактирования записи другим пользователем') : {Font = {Bold = (true); Color = ColorSysRed }}, Skip, Centered;
Buttons
  cmValue11    ,,, 'Рассчитать', hcAllBOk, scGalDial;
<<
  `Дата создания`.@@@@@@@@@@@@@@ `Автор`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.Расчет.>
  `Номер`        .@@@@@@@@@@@@@@ `Дата` .@@@@@@@@@@@ `Сумма`.@@@@@@@@@@@@@
  `Подразделение`.@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Статус`       .@@@@@@@@@@@@@@@@@@@@@@ `Фонд`  .@@@@@@@@@@@@@@@@@@@@@@@@
  `Год`          .@@@@@  `Месяц` .@@@@ `Квартал` .@@@@ `Год кв.` .@@@@@@@@
  `Описание`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Должность ответственного` .@@@@@@@@@@@@@@@@@@@ `Подразделение`.@@@@@@@@
  `Исполнитель`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@
>>
end;//Screen ScrRaiseEdit;
Screen ScrFondEdit01;
Show at (,10,,10);
<<
 `Спецификация фондовой ведомости`
>>
end;
Screen ScrFondNotVib;
Show at (,11,,);
<<

   `Выберите фонд`

>>
end;
Browse brFondSp;
Show at (,11,,);
Table GP_KPI_Doc_SP;
Fields
  KatPodr_Sp.Kod 'Код'#13'подр-я' :[6],Protect,PickButton,NoDel;
  KatPodr_Sp.Name 'Наименование'#13'подразделения' :[20],PickButton,Protect,NoDel;
  //KatPodr_Sp.Fio
  [Boss_Fio]  GetKatPodr_Boss_Fio(GP_KPI_Doc_SP.cKatPodr) 'Руководитель'  :[25],Protect,NoDel;
  FieldSp01   'Поле 01' :[10],Protect,noDel,{Font={Color=GetColorSp(0,01)}},{InputMask = sArrFieldSpMask[01]},QuickChoice;
  doFieldSp01 'Поле 01' :[10],Protect,noDel,{Font={Color=GetColorSp(0,01)}},{InputMask = sArrFieldSpMask[01]},browseSum(' ');
  FieldSp02   'Поле 02' :[10],Protect,noDel,{Font={Color=GetColorSp(0,02)}},{InputMask = sArrFieldSpMask[02]},QuickChoice;
  doFieldSp02 'Поле 02' :[10],Protect,noDel,{Font={Color=GetColorSp(0,02)}},{InputMask = sArrFieldSpMask[02]},browseSum(' ');
  FieldSp03   'Поле 03' :[10],Protect,noDel,{Font={Color=GetColorSp(0,03)}},{InputMask = sArrFieldSpMask[03]},QuickChoice;
  doFieldSp03 'Поле 03' :[10],Protect,noDel,{Font={Color=GetColorSp(0,03)}},{InputMask = sArrFieldSpMask[03]},browseSum(' ');
  FieldSp04   'Поле 04' :[10],Protect,noDel,{Font={Color=GetColorSp(0,04)}},{InputMask = sArrFieldSpMask[04]},QuickChoice;
  doFieldSp04 'Поле 04' :[10],Protect,noDel,{Font={Color=GetColorSp(0,04)}},{InputMask = sArrFieldSpMask[04]},browseSum(' ');
  FieldSp05   'Поле 05' :[10],Protect,noDel,{Font={Color=GetColorSp(0,05)}},{InputMask = sArrFieldSpMask[05]},QuickChoice;
  doFieldSp05 'Поле 05' :[10],Protect,noDel,{Font={Color=GetColorSp(0,05)}},{InputMask = sArrFieldSpMask[05]},browseSum(' ');
  FieldSp06   'Поле 06' :[10],Protect,noDel,{Font={Color=GetColorSp(0,06)}},{InputMask = sArrFieldSpMask[06]},QuickChoice;
  doFieldSp06 'Поле 06' :[10],Protect,noDel,{Font={Color=GetColorSp(0,06)}},{InputMask = sArrFieldSpMask[06]},browseSum(' ');
  FieldSp07   'Поле 07' :[10],Protect,noDel,{Font={Color=GetColorSp(0,07)}},{InputMask = sArrFieldSpMask[07]},QuickChoice;
  doFieldSp07 'Поле 07' :[10],Protect,noDel,{Font={Color=GetColorSp(0,07)}},{InputMask = sArrFieldSpMask[07]},browseSum(' ');
  FieldSp08   'Поле 08' :[10],Protect,noDel,{Font={Color=GetColorSp(0,08)}},{InputMask = sArrFieldSpMask[08]},QuickChoice;
  doFieldSp08 'Поле 08' :[10],Protect,noDel,{Font={Color=GetColorSp(0,08)}},{InputMask = sArrFieldSpMask[08]},browseSum(' ');
  FieldSp09   'Поле 09' :[10],Protect,noDel,{Font={Color=GetColorSp(0,09)}},{InputMask = sArrFieldSpMask[09]},QuickChoice;
  doFieldSp09 'Поле 09' :[10],Protect,noDel,{Font={Color=GetColorSp(0,09)}},{InputMask = sArrFieldSpMask[09]},browseSum(' ');
  FieldSp10   'Поле 10' :[10],Protect,noDel,{Font={Color=GetColorSp(0,10)}},{InputMask = sArrFieldSpMask[10]},QuickChoice;
  doFieldSp10 'Поле 10' :[10],Protect,noDel,{Font={Color=GetColorSp(0,10)}},{InputMask = sArrFieldSpMask[10]},browseSum(' ');
  FieldSp11   'Поле 11' :[10],Protect,noDel,{Font={Color=GetColorSp(0,11)}},{InputMask = sArrFieldSpMask[11]},QuickChoice;
  doFieldSp11 'Поле 11' :[10],Protect,noDel,{Font={Color=GetColorSp(0,11)}},{InputMask = sArrFieldSpMask[11]},browseSum(' ');
  FieldSp12   'Поле 12' :[10],Protect,noDel,{Font={Color=GetColorSp(0,12)}},{InputMask = sArrFieldSpMask[12]},QuickChoice;
  doFieldSp12 'Поле 12' :[10],Protect,noDel,{Font={Color=GetColorSp(0,12)}},{InputMask = sArrFieldSpMask[12]},browseSum(' ');
  FieldSp13   'Поле 13' :[10],Protect,noDel,{Font={Color=GetColorSp(0,13)}},{InputMask = sArrFieldSpMask[13]},QuickChoice;
  doFieldSp13 'Поле 13' :[10],Protect,noDel,{Font={Color=GetColorSp(0,13)}},{InputMask = sArrFieldSpMask[13]},browseSum(' ');
  FieldSp14   'Поле 14' :[10],Protect,noDel,{Font={Color=GetColorSp(0,14)}},{InputMask = sArrFieldSpMask[14]},QuickChoice;
  doFieldSp14 'Поле 14' :[10],Protect,noDel,{Font={Color=GetColorSp(0,14)}},{InputMask = sArrFieldSpMask[14]},browseSum(' ');
  FieldSp15   'Поле 15' :[10],Protect,noDel,{Font={Color=GetColorSp(0,15)}},{InputMask = sArrFieldSpMask[15]},QuickChoice;
  doFieldSp15 'Поле 15' :[10],Protect,noDel,{Font={Color=GetColorSp(0,15)}},{InputMask = sArrFieldSpMask[15]},browseSum(' ');
  FieldSp16   'Поле 16' :[10],Protect,noDel,{Font={Color=GetColorSp(0,16)}},{InputMask = sArrFieldSpMask[16]},QuickChoice;
  doFieldSp16 'Поле 16' :[10],Protect,noDel,{Font={Color=GetColorSp(0,16)}},{InputMask = sArrFieldSpMask[16]},browseSum(' ');
  FieldSp17   'Поле 17' :[10],Protect,noDel,{Font={Color=GetColorSp(0,17)}},{InputMask = sArrFieldSpMask[17]},QuickChoice;
  doFieldSp17 'Поле 17' :[10],Protect,noDel,{Font={Color=GetColorSp(0,17)}},{InputMask = sArrFieldSpMask[17]},browseSum(' ');
  FieldSp18   'Поле 18' :[10],Protect,noDel,{Font={Color=GetColorSp(0,18)}},{InputMask = sArrFieldSpMask[18]},QuickChoice;
  doFieldSp18 'Поле 18' :[10],Protect,noDel,{Font={Color=GetColorSp(0,18)}},{InputMask = sArrFieldSpMask[18]},browseSum(' ');
  FieldSp19   'Поле 19' :[10],Protect,noDel,{Font={Color=GetColorSp(0,19)}},{InputMask = sArrFieldSpMask[19]},QuickChoice;
  doFieldSp19 'Поле 19' :[10],Protect,noDel,{Font={Color=GetColorSp(0,19)}},{InputMask = sArrFieldSpMask[19]},browseSum(' ');
  FieldSp20   'Поле 20' :[10],Protect,noDel,{Font={Color=GetColorSp(0,20)}},{InputMask = sArrFieldSpMask[20]},QuickChoice;
  doFieldSp20 'Поле 20' :[10],Protect,noDel,{Font={Color=GetColorSp(0,20)}},{InputMask = sArrFieldSpMask[20]},browseSum(' ');
end; //brFondSp
HandleEvent
cmInit:
{ boWinEdit:=True;
  PositionChanged;
}
cmDone:
{
  UnLockAll(#GP_KPI_DOC);
  boWinEdit:=False;
  boLocked:=False;
  PositionChanged;
}
cmPrintDoc://Печать ведомостей
{ iKPIReport.pDoc := GP_KPI_Doc.Nrec;
  RunLoadMenu(iKPIReport.GetMenu(''));
}
cmValue11://Рассчитать ведомость
{ CalculateDoc(false);
  ReReadRecord(#GP_KPI_Doc);
  PositionChanged;
}
end;
end;//Window wnEdit 'Редактирование ведомости' ;

//****************************************************
Browse brDocFond '' (,,sci147Esc);
//Show at (,,,15);
Table GP_KPI_Doc;
recMarker=pMarker;
Fields
  GP_KPI_Doc.DocCreate    'Дата создания' : [15], Protect;
  GP_KPI_Doc.DocNumber    'Номер' :[20],Protect,NoPickButton,NoDel;
  GP_KPI_Doc.DocDate      'Дата'  :[12],Protect;
  GP_KPI_FOND.Name        'Фонд'  :[20],Protect,NoPickButton,NoDel;
  Katpodr.Kod             'Код'#13'подр-ния' ('Код подразделения') :[6],Protect,NoDel;
  Katpodr.Name            'Наименование'#13'подразделения' ('Наименование подразделения') :[25],Protect,NoDel;
  GP_Status.Name          'Статус'#13'док-та' ('Статус документа',,sci13Esc) :[15],Protect,PickButton,EditButton,NoDel;
  GP_KPI_Doc.wYear        'Год'          ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       'Месяц'        ('Месяц ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wKvartal     'Квартал'      ('Квартал ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.Summa        'Сумма'        ('Итого по ведомости') :[10,'\2p[|-]366`666`666`666`666.88'],Protect;
  GP_KPI_Doc.Description  'Описание'     :[40],Protect,NoPickButton,NoDel;
end;//Browse brGroupPers


//-------------------------------------------------
// Сформировать ведомость на остатки
//-------------------------------------------------
Function MakeVedomByOst:boolean;
{ Result:=true;
  if not (UserAccessService.CanIns(wTypeDoc))
  { Message('Вам запрещено создавать новые ведомости!');
    Exit;

  }
  Init_Zar;

  if RunWindowModal(wnInsOst)<>cmDefault exit;
  timelog('GP_KPI_Doc_FondEdit->MakeVedomByOst begin');
  IntInit;
  var _wMonthCur:word;
  var _wYearCur :word;
  var _Status   :comp;
  var _boPodr   :boolean=false;
  //if GetMarkerCount(Marker_KatpodrIns)>0
  //{ _boPodr:=True;
  //}
  _wMonthCur:=wmonth_b_flt;
  _wYearCur :=wYear_Flt;
  Status_Init(wTypeDoc);
  _Status:=Status.GetDefault;
  vOst._wMonth:=wmonth_b_flt-1;
  vOst._wYear:=wYear_Flt;
  if vOst._wMonth=0
  { vOst._wMonth:=12;
    vOst._wYear:=vOst._wYear-1;
  }
  Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
  ClearMarker(Marker_Tmp);
  StartNewVisual(vtNumericVisual, vfTimer  ,
          'Создание ведомостей по остаткам фондов', 0);
  vOst._Loop GP_KPI_DOC
  {
     NextVisual;
     var _cPodr:comp=vOst.GP_KPI_DOC.cKatPodr;
     if _boPodr
       if not FoundMarker(Marker_KatpodrIns,_cPodr) then continue;
     timelog(' нашли ведомость '+vOst.GP_KPI_DOC.DocNumber);
     vOst._Loop GP_KPI_DocSumFond
     { var _pFond:comp=vOst.GP_KPI_DocSumFond.cGP_KPI_Fond;

       if false //не требуется pFond_Ins<>0
       { if _pFond<>pFond_Ins continue;
       }
       timelog(' есть фонд ');
       var _Ost:double=0;
       _Ost:=vOst.GP_KPI_DocSumFond.Summa-vOst.GP_KPI_DocSumFond.Rasp;
       if vOst.GP_KPI_DocSumFond.Summa-vOst.GP_KPI_DocSumFond.Rasp<=0.005
       { continue;
       }
       timelog(' есть остаток '+string(_Ost,0,2));

       var _iOstNPP  :word=0;
       vOst._Loop GP_KPI_FIELDS
       { if pos('предыд',locase(vOst.GP_KPI_FIELDS.Name))>0
         or pos('с начала периода',locase(vOst.GP_KPI_FIELDS.Name))>0
         _iOstNPP:=vOst.GP_KPI_FIELDS.NPP;
         timelog(' нашли поле для входного остатка '+string(_iOstNPP));
         break;
       } //vOst._Loop GP_KPI_FIELDS
       if _iOstNPP=0 then continue;
       if getfirst GP_KPI_DOC where ((
            wTypeDoc == GP_KPI_DOC.wType
        and _wMonthCur  == GP_KPI_DOC.wMonth
        and _wYearCur   == GP_KPI_DOC.wYear
        and 0 == GP_KPI_DOC.cKatPodr // будем только с пустым подразделением
        and _Status  == GP_KPI_DOC.cStatus(noIndex)
        and _pFond   == GP_KPI_DOC.cGP_KPI_FOND(noIndex)
        and (Pos('Перенос остатков',GP_KPI_DOC.Description)>0)
        ))<>tsok
      {
        ClearBuffer(#GP_KPI_DOC);
        GP_KPI_DOC.wType   :=wTypeDoc;
        GP_KPI_DOC.cKatpodr:=0;
        GP_KPI_DOC.wYear   :=_wYearCur;
        GP_KPI_DOC.wMonth  :=_wMonthCur;
        GP_KPI_DOC.DocCreate:=_CurDateTime;
        GP_KPI_DOC.cCreator :=UserId;
        GP_KPI_DOC.cStatus  :=_Status;
        GP_KPI_DOC.DocNumber:=GetNextDocNumber(wYear_Flt);
        GP_KPI_DOC.DocDate  :=Cur_Date;
        GP_KPI_DOC.cGP_KPI_FOND:=_pFond;
        GP_KPI_DOC.Description:='Перенос остатков за '+string(vOst._wMonth)+' месяц '+string(vOst._wYear)+' года';
        insert current GP_KPI_DOC;
        displ('Создали ведомость '+GP_KPI_DOC.DocNumber);
      }
      else
      { if not FoundMarker(Marker_tmp,GP_KPI_DOC.Nrec)
          displ('обновляем ведомость ' +GP_KPI_DOC.DocNumber);

      }
      if not FoundMarker(Marker_tmp,GP_KPI_DOC.Nrec)
         InsertMarker(Marker_tmp,GP_KPI_DOC.Nrec);

      if getfirst GP_KPI_DOC_SP where ((
            GP_KPI_DOC.Nrec == GP_KPI_DOC_SP.cGP_KPI_DOC
       and _cPodr           == GP_KPI_DOC_SP.cKatPodr(noindex)
        ))<>tsok
      {
         clearbuffer(#GP_KPI_Doc_SP);
         GP_KPI_Doc_SP.wType      :=GP_KPI_DOC.wType;
         GP_KPI_Doc_SP.cGP_KPI_Doc:=GP_KPI_DOC.Nrec ;
         GP_KPI_Doc_SP.cKatpodr:=_cPodr;
         Insert current GP_KPI_Doc_SP;
      } //if getfirst GP_KPI_DOC_SP where ((
      //SetFieldVal(3,_iOstNPP,_Ost); - надо щелкать PositionChanged, лучше напрямую запишем
      GP_KPI_Doc_SP.FARRVALUE[_iOstNPP]:=string(_Ost,0,2);
      update current GP_KPI_DOC_SP;
      timelog(' установили значения поля '+GP_KPI_Doc_SP.FARRVALUE[_iOstNPP]);
    } //vOst._Loop GP_KPI_DocSumFond
  } //_Loop GP_KPI_DOC_F
  StopVisual('',0);
  timelog(' создали ведомостей '+String(GetMarkerCount(Marker_Tmp)));

  if getMarkerCount(Marker_tmp)>0
    CalculateDoc(true,false);
  PositionChanged;
  DoneMarker(Marker_tmp,'');
  ShowErrors;
} //Function MakeVedomByOst:boolean;



//-------------------------------
// Заполнить таблицу с типами полей фонда и подготовить форматы
//-------------------------------
Function Fill_Tmp_KPI_Fond(_Fond:comp) :boolean;
{ if getfirst Tmp_KPI_Fond=tsok then exit;

  Timelog('GP_KPI_Doc_FondEdit_Sp->FillTmp_KPI_FOND:_Fond='+string(_Fond));
   //константы для конфигуратора и так далее
   //#include Wincomm.inc
  insert into TMP_KPI_Fond Set TMP_KPI_Fond.cGP_KPI_Fond:=_Fond;
  _Loop FullCache GP_KPI_Fields
  { //дополнительные поля
       if GP_KPI_Fields.NPP>0 and GP_KPI_Fields.NPP<=GP_KPI_Doc_Max_FLD_SP
       { TMP_KPI_Fond.fArrName  [GP_KPI_Fields.NPP]:=GP_KPI_Fields.Name;
         TMP_KPI_Fond.fArrType  [GP_KPI_Fields.NPP]:=GP_KPI_Fields.wTypeFld       ;//"Тип полей спецификации"
         TMP_KPI_Fond.fArrKodGr [GP_KPI_Fields.NPP]:=GP_KPI_Fields.KodGroup       ;//Word_x20  "Аналитика полей спецификации"
         TMP_KPI_Fond.fArrAlg   [GP_KPI_Fields.NPP]:=GP_KPI_Fields.cGP_KPI_Alg    ;//Word_x20  "Алгоритмы полей спецификации"
         TMP_KPI_Fond.fArrAlgChk[GP_KPI_Fields.NPP]:=GP_KPI_Fields.cGP_KPI_Alg_Chk;//Word_x20  "Алгоритмы полей спецификации"
         TMP_KPI_Fond.fArrOpt   [GP_KPI_Fields.NPP]:=GP_KPI_Fields.Option         ;//Word_x20  "Опции полей спецификации"
         TMP_KPI_Fond.fArrLen   [GP_KPI_Fields.NPP]:=GP_KPI_Fields.Len            ;//Word_x20  "Ширина полей полей спецификации"
         TMP_KPI_Fond.fArrRazr  [GP_KPI_Fields.NPP]:=GP_KPI_Fields.Razr           ;//Word_x20  "Разрядность полей полей спецификации"
         if TMP_KPI_Fond.fArrLen  [GP_KPI_Fields.NPP]=0
           TMP_KPI_Fond.fArrLen  [GP_KPI_Fields.NPP]:=10;
       }
   } //_Loop fullcache GP_KPI_Fields
   Update current TMP_KPI_Fond;
   Timelog('GP_KPI_Doc_FondEdit->FillTMP_KPI_Fond:finish');
   Result:=true;

} //Function Fill_TMP_KPI_Fond(_pDoc:comp) :boolean;

//-------------------------------------
#doc
 Установить позицию
#end
Function SetDocPosition(_wTypeDoc:word;_cDoc:comp;_cDocSp:comp):boolean;
{ Result:=false;
  if wTypeDoc<>_wTypeDoc
    set wTypeDoc:=_wTypeDoc;

  if pGP_KPI_DOC<>_cDoc
  { set pGP_KPI_DOC:=_CDoc;
    if getfirst GP_KPI_DOC where (( pGP_KPI_DOC == GP_KPI_DOC.Nrec )) <>tsok
    { pGP_KPI_DOC:=0;
      Exit;
    }
  }
  Fill_Tmp_KPI_Fond(GP_KPI_Doc.cGP_KPI_FOND);
  if true //надо всегда  pGP_KPI_DOC_SP<>_cDocSp
  { set pGP_KPI_DOC_SP:=_cDocSp;
    if getfirst GP_KPI_DOC_SP where (( pGP_KPI_DOC_SP == GP_KPI_DOC_SP.Nrec )) <>tsok
    { pGP_KPI_DOC_SP:=0;
      Exit;
    }
  }
  Result:=true;
}//Function SetDocPosition(_wTypeDoc:word;_cDoc:comp;_cDocSp:comp):boolean;

//===============================================
//установить формат спецификации
//===============================================
Function SetFormatSP :boolean;
var
  jj:word;
  _Format_name, _Field_name, _Field_nameDo:string;
  ww_str:string;
  _wErr :longint;
{ if GP_KPI_Doc.cGP_KPI_FOND=0
  { SetFormat(ScrFondNotVib);
    exit;
  }
  _Format_name:='c_BRFondSP_';
  SetFormat(BrFondSp);
  Fill_Tmp_KPI_Fond(GP_KPI_Doc.cGP_KPI_FOND);
  For(jj:=1;jj<=GP_KPI_Doc_Max_FLD_SP;jj++)
  {
    _Field_name:=_Format_name+'FIELDSP'+LpadCh(string(jj),'0',2)
         +'_Поле_' +LpadCh(string(jj),'0',2);
    _Field_nameDo:=_Format_name+'doFIELDSP'+LpadCh(string(jj),'0',2)
         +'_Поле_' +LpadCh(string(jj),'0',2);
    cfsSetProp(_Field_name  ,'Visible',false);
    cfsSetProp(_Field_nameDo,'Visible',false);
    if TMP_KPI_Fond.fArrName[jj]=''
    or (TMP_KPI_Fond.fArrOpt  [jj] and 4)>0
    {
      continue;
    }
    if (TMP_KPI_Fond.fArrType [jj]=1)
    { cfsSetProp(_Field_nameDo,'Visible',True);
      _Field_name:=_Field_nameDo;
    }
    else
    { cfsSetProp(_Field_name,'Visible',True);
    }
    cfsSetProp(_Field_name,'Visible'     ,true);
    cfsSetProp(_Field_name,'Title'       ,GroupWrapStrWithNewRow(TMP_KPI_Fond.fArrName[jj],1,TMP_KPI_Fond.fArrLen  [GP_KPI_Fields.NPP],3));
    cfsSetProp(_Field_name,'DefaultWidth',TMP_KPI_Fond.fArrLen  [jj]);
    //cfsSetProp(_Field_name,'Point'       ,TMP_KPI_Fond.fArrRazr[jj]);
    cfsSetProp(_Field_name,'Strings'     ,'');
    ww_str:='';
    // установить формат
    case TMP_KPI_Fond.fArrType[jj] of
    1:
    { //'\3p[|-]366`666`666`666`666.888'
      ww_str:='\'+string(TMP_KPI_Fond.fArrRazr[jj])+'p[|-]366`666`666`666`666'
           +if(TMP_KPI_Fond.fArrRazr[jj]<>0,'.'+PadCh('','8',TMP_KPI_Fond.fArrRazr[jj] ),'');
    }
    2: ww_str:='DD/MM/YYYY';
    3: ww_str:='HH:MM:SS';
    else ww_str:='';
    end;
    _wErr:=cfsSetProp(_Field_name,cfpPassiveFormat,ww_str);

    if (not CanEditTbl)
    or (TMP_KPI_Fond.fArrOpt  [jj] and 1)=0
    { cfsSetProp(_Field_name,'Protect'          ,true);
      cfsSetProp(_Field_name,'ButtonType'       ,0);
    }
    else
    { case TMP_KPI_Fond.fArrType[jj] of
      4,5,6,7:
      { if (TMP_KPI_Fond.fArrOpt  [jj] and 1)>0
        { cfsSetProp(_Field_name,'ButtonType'       ,inPickButton);
          cfsSetProp(_Field_name,'DefaultPickButton'       ,true);
        }
        cfsSetProp(_Field_name,'Protect'          ,true);
      }
      else
      { cfsSetProp(_Field_name,'Protect'  ,False);
      }
      end;
      if TMP_KPI_Fond.fArrType[jj]=7 //переключатель
      { var ArName: array[1..1] of string;
        var ArCode: array[1..1] of longint;
        SetLimit(ArName, 0);
        SetLimit(ArCode, 0);
        _Loop SpKau
        { ArCode[Count(ArCode)+1] :=longint(SpKau.Code);
          ArName[Count(ArName)+1] :=SpKau.Name;
        }
        SetEnumList(BrFondSp,MyGetFieldSpByNpp(jj), ArName, ArCode);
      }
    }
    SetColumnWidth(BrFondSp,MyGetFieldSpByNpp  (jj),TMP_KPI_Fond.fArrLen  [jj]);
    SetColumnWidth(BrFondSp,MyGetFieldSpByNppDo(jj),TMP_KPI_Fond.fArrLen  [jj]);
    sArrFieldSpMask[jj]:='';
    case TMP_KPI_Fond.fArrType[jj] of
    2: sArrFieldSpMask[jj]:='99/99/9999';
    3: sArrFieldSpMask[jj]:='99:99';
    end;
  } //For(jj:=1;jj<=GP_KPI_Doc_Max_FLD_SP;jj++)
  Result:=true;
} //Function SetFormatSP :boolean;

//===============================================
// Получить значение полей - строка
//===============================================
Function GetFieldValS(wTp:word; wwNum:word) : string;
var _vDouble:double;
{ Result:='';
  if GP_KPI_Doc.cGP_KPI_FOND=0 exit;
  Fill_Tmp_KPI_Fond(GP_KPI_Doc.cGP_KPI_FOND);
  case wTp of
  03: // Спецификация
  {
    if wwNum=0 or wwNum>GP_KPI_Doc_Max_FLD_SP exit;
    Result:=GP_KPI_Doc_SP.FARRVALUE[wwNum];
    case TMP_KPI_Fond.fArrType[wwNum] of //'Тип поля' : [5]
    1: //число
    { if Result='' Result:='0';
      _vDouble:=0;
      _vDouble:=double(Result);
      if _vDouble=0 Result:='0';
      Result:=string(Round(_vDouble,TMP_KPI_Fond.fArrRazr[wwNum]),0,TMP_KPI_Fond.fArrRazr[wwNum]);
    }
    4:// 'аналитика'
    { var _wKodGr:longint=TMP_KPI_Fond.fArrKodGr[wwNum];
      var _cKau  :comp=comp(GP_KPI_Doc_SP.FARRVALUE[wwNum]);
      Result:=#ShowKau(_wKodGr,_cKau);
    }
    5:// 'кадр.справочники'
    { var _wKodGr:longint=TMP_KPI_Fond.fArrKodGr[wwNum];
      var _cKau  :comp=comp(GP_KPI_Doc_SP.FARRVALUE[wwNum]);
      Result:=iCatFunc.GetCatalogsName(_cKau);
    }
    6:// 'таблица' //пока нет
    { var _wKodGr:longint=TMP_KPI_Fond.fArrKodGr[wwNum];
      var _cKau  :comp=comp(GP_KPI_Doc_SP.FARRVALUE[wwNum]);
      Result:='' ;
    }
    7:
    { if Result='' Result:='0';
    }
    else
     Result:=GP_KPI_Doc_SP.FARRVALUE[wwNum];
    end;

  }
  end;//03 Спецификация
} //Function GetFieldValS(wTp:word; wwNum:word) : Variant;


//===============================================
// Получить получить значение полей
//===============================================
Function GetFieldVal(wTp:word; wwNum:word) : Variant;
{ Result:='';
  if GP_KPI_Doc.cGP_KPI_FOND=0 exit;
  Fill_Tmp_KPI_Fond(GP_KPI_Doc.cGP_KPI_FOND);

  case wTp of
  3:
  { if wwNum=0 or wwNum>GP_KPI_Doc_Max_FLD_SP exit;
    case TMP_KPI_Fond.fArrType[wwNum] of //'Тип поля' : [5]
    /*
    1://'число'
     if TMP_KPI_Fond.fArrRazr[wwNum]=0
     { Result:=longint(0);
       Result:=longint(GP_KPI_Doc_SP.FARRVALUE[wwNum])
     }
     else
     { Result:=double(0);
       Result:=double(GP_KPI_Doc_SP.FARRVALUE[wwNum]);
     }
    */
    2://'дата'
       Result:=StrToDate(GP_KPI_Doc_SP.FARRVALUE[wwNum],'DD/MM/YYYY');
    3:// 'время'
       Result:=StrToTime(GP_KPI_Doc_SP.FARRVALUE[wwNum],'HH:MM:SS:SSS');
    7:// 'Переключатель' ], Protect;
     Result:=longint(GP_KPI_Doc_SP.FARRVALUE[wwNum]);
    else
    { Result:=GetFieldVals(wTp,wwNum);
    }
    end;
  }
  end;

} //Function GetFieldVal(wTp:word; wwNum:word) : Variant;

//===============================================
// Установить значение полей
//===============================================
Function SetFieldVal(wTp:word; wwNum:word; _Value: Variant;_ClearManual:boolean=false):boolean ;
{ Result:=False;
  timelog('GP_KPI_FONDEDIT->SetFieldVal:wTp='+string(wTP)+',wwNum='+string(wwNum)+', _Value='+string( _Value));
  case wTp of
  03: // Спецификация
  {
    if wwNum=0 or wwNum>GP_KPI_Doc_Max_FLD_SP exit;
    case TMP_KPI_Fond.fArrType[wwNum] of //'Тип поля' : [5]
    0:// 'строка'
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=_Value;
    1://'число'
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    2://'дата'
    { if VType(_Value)=VT_DATE
       set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=DateToStr(_Value,'YYYY-MM-DD');
      else
       set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    }
    3:// 'время'
    { if VType(_Value)=VT_DATE
        set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=TimeToStr(_Value,'HH:MM:SS:SSS');
      else
        set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    }
    4:// 'аналитика'
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    5:// 'кадр.справочники'
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    6:// 'таблица' //пока нет
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    7:// 'Переключатель' ], Protect;
     set GP_KPI_Doc_SP.FARRVALUE[wwNum]:=String(_Value);
    end;
    if _ClearManual
    { BitOffW(GP_KPI_Doc_SP.Option[wwNum],3);
    }
    if not wVisibleRun
    { update current GP_KPI_Doc_SP;
    }
    else
    { SetModified(true);
      UpdateTable;
    }

  }
  end;//03 Спецификация

  Result:=True;
} //Function SetFieldVal(wTp:word; wwNum:word) ;

//-------------------------------------------
// Пересчитать строку со спецификаций
//-------------------------------------------
Function ReCalcSp(_NumFld:word) :boolean;
var ii:word;
    _Value,_ValuePrev:string;
    boChange:boolean;
{ UpdateTable;
  Result:=false;
  boChange:=false;
  for(ii:=_NumFld+1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  { _Value:='';
    _ValuePrev:='';
    if  TMP_KPI_Fond.fArrAlg[ii]<>0
    and (not IsBitCTW(GP_KPI_DOC_SP.Option[ii],3)) //изменялось вручную
    {
      _ValuePrev:=GetFieldValS(3,ii);
      _Value:=iGP_KPI_Alg.CalcSpec(GP_KPI_DOC.wType,GP_KPI_DOC.Nrec
             ,GP_KPI_DOC_SP.Nrec,TMP_KPI_Fond.fArrAlg[ii],false,_ValuePrev);

      if iGP_KPI_Alg.GetLastError=''
      { if _ValuePrev<>_Value
        { SetFieldVal(3,ii,_Value);
          boChange:=true;
        }

      }
      //в премиях нужно пересчитать еще и фонды!
      if IsBitCTW(TMP_KPI_Fond.fArrOpt[ii],2) // итоги
      { update current GP_KPI_DOC set GP_KPI_DOC.Summa:=
             GP_KPI_DOC.Summa+Double(_Value)-Double(_ValuePrev);

      }
    } //if  TMP_KPI_Raise.fArrAlg[ii]<>0
  } //for(ii:=1;ii<=GP_KPI_Doc_Max_FLD_SP;ii++)
  Result:=true;
  ReScanPanel(#GP_KPI_DOC);
  ReScanPanel(#GP_KPI_DOC_SP);
} //Function ReCalcSp :boolean;


//-------------------------------------------
// Запустить выбор
//-------------------------------------------
Procedure MyPickFld(_field:longint;_NumFld:word);
{ #__UNUSED__(_field,_NumFld)
  var _Value:string='';
  var cTmp:comp=0;
  if _NumFld>0
  { _Value:=GP_KPI_Doc_SP.FARRVALUE[_NumFld];
    case TMP_KPI_Fond.fArrType[_NumFld] of //'Тип поля' : [5]
    4:
    { cTmp:=Comp(_Value);
      if (QuickChoiceName <> '')  QuickChoiceName := 'qcKau_Needed_Name';
      if iGetKau.GetCodeKau(cgiPick,word(TMP_KPI_Fond.fArrKodGr[_NumFld]),cTmp)<>0
      { _Value:=string(cTmp)
      }
    }
    5:
    { cTmp:=Comp(_Value);
      if RunInterface('PickCatalog2',TMP_KPI_Fond.fArrKodGr[_NumFld],cTmp,0)<>cmCancel
      { _Value:=string(cTmp)
      }
    }
    else
    { _Value:=ExprFieldValue;
    }
    end;
    // контроль значений поля
    if TMP_KPI_Fond.fArrAlgChk[_NumFld]>0
    { var _Value_Chk:string='';
      _Value_Chk:=iGP_KPI_Alg.CalcSpec(
              GP_KPI_DOC.wType
             ,GP_KPI_DOC.Nrec
             ,GP_KPI_DOC_SP.Nrec
             ,TMP_KPI_Fond.fArrAlgChk[_NumFld],false,_Value);
      if _Value_Chk<>''
      { message('Ошибка контроля значения поля!'
         +chr(13)+_Value_Chk);
        exit;
      }
    }

    BitOnW(GP_KPI_Doc_SP.Option[_NumFld],3);
    SetFieldVal(3,_NumFld,_Value);
    ReCalcSp(_NumFld);
  }//if _NumFld>0
} //Procedure MyPickFld(_field:longint;_NumFld:word);
//------------------------------------------------------------------------------
Function MyGetFieldSpByNpp(_wNpp:longint):longint;
{ case _wNpp of
  01 :Result:=#FieldSP01;
  02 :Result:=#FieldSP02;
  03 :Result:=#FieldSP03;
  04 :Result:=#FieldSP04;
  05 :Result:=#FieldSP05;
  06 :Result:=#FieldSP06;
  07 :Result:=#FieldSP07;
  08 :Result:=#FieldSP08;
  09 :Result:=#FieldSP09;
  10 :Result:=#FieldSP10;
  11 :Result:=#FieldSP11;
  12 :Result:=#FieldSP12;
  13 :Result:=#FieldSP13;
  14 :Result:=#FieldSP14;
  15 :Result:=#FieldSP15;
  16 :Result:=#FieldSP16;
  17 :Result:=#FieldSP17;
  18 :Result:=#FieldSP18;
  19 :Result:=#FieldSP19;
  20 :Result:=#FieldSP20;
  end;
}//Function GetFieldSpByNpp(_wNpp:longint);

Function MyGetFieldSpByNppDo(_wNpp:longint):longint;
{ case _wNpp of
  01 :Result:=#doFieldSP01;
  02 :Result:=#doFieldSP02;
  03 :Result:=#doFieldSP03;
  04 :Result:=#doFieldSP04;
  05 :Result:=#doFieldSP05;
  06 :Result:=#doFieldSP06;
  07 :Result:=#doFieldSP07;
  08 :Result:=#doFieldSP08;
  09 :Result:=#doFieldSP09;
  10 :Result:=#doFieldSP10;
  11 :Result:=#doFieldSP11;
  12 :Result:=#doFieldSP12;
  13 :Result:=#doFieldSP13;
  14 :Result:=#doFieldSP14;
  15 :Result:=#doFieldSP15;
  16 :Result:=#doFieldSP16;
  17 :Result:=#doFieldSP17;
  18 :Result:=#doFieldSP18;
  19 :Result:=#doFieldSP19;
  20 :Result:=#doFieldSP20;
  end;
}//Function GetFieldSpByNpp(_wNpp:longint);




//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table GP_KPI_Doc;
cmSetDefault:
{ if isFilterRun then Abort;
  ClearBuffer(#GP_KPI_Doc);
  timelog('GP_KPI_Doc_FondEdit->GP_KPI_Doc->cmSetDefault');
}
cmInsert:
{ UpdateTable;
  if RunWindowModal(wnInsert)=cmDefault
    InsertDoc;
  SetNew(false);
  abort;

}
cmInsertRecord:
{ timelog('GP_KPI_Doc_FondEdit->GP_KPI_Doc->cmInsertRecord');

  Insert Current GP_KPI_Doc;
}
cmUpdateRecord:
{ if FALSE // isProtect
  { ReReadRecord(#GP_KPI_Doc_SP);
    Message('Изменение записи запрещено' );
    exit;;
  }
  Update Current GP_KPI_Doc;
}
cmDeleteRecord:
{ if isProtect
  { exit;;
  }
  if message('Удалить ведомость?',YesNo)=cmYes
  { delete GP_KPI_Doc_SP where (( GP_KPI_Doc.Nrec == GP_KPI_Doc_SP.cGP_KPI_Doc )) ;
    delete Current GP_KPI_Doc;
  }
}
cmPositionChanged:
{ PositionChanged;
}
end;

TableEvent table GP_KPI_Doc_SP;
cmSetDefault:
{ timelog('GP_KPI_Doc_FondEdit->GP_KPI_Doc_SP->cmSetDefault '+string(isProtect));
  if isProtect
  { exit;

  }
  ClearBuffer(#GP_KPI_Doc_SP);
  GP_KPI_Doc_SP.wType:=GP_KPI_Doc.wType ;
  GP_KPI_Doc_SP.cGP_KPI_DOC :=GP_KPI_Doc.Nrec;
  timelog('GP_KPI_Doc_FondEdit->GP_KPI_Doc_SP->cmSetDefault '+string(GP_KPI_Doc_SP.cGP_KPI_DOC));

}
cmInsertRecord:
{ timelog('GP_KPI_Doc_FondEdit->GP_KPI_Doc_SP->cmInsertRecord '+string(isProtect));

  if isProtect
  { ReReadRecord(#GP_KPI_Doc_SP);
    message('Ведомость заблокирована от редактирования');
    exit;;
  }

  Insert Current GP_KPI_Doc_SP;
}
cmUpdateRecord:
{ if  isProtect
  { ReReadRecord(#GP_KPI_Doc_SP);
    Message('Изменение записи запрещено' );
    exit;;
  }

  Update Current GP_KPI_Doc_SP;
}
cmDeleteRecord:
{ if isProtect
  { ReReadRecord(#GP_KPI_Doc_SP);
    Message('Изменение записи запрещено' );
    exit;;
  }
  if message('Удалить строку спецификации ведомости?',YesNo)=cmYes
    delete Current GP_KPI_Doc_SP;
}
end;




//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    cmInit:
    { //-------------------------
      if  inherited :: handleEvent (cmInit)=heAbort then Abort;

      //----------------------------------------
      fCurMainFormat    :=brDocFond;
      fCurMainFormatEdit:=ScrFondEdit;
      //----------------------------------------

      if (wIntMode and cgiPick)<>0
      {
      }
      pMarker.StoreName := 'GP_KPI_DOC_FondEdit';

      //-----------------------------

      Timelog('GP_KPI_Doc_FomdEdit->cmInit загрузим переменные');
      ReadParam;

      Timelog('GP_KPI_Doc_FomdEdit->cmInit установим ограничения');
      SetFilterBounds(0);
      SetFilterNM;
      //-------------------------
      if wIntMode<>0
      { SetEditMode(false)
      }
      else
      { SetEditMode(True)
      }
      if cREc>0
      { if getfirst GP_KPI_DOC where (( cRec == GP_KPI_DOC.Nrec )) <>tsok
        { cRec:=0
        }
      }
      if cRec=0 getlast GP_KPI_DOC;
      ReScanPanel(#GP_KPI_DOC);

      //--- скрыть показать колонки
      Timelog('GP_KPI_Doc_FomdEdit->cmInit скроем колонки');
      iGP_VisibleHidden.SetVisibleForField( cfsGetCurrentContainerSelf
                               , GetInterfaceComponentName
                               , #(__InterfaceName__)
                               , 'brDocFond');

      isFilterRun:=False;

    }
    cmOnVipLoad:
    { if  inherited :: handleEvent (cmOnVipLoad)=heAbort then Abort;
    }
    //----------------------
    cmDefault:
    { if (wIntMode and cgiPick)>0
      { if (wIntMode and cgiPickMult)=cgiPickMult
        { if PMarker.Count=0
          { pMarker.Mark;
          }
          pMarker.ExportToName(pMarker.StoreName);
        }
        else
        { set cRec:=GP_KPI_Doc.Nrec;
        }
        CloseInterface(cmDefault)
      }
      else
      if (wIntMode=0 or wIntMode=cgiNotEdit)
      { PutCommand(cmEdit) ;
      }
    }
    cmDone:
    { if DataProtector<>NullRef
      { FreeVipInterface(DataProtector);

      }
      SaveParam;
      //-------------------------
      if  inherited :: handleEvent (cmDone)=heAbort then Abort;
      //-------------------------
    }
    cmEdit:
    { if GetCurrentFormat<>brDocFond
      { case curfield of
        #GP_Status.name:{//История изменения статусов
          StatusChange.ShowStatusChangeLog(coGP_KPI_Doc,GP_KPI_Doc.NRec);
        }
        end;
      }
      else
      {  RunWindowModal(wnEdit);
      }
    }
    cmOpenSearch :
    {
      isOpenSearch:= true;
      ProcessCommand(cmPick);
      isOpenSearch:= false;
    }
    //----------------------
    cmCheckField:
    {
      //принудительно вызовем вставку
      Case CurTable of
      #GP_KPI_Doc:
      { SetModified(True);
        UpdateTable;

      }
      end;
    }
    cmPick:
    { if  inherited :: handleEvent (cmPick)=heAbort then Abort;
      case CurField of
      #GP_Status.Name:
      { if (StatusChange.PickStatus(GP_KPI_DOC.cStatus))
        {
          if (ChangeStatus(GP_KPI_DOC.NRec,StatusChange.StatusChangeLog))
          {
            set GP_KPI_DOC.cStatus:=StatusChange.StatusChangeLog.cStatusTo;
            update current GP_KPI_DOC;
            //UpdateTable;
            SetDocFieldsState;
          }
        }
      }
      #GP_KPI_Fond.Name:
      { pTmp:=GP_KPI_DOC.cGP_KPI_Fond;
        if RunInterface(GP_KPI_FondEdit,cgiPick,pTmp)<>cmCancel
        { set GP_KPI_DOC.cGP_KPI_Fond:=pTmp
        }
      }
      #GP_KPI_Fond_Ins.Name:
      { pTmp:=pFond_Ins;
        if RunInterface(GP_KPI_FondEdit,cgiPick,pTmp)<>cmCancel
        { set pFond_Ins:=pTmp
        }
      }
      #Katpodr.Name:
      { pTmp:=GP_KPI_DOC.cKatpodr;
        If (iGetKau.GetCodeKau(cgiPick,cgKau_KatPodr,pTmp) <> 0)
        { set GP_KPI_DOC.cKatpodr:=pTmp
        }
      }
      #Katpodr_SP.Name:
      { pTmp:=GP_KPI_DOC_SP.cKatpodr;
        If (iGetKau.GetCodeKau(cgiPick,cgKau_KatPodr,pTmp) <> 0)
        { set GP_KPI_DOC_SP.cKatpodr:=pTmp;
          SetModified(true);
          UpdateTable;
        }
      }
      #FieldSp01 : MyPickFld(CurField,01);
      #FieldSp02 : MyPickFld(CurField,02);
      #FieldSp03 : MyPickFld(CurField,03);
      #FieldSp04 : MyPickFld(CurField,04);
      #FieldSp05 : MyPickFld(CurField,05);
      #FieldSp06 : MyPickFld(CurField,06);
      #FieldSp07 : MyPickFld(CurField,07);
      #FieldSp08 : MyPickFld(CurField,08);
      #FieldSp09 : MyPickFld(CurField,09);
      #FieldSp10 : MyPickFld(CurField,10);
      #FieldSp11 : MyPickFld(CurField,11);
      #FieldSp12 : MyPickFld(CurField,12);
      #FieldSp13 : MyPickFld(CurField,13);
      #FieldSp14 : MyPickFld(CurField,14);
      #FieldSp15 : MyPickFld(CurField,15);
      #FieldSp16 : MyPickFld(CurField,16);
      #FieldSp17 : MyPickFld(CurField,17);
      #FieldSp18 : MyPickFld(CurField,18);
      #FieldSp19 : MyPickFld(CurField,19);
      #FieldSp20 : MyPickFld(CurField,20);

      //------------------------------
      #Filtr_Katpodr:
      { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
        //CopyMarker(_PodrMArkerPointer,Marker_KatPodr);
        if RunInterface('GetPodaLN',12, Marker_KatPodr, 1)=cmDefault
        { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
          //CopyMarker(Marker_KatPodr,_PodrMArkerPointer);
          SetFilterNm(#Filtr_Katpodr);
          BitOnW(wFilter,5);
        }
      }
      #Filtr_KatpodrIns:
      { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
        //CopyMarker(_PodrMArkerPointer,Marker_KatPodrIns);
        if RunInterface('GetPodaLN',12, Marker_KatPodrIns, 1)=cmDefault
        { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
          //CopyMarker(Marker_KatPodrIns,_PodrMArkerPointer);
          SetFilterNm(#Filtr_KatpodrIns);
          GetMarker(Marker_KatPodrIns,0,pKatPodr_Ved);
          set pKatPodr_Ved:=FindZGD(pKatPodr_Ved,false);
        }
      }
      #Podr_Ved:
      { if RunInterface('GetPodaLN',2, pKatPodr_Ved, 1)=cmDefault
        { set pKatPodr_Ved:=pKatPodr_Ved;
        }
      }
      #Filtr_Fond:
      { KauMarkerName := 'GP_KPI_FondEdit';
        StoreMarker(Marker_Fond,KauMarkerName);
        if RunInterface(GP_KPI_FondEdit,cgiPickMult,0)<>cmCancel
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_Fond,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_Fond);
          BitOnW(wFilter,3);
        }
      }
      #Filtr_FondIns:
      { KauMarkerName := 'GP_KPI_FondEdit';
        StoreMarker(Marker_FondIns,KauMarkerName);
        if RunInterface(GP_KPI_FondEdit,cgiPickMult,0)<>cmCancel
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_FondIns,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_FondIns);
        }
      }
      #Filtr_Status:
      { var _cTypeDoc:comp=0;
        if wTypeDoc<>0
        { if GetFirst GP_TypeDocs where (( wTypeDoc == wType ))=tsok
            _cTypeDoc:=GP_TypeDocs.Nrec;

        }
        if _cTypeDoc=0
        { if GetFirst GP_TypeDocs =tsok
            _cTypeDoc:=GP_TypeDocs.Nrec;
        }
        if RunInterface(GP_Common::GP_StatusPickAndEdit,_cTypeDoc,cgiPickMult,pStatus_Flt,Marker_Status)<>cmCancel
        { SetFilterNm(#Filtr_Status);
          BitOnW(wFilter,4);
        }
      }
      end;
      if IsProtect
      { Abort;
        Exit;

      }
    }  //cmPick
    //----------------------
    cmExprFieldChanged :
    { case CurField of
      #FieldSp01 : MyPickFld(CurField,01);
      #FieldSp02 : MyPickFld(CurField,02);
      #FieldSp03 : MyPickFld(CurField,03);
      #FieldSp04 : MyPickFld(CurField,04);
      #FieldSp05 : MyPickFld(CurField,05);
      #FieldSp06 : MyPickFld(CurField,06);
      #FieldSp07 : MyPickFld(CurField,07);
      #FieldSp08 : MyPickFld(CurField,08);
      #FieldSp09 : MyPickFld(CurField,09);
      #FieldSp10 : MyPickFld(CurField,10);
      #FieldSp11 : MyPickFld(CurField,11);
      #FieldSp12 : MyPickFld(CurField,12);
      #FieldSp13 : MyPickFld(CurField,13);
      #FieldSp14 : MyPickFld(CurField,14);
      #FieldSp15 : MyPickFld(CurField,15);
      #FieldSp16 : MyPickFld(CurField,16);
      #FieldSp17 : MyPickFld(CurField,17);
      #FieldSp18 : MyPickFld(CurField,18);
      #FieldSp19 : MyPickFld(CurField,19);
      #FieldSp20 : MyPickFld(CurField,20);
      //-----------------
      #doFieldSp01 : MyPickFld(CurField,01);
      #doFieldSp02 : MyPickFld(CurField,02);
      #doFieldSp03 : MyPickFld(CurField,03);
      #doFieldSp04 : MyPickFld(CurField,04);
      #doFieldSp05 : MyPickFld(CurField,05);
      #doFieldSp06 : MyPickFld(CurField,06);
      #doFieldSp07 : MyPickFld(CurField,07);
      #doFieldSp08 : MyPickFld(CurField,08);
      #doFieldSp09 : MyPickFld(CurField,09);
      #doFieldSp10 : MyPickFld(CurField,10);
      #doFieldSp11 : MyPickFld(CurField,11);
      #doFieldSp12 : MyPickFld(CurField,12);
      #doFieldSp13 : MyPickFld(CurField,13);
      #doFieldSp14 : MyPickFld(CurField,14);
      #doFieldSp15 : MyPickFld(CurField,15);
      #doFieldSp16 : MyPickFld(CurField,16);
      #doFieldSp17 : MyPickFld(CurField,17);
      #doFieldSp18 : MyPickFld(CurField,18);
      #doFieldSp19 : MyPickFld(CurField,19);
      #doFieldSp20 : MyPickFld(CurField,20);
      end;
    }
    //----------------------
    cmDelOnProtect:
    { Case Curfield of
      //------------------------------
      #Filtr_Fond:
      { ClearMarker(Marker_Fond);
        BitOffW(wFilter,3);
        SetFilterNm(#Filtr_Fond);
      }
      //------------------------------
      #Filtr_Status:
      { ClearMarker(Marker_Status);
        BitOffW(wFilter,4);
        SetFilterNm(#Filtr_Status);
      }
      //------------------------------
      #Filtr_Katpodr:
      { ClearMarker(Marker_Katpodr);
        BitOffW(wFilter,5);
        SetFilterNm(#Filtr_Katpodr);
      }
      //------------------------------
      #Filtr_KatpodrIns:
      { ClearMarker(Marker_KatpodrIns);
        SetFilterNm(#Filtr_KatpodrIns);
      }
      //------------------------------
      #Filtr_FondIns:
      { ClearMarker(Marker_FondIns);
        SetFilterNm(#Filtr_FondIns);
      }
      end;
    }
    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Doc: RunInterface('ExClassifier', coGP_KPI_Doc, GP_KPI_Doc.nRec);
      end;
    }
    //--------------------------
    cmFilterSave:
    { UpdateTable;

      if RunWindowModal(wnFilter)=cmDefault
      { SetFilterBounds(0);
      }
      else RestFromA

    }


    //--------------------------
    cmPickAttr:// внешние атрибуты
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Doc: RunInterface('Attribute', coGP_KPI_Doc, GP_KPI_Doc.nRec);
      end;
    }
    //--------------------------
    cmManagerID:
    { timelog('GP_KPI_Doc_FomdEdit->cmManageID');
      if ( RunInterface(GP_VisibleHidden, cfsGetCurrentContainerSelf
                                   , GetInterfaceComponentName
                                   , #(__InterfaceName__)
                                   , 'brDocRaise') = cmDefault )
      {
        ReScanPanel(#GP_KPI_DOC);
      }
    }
    //--------------------------
    cmHotKeys:
    {
      case CurTable of
      #GP_KPI_Doc:
      { iKPIReport.pDoc := GP_KPI_Doc.Nrec;
        //PutHotCommand(RunLoadMenu(RunMenu('GP_STAFF::GP_KPI_DocEdit_Main_HotKey'));
        var MenuId:longint;
        MenuId:=iKPIReport.GetMenu('GP_STAFF::GP_KPI_DocEdit_Main_HotKey');
        AddMenuItemEx(MenuID,'Отчет по премиальным фондам' , 'Отчет по премиальным фондам',hcNoContext, cmValue4, kbCtrlEnter);
        AddMenuItemEx(MenuID,'Сформировать ведомости на остатки' , 'Сформировать ведомости на остатки',hcNoContext, cmValue11, kbCtrlEnter);
        ProcessCommand(RunLoadMenu(MenuId));

      }
      end;
    }
    cmPrintDoc://Печать ведомостей
    { iKPIReport.pDoc := GP_KPI_Doc.Nrec;
      RunLoadMenu(iKPIReport.GetMenu(''));
    }
    cmValue2://Печать ведомостей
    { // Поскольку в функции обработки нe знаем про pMarker и tbRmGP_KPI_Doc1, то набьем здесь
      Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
      if pMarker.Count>0
      { SubBounds(tbRmGP_KPI_Doc1);
        AddBounds(tbRmGP_KPI_Doc2);
        _Loop pMarker
        { InsertMarker(Marker_Tmp,pMarker.pNRec )
        }
        SubBounds(tbRmGP_KPI_Doc2);
        AddBounds(tbRmGP_KPI_Doc1);
      }
      PrintDocument(true);
      DoneMarker(Marker_Tmp,'');
      ReReadRecord(#GP_KPI_Doc);
      PositionChanged;
    }
    cmValue3: //Копирование записи
    { if isProtect
      { Message('В этом режиме копирование запрещено');
        Exit

      }
    }
    cmValue4: //Отчет по премиальным фондам
    { RunInterface(GP_KPI_Doc_FondPrint,1);
    }
    cmValue10://Рассчитать ведомости
    {
      // Поскольку в функции обработки нe знаем про pMarker и tbRmGP_KPI_Doc1, то набьем здесь
      Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
      if pMarker.Count>0
      { SubBounds(tbRmGP_KPI_Doc1);
        AddBounds(tbRmGP_KPI_Doc2);
        _Loop pMarker
        { InsertMarker(Marker_Tmp,pMarker.pNRec )
        }
        SubBounds(tbRmGP_KPI_Doc2);
        AddBounds(tbRmGP_KPI_Doc1);
      }
      CalculateDoc(true);
      DoneMarker(Marker_Tmp,'');
    }
    cmValue11://Сформировать ведомости на остатки
    {  //Message('В разработке');
       MakeVedomByOst;
    }
  end;
end.
