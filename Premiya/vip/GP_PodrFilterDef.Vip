/** Контур/Модуль: Заработная плата                                                                 *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#1704         |09/01/18|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#794          |09/01/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/

//для склонения
//#include odecl.vih - есть в проекте

#include GP_PodrFilterDef.Vih
//component "GP_Common"


Interface GP_PodrFilterDef ;
var
 tp_spr :word ;
 marker :tptr ;
 namefilter :string ;
 logfilekl :boolean;
 logfilenm :string ;
 shot_name :boolean ;
parameters tp_spr , marker , namefilter ;
table struct tmp_podrfilter
( name :string ,
  nrec :comp   ,
  cparent : comp ,
  code : string ,
  pa :word ,
  kolchild : longint 
) with index
( tmp_podrfilter01 = nrec ,
  tmp_podrfilter02 = cparent ,  
  tmp_podrfilter03 = pa+nrec   
) ;  
create view vGetPodrFilter
var
 wpodrfilter :comp ;
 wpodr_hist:date ;
 w_cfpco :comp ;
as select catalogs.name
from catalogs,catalogs catup
,tmp_podrfilter(tmp_podrfilter01) ,tmp_podrfilter tmp_podrfilter1
,katpodr ,katpodr katpodr_up ,Pick
,fpco
where (( 
  wpodrfilter == catalogs.nrec 
  and  tmp_podrfilter.nrec  == catup.cparent
  and wpodrfilter == CATHIST.CCAT
  and wpodr_hist >>=CATHIST.DAT1
  and wpodrfilter == katpodr.nrec 
  and tmp_podrfilter.nrec  == katpodr_up.cpodr
  and w_cfpco == fpco.nrec
   ))
  ;
//include podr_zarflt.vpp
table struct tmp_USERRIGHTS
( crecds :comp
)
with index
(  tmp_USERRIGHTS01 =crecds
) ;
create view vzar_flt
var  wusername :string ;
     wc_podr : comp ;
     wneed_flt : boolean ;
as select zar_user.nrec
from zar_user, USERRIGHTS , tmp_USERRIGHTS
where ((
  wusername == zar_user.OWNNAME
//  and wc_podr /== USERRIGHTS.crecds
  and wusername == USERRIGHTS.OWNNAME
  and wc_podr == tmp_USERRIGHTS.crecds
)) ;
// инициализировать фильтр
Procedure  Zar_InitFltPodr ;
{ vzar_flt.wusername:=username() ;
  vzar_flt.wneed_flt:=false;
  if vzar_flt.getfirst zar_user=0
    if vzar_flt.ZAR_USER.PODRSHARE = '+'
    {  vzar_flt.wneed_flt:=true ;
    } else exit ;
  vzar_flt.resetbounds(vzar_flt.tntmp_USERRIGHTS);
  vzar_flt.delete all tmp_USERRIGHTS ;
  vzar_flt._loop fullcache USERRIGHTS
  { vzar_flt.insert into tmp_USERRIGHTS set tmp_USERRIGHTS.crecds := USERRIGHTS.crecds ;
  }
  vzar_flt.setbounds(vzar_flt.tntmp_USERRIGHTS)
}
// проверить фильтр
Function Zar_CheckFltPodr(wwc_podr :comp ) :boolean ;
{ Zar_CheckFltPodr:=true ;
  if not vzar_flt.wneed_flt then exit ;
  set vzar_flt.wc_podr:=wwc_podr ;
  if vzar_flt.getfirst fastfirstrow tmp_USERRIGHTS<>0
  {  Zar_CheckFltPodr:=false ;
  }

}
  
Procedure SetLogFile (w :string) ;
{ 
  if w<>''
  {  logfilenm:=w ;
     logfilekl:=true ;
  }
  else
   logfilekl:=false ;
  
}
procedure Mylog(w :string );
{ if logfilekl
    logstrtofile(logfilenm,w);
  exit ;
//  w:=w ;
}
//include attr_Func.Vpp

//========================================
Procedure SetShot_Name(w : boolean ) ;
{ shot_name:=w ;
}
//#include Marker_my.Vpp
//================================
// перенести данные из маркера в маркер
//================================
 procedure MarkCopyMarkers(fromMarker : tptr ; toMarker : tptr) ;
  // Копирует данные из маркера fromMarker в маркер toMarker
  var
  i        : LongInt ;
  Item     : Comp ;
  MrkCount : LongInt ;
  {
  ClearMarker(toMarker) ;
  MrkCount := GetMarkerCount(fromMarker) - 1 ;
   for (i := 0; i <= MrkCount; i := i + 1)
    if (GetMarker(fromMarker, i, Item))
    {   InsertMarker(toMarker, Item) ;

    }

 } // procedure CopyMarkers
// перенести в Pick
Procedure Mark2Pic(fromMarker : tptr ;wListDest : word) ;
  var
  i        : LongInt ;
  Item     : Comp ;
  MrkCount : LongInt ;
{ resetbounds(#PICK);
  Delete Pick Where (( Word(wListDest) == Pick.wList ));
  MrkCount := GetMarkerCount(fromMarker) - 1 ;
  for (i := 0; i <= MrkCount; i := i + 1)
  {  if (GetMarker(fromMarker, i, Item))
     { ClearBuffer(#Pick);
       Pick.NRec    := 0;
       Pick.wList   := wListDest;
       Pick.cRec    := item;
       Pick.PickNum := i;
       Insert Current Pick;
     }
  }
  setbounds(#PICK)
}
Procedure Pic2Mark(toMarker : tptr ;wListDest : word) ;
{ ClearMarker(toMarker) ;
  resetbounds(#PICK);
  _loop fullcache Pick Where (( Word(wListDest) == Pick.wList ))
  {
    InsertMarker(toMarker, Pick.crec) ;
  }
  setbounds(#PICK)
}
//================================
// перенести данные из заданного маркера в маркер по имени
//================================

  procedure MarkCopyMyToCat(fromMarker :tptr;nmmarker :string) ;
  // Копирует данные из маркера DeptMarker в маркер CatalogsMarker
  var
  CatalogsMarker : tptr ;
  {
  CatalogsMarker := InitMarker(nmmarker, 8, 200, 10) ;
  MarkCopyMarkers(fromMarker, CatalogsMarker) ;
  DoneMarker(CatalogsMarker, nmmarker) ;
  } // procedure MarkCopyMyToCat

//================================
// перенести данные в заданный маркер из маркера по имени
//================================
  procedure MarkCopyCatToMy(fromMarker :tptr;nmmarker :string) ;
  // Копирует данные из маркера CatalogsMarker в маркер DeptMarker
  var  CatalogsMarker : tptr ;
  {
  CatalogsMarker := InitMarker(nmmarker, 8, 200, 10) ;
  MarkCopyMarkers(CatalogsMarker, fromMarker) ;
  DoneMarker(CatalogsMarker, nmmarker) ;
  } // procedure MarkCopyDeptToCat

  
public Function GetPodrFilterName(wMarker :tptr):string  ;
  var
  i        : LongInt ;
  Item     : Comp ;
  MrkCount : LongInt ;
  wwkl:boolean ;
{
//  message('1') ;
  if fileexist('!pfier.log') deletefile('!pfier.log') ;
  delete all tmp_podrfilter ;
  GetPodrFilterName :='';
  MrkCount := GetMarkerCount(wMarker) - 1 ;
  if MrkCount=-1
  { GetPodrFilterName:='нет выбранных подразделений';
    exit ;
  
  }
  set wpodrfilter:=0 ;
  if MrkCount=0
  { if (GetMarker(wMarker, 0, Item))
    { wpodrfilter:=Item ;
      if getfirst catalogs=0
      GetPodrFilterName:=catalogs.name     
    }
    exit ;
  }
  wpodrfilter:=0 ;
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfconfirm,
        ''#3'Определяем помеченность одной ветки', 0);
  nextvisual ;
//  message('2') ;
  for (i := 0; i <= MrkCount; i := i + 1)
  {  if (GetMarker(wMarker, i, Item))
     { wpodrfilter:=Item ;
      if getfirst catalogs=0
      { tmp_podrfilter.nrec:=catalogs.nrec ;
        tmp_podrfilter.cparent:=catalogs.cparent ;      
        tmp_podrfilter.name:=catalogs.name ;      
        tmp_podrfilter.code:=catalogs.code ;      
        tmp_podrfilter.pa:=0 ;      
        insert current tmp_podrfilter ;
        
      }
    }  
  }  
  i:=0 ;
  wpodrfilter:=0 ;
//  message('3') ;
//mylog('========')  
  nextvisual ;
  external _loop tmp_podrfilter
  { inc(i);
//mylog('01 '+tmp_podrfilter.pa+'/'+tmp_podrfilter.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter.cparent)  
    if i mod 10=0
    { if not nextvisual then break ;
    }
    if i>100000 then 
    { message('Критическая ошибка проверки иерархии');
      break ;
    }
    if getfirst tmp_podrfilter1 where ((
      tmp_podrfilter.cparent == tmp_podrfilter1.nrec )) =0
    { tmp_podrfilter.pa:=1 ;  
      update current tmp_podrfilter ;
      tmp_podrfilter1.kolchild:=tmp_podrfilter1.kolchild+1 ;
      update current tmp_podrfilter1 ;
//mylog('02 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  
    }  
  }
//  rereadrecord ;
  if getfirst tmp_podrfilter1 
  where (( 0 == tmp_podrfilter1.pa))  =0
  { 
//mylog('03 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  
    if getnext tmp_podrfilter1
    where (( 0 == tmp_podrfilter1.pa))  =0
    { // значится несколько веток пометили - пропускаем
//mylog('04 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  
      GetPodrFilterName:='по '+string(GetMarkerCount(wMarker))+'подр.'      
    }
    else // нужно еще проверить а все ли нижестоящие помечены
    { wwkl:=true ;
      _loop tmp_podrfilter
      { inc(i);
        if i mod 10=0 nextvisual ;
        if i>100000 then 
        { message('Критическая ошибка проверки иерархии');
          break ;
        }
        MrkCount:=0;
        _loop catup
        { inc(MrkCount)
        
        }
        if MrkCount<>tmp_podrfilter.kolchild
        {
          GetPodrFilterName:='по '+string(GetMarkerCount(wMarker))+'подразд.';     
//          exit ;
          wwkl:=false ;
          break ;
        }
      }
      if wwkl
      { if getfirst tmp_podrfilter1 
        where (( 0 == tmp_podrfilter1.pa))  =0
        {
          set wpodrfilter:=tmp_podrfilter1.nrec ;
          if getfirst catalogs=0
           GetPodrFilterName:=catalogs.name+'.'           
        }
      } //if wwkl
    } // else
  } else
    GetPodrFilterName:='по '+string(GetMarkerCount(wMarker))+' подраздел.' ;     
//  message('4') ;
  
  Stopvisual('',0)
   
}
public Function GetPodrFilterName1(wMarker :tptr;wwhist:boolean;wdate_hist:date ):string  ;
var wstr:string ;
{ wstr:=GetPodrFilterName(wMarker) ;
  if wwhist and wpodrfilter>0
  { set wpodr_hist:=wdate_hist ;
    if getlast cathist=0
      wstr:=cathist.name+'.'
  }
  GetPodrFilterName1:=wstr ;
}

Function GetKatpodrNameF :string ;
var wstr:string ;
{ wstr:='' ;
  if shot_name
  {  //wstr:=sTXOGetExtAttr('KATPODR','Краткое наименование',katpodr.nrec) 
    wstr:= sGetAttr(coKatpodr,katpodr.nrec,'Краткое наименование')
  }
  if wstr='' then wstr:=katpodr.name;
  GetKatpodrNamef:=wstr ;
}


public Function GetKatPodrFilterName(wMarker :tptr  ):string  ;
  var
  i        : LongInt ;
  Item     : Comp ;
  MrkCount : LongInt ;
  wwkl:boolean ;
{
//  message('1') ;
  if fileexist('!pfier.log') deletefile('!pfier.log') ;
  delete all tmp_podrfilter ;
  GetKatPodrFilterName :='';
  MrkCount := GetMarkerCount(wMarker) - 1 ;
  if MrkCount=-1
  { GetKatPodrFilterName:='нет выбранных подразделений';
    exit ;
  
  }
  set wpodrfilter:=0 ;
  if MrkCount=0
  { if (GetMarker(wMarker, 0, Item))
    { wpodrfilter:=Item ;
      if getfirst katpodr=0
      GetKatPodrFilterName:=katpodr.name     
    }
    exit ;
  }
  wpodrfilter:=0 ;
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfconfirm,
        ''#3'Определяем помеченность одной ветки', 0);
  nextvisual ;
//  message('2') ;
  for (i := 0; i <= MrkCount; i := i + 1)
  {  if (GetMarker(wMarker, i, Item))
     { set wpodrfilter:=Item ;
       mylog('nrec = '+string(wpodrfilter) );
      if getfirst katpodr=0 and KATPODR.SKLAD=0
      { tmp_podrfilter.nrec:=katpodr.nrec ;
        tmp_podrfilter.cparent:=katpodr.cpodr ;      
        tmp_podrfilter.name:=GetKatpodrNameF ; //katpodr.name ;      
        tmp_podrfilter.code:=katpodr.kod ;      
        tmp_podrfilter.pa:=0 ;      
        insert current tmp_podrfilter ;
        mylog(tmp_podrfilter.name)
      }
    }  
  }  
  i:=0 ;
  wpodrfilter:=0 ;
//  message('3') ;
mylog('========') ; 
  nextvisual ;
  external _loop tmp_podrfilter
  { inc(i);
mylog('01 '+tmp_podrfilter.pa+'/'+tmp_podrfilter.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter.cparent)  ;
    if i mod 10=0
    { if not nextvisual then break ;
    }
    if i>100000 then 
    { message('Критическая ошибка проверки иерархии') ;
      break ;
    }
    if getfirst tmp_podrfilter1 where ((
      tmp_podrfilter.cparent == tmp_podrfilter1.nrec )) =0
    { tmp_podrfilter.pa:=1 ;  
      update current tmp_podrfilter ;
      tmp_podrfilter1.kolchild:=tmp_podrfilter1.kolchild+1 ;
      update current tmp_podrfilter1 ;
mylog('02 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  
    }  
  }
  rereadrecord(#tmp_podrfilter1) ;
  if getfirst tmp_podrfilter1 
  where (( 0 == tmp_podrfilter1.pa))  =0
  { 
mylog('03 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  ;
    if getnext tmp_podrfilter1
    where (( 0 == tmp_podrfilter1.pa))  =0
    { // значится несколько веток пометили - пропускаем
mylog('04 '+tmp_podrfilter1.pa+'/'+tmp_podrfilter1.name+'/'+tmp_podrfilter.nrec+'/'+tmp_podrfilter1.cparent)  ;
      GetKatPodrFilterName:='по '+string(GetMarkerCount(wMarker))+'подр.'      
    }
    else // нужно еще проверить а все ли нижестоящие помечены
    { wwkl:=true ;
      _loop tmp_podrfilter
      { inc(i);
        if i mod 10=0 nextvisual ;
        if i>100000 then 
        { message('Критическая ошибка проверки иерархии');
          break ;
        }
        MrkCount:=0;
        _loop katpodr_up
        { if katpodr_up.sklad=0
            inc(MrkCount)
        
        }
        if MrkCount<>tmp_podrfilter.kolchild
        { mylog('5 '+string(MrkCount)+'/'+string(tmp_podrfilter.kolchild)
            +'/'+tmp_podrfilter.name);
          GetKatPodrFilterName:='по '+string(GetMarkerCount(wMarker))+'подразд.';     
//          exit ;
          wwkl:=false ;
          break ;
        }
      }
      if wwkl
      { if getfirst tmp_podrfilter1 
        where (( 0 == tmp_podrfilter1.pa))  =0
        {
          set wpodrfilter:=tmp_podrfilter1.nrec ;
          if getfirst katpodr=0
           GetKatPodrFilterName:=GetKatpodrNameF //katpodr.name ;
        }
      } //if wwkl
    } // else
  } else
    GetKatPodrFilterName:='по '+string(GetMarkerCount(wMarker))+' подраздел.' ;     
//  message('4') ;
  
  Stopvisual('',0)
   
}
//=======================================
// получить свертку для уровня
//=======================================
create view vkatpodr
var
  wwwkod :longint ;
  wwwnrec:comp ;
  wwwpodr :string ;
  podr_hist : boolean ;
  podr_histdate :date ;
from katpodr,tmp_podrier_GP (tmp_podrier_GP01) , katpodr katpodr_dop , fpco
where
((  wwwnrec == katpodr.nrec
and wwwnrec == tmp_podrier_GP.crec
and wwwpodr == katpodr_dop.name
AND 0 == FPCO.CMAIN
and wwwpodr == fpco.name 
)) ;
! вернем код и наименование на заданном уровне
var katpodr_dmnm : array [1..10] of string ;
var  wdmc_podr:array [1..10] of comp ;
//========================================
/*
Procedure katpodrGetLevelinit ;
{  vkatpodr.resetbounds(vkatpodr.tntmp_podrier_GP)
   vkatpodr.delete all tmp_podrier_GP ;
   vkatpodr.setbounds(vkatpodr.tntmp_podrier_GP)
}
*/
Function GetKatpodrName :string ;
var wstr:string ;
{ wstr:='' ;
  if shot_name
  { //wstr:=sTXOGetExtAttr('KATPODR','Краткое наименование',vkatpodr.katpodr.nrec) 
    wstr:= sGetAttr(coKatpodr,vkatpodr.katpodr.nrec,'Краткое наименование')
  }
  if wstr='' 
    wstr:=vkatpodr.katpodr.name;
  GetKatpodrName:=pad(vkatpodr.katpodr.kod,20)+wstr ;
}
// получить значение на уровне
Function katpodrGetLevel(wwpodr:string;wcnrec : comp ;wlev :word ) :string ;
var 
  kkk:word ;
  wstr:string ;
  wtmpnrec :comp ;
  katpodrlev_errchet :longint ;
{ if wlev=0
  { katpodrGetLevel:=pad('0000',20)+'Все предприятие' ;
    for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
    {  katpodr_dmnm[kkk] :=pad('0000',20)+'Все предприятие' ; ;
        wdmc_podr[kkk]:=0 ;
    }  
    exit ;
  }
  katpodrGetLevel:=wwpodr;
  if wwpodr='' and wcnrec=0
  {  for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
     {  katpodr_dmnm[kkk] :='' ;
        wdmc_podr[kkk]:=0 ;
     }   
     exit 
  }
  set vkatpodr.wwwpodr :=wwpodr;
  set vkatpodr.wwwnrec:=wcnrec;
  if wwpodr<>''
  { if vkatpodr.getfirst katpodr_dop=0
    { set vkatpodr.wwwnrec := vkatpodr.katpodr_dop.nrec ;
      wcnrec:=vkatpodr.katpodr_dop.nrec ;
    }
  } 
  wstr:='';
  if vkatpodr.getfirst tmp_podrier_GP=0 //fastfirstrow 
  { 
    for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
    { katpodr_dmnm[kkk] :=vkatpodr.tmp_podrier_GP.dmpodrnm[kkk] ;
      wdmc_podr[kkk]:=vkatpodr.tmp_podrier_GP.dmpodr_c[kkk] ;
      if logfilekl
        wstr:=wstr+katpodr_dmnm[kkk]+'/'
    }
    if logfilekl mylog('!!!! '+katpodr_dmnm[wlev]+'=/='+wstr) ; 
  }
  else
  { 
    if (vkatpodr.Getfirst fastfirstrow katpodr<>0)
    { katpodrGetLevel:=string(vkatpodr.wwwnrec)+wwpodr ;
      for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
      { katpodr_dmnm[kkk] :='' ;
        wdmc_podr[kkk]:=0 ;
        if logfilekl
         wstr:=wstr+katpodr_dmnm[kkk]+'/'
      }
      exit ;
    }
//    wstr:=pad(vkatpodr.katpodr.kod,20)+vkatpodr.katpodr.name ;
    wstr:=GetKatpodrName;
    if (wlev>10) 
    { 
      katpodrGetLevel:=wstr ;
      exit ;
    }

    for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
    { //katpodr_dmnm[kkk] :=pad(vkatpodr.katpodr.kod,20)+vkatpodr.katpodr.name ;
      katpodr_dmnm[kkk] :=wstr ;
      
      wdmc_podr[kkk] :=wcnrec ;
    }
    katpodrlev_errchet:=0 ;  
    do {
      inc(katpodrlev_errchet) ;  // 100 уровней по дереву маловероятно
      if katpodrlev_errchet>100 
      { exit ;
      } ;  

      wtmpnrec:=vkatpodr.katpodr.cpodr;
      set vkatpodr.wwwnrec:=wtmpnrec ;
      if vkatpodr.wwwnrec=0 then break ; // дошли до ручки
      if (vkatpodr.wwwnrec<>0)
      { if (vkatpodr.getfirst katpodr<>0) then break ;
        for(kkk:=10 ; kkk>=2 ;kkk:=kkk-1)
        {  katpodr_dmnm[kkk] := katpodr_dmnm[kkk-1];
           wdmc_podr[kkk] :=wdmc_podr[kkk-1]
        }
//        katpodr_dmnm[1]:= pad(vkatpodr.katpodr.kod,20)+vkatpodr.katpodr.name ;
        katpodr_dmnm[1]:= GetKatpodrName ;
        wdmc_podr[kkk] :=vkatpodr.wwwnrec;
      } else break ;
      if logfilekl mylog(pad(vkatpodr.katpodr.kod,10)+vkatpodr.katpodr.name) ;
    } while true ;
    for(kkk:=1 ; kkk<=10 ;kkk:=kkk+1)
    {  vkatpodr.tmp_podrier_GP.dmpodrnm[kkk]:=katpodr_dmnm[kkk];
       vkatpodr.tmp_podrier_GP.dmpodr_c[kkk]:=wdmc_podr[kkk]
    }
    vkatpodr.tmp_podrier_GP.crec:=wcnrec  ;
    vkatpodr.insert current tmp_podrier_GP ;
  }  
  katpodrGetLevel:=katpodr_dmnm[wlev] ;
  if logfilekl
  { wstr:='' ;
    for(kkk:=1 ; kkk<=wlev ;inc(kkk)) wstr:=wstr+katpodr_dmnm[kkk]+'/' ;
    mylog(vkatpodr.katpodr.name+'/'+katpodr_dmnm[wlev]+'=/='+wstr) ; 
  
  }
}
// получить значение на уровне
Function katpodrGetLevelName(wlev :word) :string ;
{  katpodrGetLevelName:=katpodr_dmnm[wlev]

}
// получить значение на уровне nrec
Function katpodrGetLevelNrec(wlev :word) :comp ;
{  katpodrGetLevelNrec:=wdmc_podr[wlev]

}
// инициализация свертки до уровня
Procedure katpodrGetLevelInit ;
{
 vkatpodr.resetbounds(vkatpodr.tntmp_podrier_GP);
 vkatpodr.delete all tmp_podrier_GP ;
 vkatpodr.setbounds(vkatpodr.tntmp_podrier_GP);
 Zar_InitFltPodr ;
}
// найти подразделение по наименованию центра ответсвенности 
function FindKatPodrByFpco(wwpodr :string ) :comp ;
{
  FindKatPodrByFpco:=0 ;
  set vkatpodr.wwwpodr :=wwpodr;
  if vkatpodr.getfirst fpco=0
  { FindKatPodrByFpco:=vkatpodr.FPCO.CMEAN;
  }
}
//=========================
// Проверить подчиненость одного центра ответсвенносит другому
//=========================
Function CheckPodchinenieFPCO(w_Fpco_main :comp; w_Fpco_slave :comp):boolean;
var w:comp;
{ CheckPodchinenieFPCO:=false ;
  w_cFpco:=w_fpco_slave ;
  do {
    if getfirst fpco<>0 then break;
    if fpco.cnode=0 then break;
    if fpco.cnode=w_fpco_main
    { CheckPodchinenieFPCO:=true;
      exit;
    }
    w:=fpco.cnode;
    w_cfpco:=w
  } while true
}
//=========================
// Проверить подчиненость одного подразделения другому
//=========================
Function CheckPodchineniePodr(w_podr_main :comp; w_podr_slave :comp):boolean;
var w:comp;
{ CheckPodchineniePodr:=false ;
  wpodrfilter:=w_podr_slave;
  do {
    if getfirst katpodr<>0 then break;
    if katpodr.cpodr=0 then break;
    if katpodr.cpodr=w_podr_main
    { CheckPodchineniePodr:=true;
      exit;
    }
    w:=katpodr.cpodr;
    wpodrfilter:=w
  } while true
}
//==============================
HandleEvent
cmInit :
{ katpodrGetLevelInit ;
  case tp_spr of
  0 : namefilter:=GetPodrFilterName(marker) ; // catalogs
  1 : namefilter:=GetKatPodrFilterName(marker) ; // katpodr
  end ;
  closeinterface(cmDefault );
  exit ;
}
cmOnVipLoad:
{  katpodrGetLevelInit ;
   shot_name:=false ;
   katpodrGetLevelInit ;
   logfilenm:='!pfier.log';
   InitServTxo(0);
   Zar_InitFltPodr ;
}
cmOnVipUnload :
{ DoneServTxo ;
}
end ;
end.
