/*************************************************************************************************\
* Наименование: Ведомости премирования                                                            *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |20/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#781          |20/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include Contexts.vih // прикладные контексты (для инициализации табеля)
//------------------------------
#include GP_GetPodalN.Vih
#include GP_PickTypeDocs.Vih
#include GP_Status.vih
#include GP_StatusChange.vih
#include GP_StatusAccessEdit.vih

#include GP_KPI_RaiseEdit.Vih
//------------------------------
#include GP_KPI_Doc_RaiseEdit_Sp.Vih
//-----------------------------------------
#include GP_KPI_Doc_RaiseEdit.Vih
//-----------------------------------------
#doc
Ведомости премирования
#end
//----------------------------------------
Interface GP_KPI_Doc_RaiseEdit 'Ведомости премирования' , EscClose;
//----------------------------------------
Show At (,,120,30);
//----------------------------------------
// Forward
//----------------------------------------
//------------------------------------
// декларация сложного фильтра
//------------------------------------
function isFilterAnCorrect(ww_nrec:comp): boolean; forward;
Procedure PositionChanged(_wIntMode_Add:word=0);Forward;
Function CalcRezerv:boolean;Forward;
//-----------------------------------------------
var
//----------------------------------------
// объекты
//----------------------------------------
  iGP_KPI_Doc_RaiseEdit_Sp : GP_KPI_Doc_RaiseEdit_Sp New;
//-----------------------------------------------
  pLschet :comp;//ссылка на лиц.счет
  pPersons:comp;
  pKatpodr:comp;
  Marker_Spec:tptr; // Для убирания лишних людей
//-------- Настройки
  NPOEM_OWN_Raise_FORM_DEL_waste:boolean;//При переформировании ведомостей 101-103 убирать "лишних" сотрудников
//-----------------------
// для вставки
   boIns_Doc      :boolean;
   pIns_Podr      :comp;
   pIns_Kpi_Raise :comp;
   pIns_Status    :comp;
   boIns_Rezerv   :boolean; // признак запуска окна для вставки для расчета резерва
//-----------------------------------------
// Фильтры
//-----------------------------------------

   #mrkfld_(TypeDocs)
   #mrkfld_(CatRaise)
   #mrkfld_(KatPodrIns)
   #mrkfld_(KPI_RAISE)


   wType_Flt      :word;
   wYear_Flt      :word;
   wMonth_b_Flt   :word;
   wMonth_e_Flt   :word;
   wZP_FLT,wZP_FLT_A :word;
   wKvartal_Ins      :word;
   wYear_Ins         :word;
   wYearY_Ins        :word;

//------------------------------
Create View
as select GP_KPI_Fond.nrec
//---------------------------------
  , word(GP_KPI_Doc.HARRCOMP[1]) (FieldName=Rez_Kv_Mes ,FieldTitle='Квартальный резерв - месяц')
  , word(GP_KPI_Doc.HARRCOMP[2]) (FieldName=Rez_Kv_Year,FieldTitle='Квартальный резерв - год')
  , word(GP_KPI_Doc.HARRCOMP[3]) (FieldName=Rez_YP_Year,FieldTitle='Годовой резерв - год')
  , word(GP_KPI_Doc.HARRCOMP[4]) (FieldName=Rez_Option ,FieldTitle='Резерв - опции')
//---------------------------------
  , if(IsValidALL(tnGP_KPI_Doc_Z),'ЗП','') (FieldName=FLag, FieldTitle='Флаг')
From
  GP_KPI_Fond
//, GP_KPI_Raise
 ,GP_KPI_Raise GP_KPI_Raise_KV
 ,GP_KPI_Raise GP_KPI_Raise_YP
//--------------------
, Lschet
, Lschet Lschet_F
, Persons Persons_F
, KlKatego KlKatego_Ls
, Perexod
, tmp_kpi_Doc_Val//GP_KPI_RAISEEDIT.Vih
, tmp_kpi_sum   //GP_KPI_RAISEEDIT.Vih Для расчета итогов, например фондов
//--- ведомости по зарплате
, GP_KPI_Doc_Z
, Sys_Mbf
//------- фильтры
 , GP_TypeDocs    TypeDocs_Flt
 , Catalogs       CatRaise_Flt
 , GP_KPI_RAISE   KPI_RAISE_Flt

where ((
   GP_KPI_Doc_Sp.cGP_KPI_Raise == GP_KPI_Raise.Nrec
//----------------------------------------
and GP_KPI_Doc.wType==    GP_KPI_DOCSUMFOND.wType
and GP_KPI_Doc.Nrec ==    GP_KPI_DOCSUMFOND.CDOC
//-----------------------
and GP_KPI_Doc.HARRCOMP[5]  == GP_KPI_Raise_KV.Nrec
and GP_KPI_Doc.HARRCOMP[6]  == GP_KPI_Raise_YP.Nrec
//-----------------------
and GP_KPI_Doc.Nrec       == GP_KPI_Doc_Z.cGP_KPI_Doc
and GP_KPI_Doc_Z.cSys_Mbf == Sys_Mbf.Nrec

//----------------------------------------
and pLschet == Lschet_F.Nrec
and Lschet_F.KATEG == KlKatego_Ls.Kod
and pKatpodr == Lschet.Cex
and pKatpodr == Perexod.CEXP
and pPersons == Persons_F.Nrec

//----- Распределение по фондам
and GP_KPI_DocSumFond.cGP_KPI_Fond == GP_KPI_Fond.Nrec
//------- фильтры
and wc_nrec == TypeDocs_Flt.Nrec
and wc_nrec == CatRaise_Flt.Nrec
and wc_nrec == KPI_RAISE_Flt.Nrec
))
Bounds byKatpodr pKatPodr_flt   == GP_KPI_Doc.cKatPodr(noindex) ordered by TableOrder
Bounds byMonth wMonth_b_Flt <<= GP_KPI_Doc.wMonth(noindex)
           and wMonth_e_Flt >>= GP_KPI_Doc.wMonth(noindex)
          ordered by TableOrder
Bounds byYear      wYear_Flt == GP_KPI_Doc.wYear(noindex) ordered by TableOrder
Bounds byStatus    pStatus_Flt == GP_KPI_Doc.cStatus(noindex) ordered by TableOrder
Bounds byTypeDocs  wType_Flt   == GP_KPI_Doc.wType(noindex) ordered by TableOrder
Bounds byTypeDocsAll  100<<= GP_KPI_Doc.wType(noindex) ordered by TableOrder
condition FilterAn = // использование сложного фильтра
  (isFilterAnCorrect(GP_KPI_DOC.Nrec))

;


//----------- Для сбора сумм фондов
Create view vFond
var
  pFond:comp;
  pDoc :comp;
  wTypeFld:word;//0 Премии, pDoc=GP_KPI_RAISE.Nrec
as select GP_KPI_Fond.Nrec
From GP_KPI_Fond
 ,GP_KPI_FIELDS
 ,GP_KPI_GroupPers
where
((  pFond == GP_KPI_Fond.Nrec
and wTypeFld  == GP_KPI_Fields.wType
and pDoc      == GP_KPI_Fields.cDoc
and GP_KPI_Fond.cGroupPers == GP_KPI_GroupPers.Nrec
));

//*************************************************8
QuickChoice qcByCode
{
  AcceptField = GP_KPI_Doc.Nrec;
  ViewField = GP_KPI_Doc.DocNumber;
  ViewField = GP_KPI_Doc.wYear;
  ViewField = GP_KPI_Doc.wMonth;
  ViewField = GP_KPI_Doc.wKvartal;

  // только текстовый поля!
  SearchField = GP_KPI_Doc.DocNumber;
  OnOpen : {
  }
  OnClose : {
    cRec  := GP_KPI_Doc.Nrec;
    cRecSP:=0;
  }
}
QuickChoice qcByName
{
  AcceptField = GP_KPI_Doc.Nrec;
  ViewField = GP_KPI_Doc.DocNumber;
  ViewField = GP_KPI_Doc.wYear;
  ViewField = GP_KPI_Doc.wMonth;
  ViewField = GP_KPI_Doc.wKvartal;

  // только текстовый поля!
  SearchField = GP_KPI_Doc.DocNumber;
  OnOpen : {
  }
  OnClose : {
    cRec  := GP_KPI_Doc.Nrec;
    cRecSP:=0;
  }
}

  //------------------------------------
  // сохранить параметры
  //------------------------------------
  Procedure SaveParam;
  { SaveMyDsk(wFilter     ,GetInterfaceName+string(wTypeDoc)+'_wFilter'     );
    SaveMyDsk(wYear_Flt   ,GetInterfaceName+string(wTypeDoc)+'_wYear_Flt'   );
    SaveMyDsk(wMonth_b_Flt,GetInterfaceName+string(wTypeDoc)+'_wMonth_b'    );
    SaveMyDsk(wMonth_e_Flt,GetInterfaceName+string(wTypeDoc)+'_wMonth_e'    );
    SaveMyDsk(wType_Flt   ,GetInterfaceName+string(wTypeDoc)+'_wType_Flt'   );
    SaveMyDsk(wKvartal_Ins,GetInterfaceName+string(wTypeDoc)+'_wKvartal_Ins');
    SaveMyDsk(wYear_Ins   ,GetInterfaceName+string(wTypeDoc)+'_wYear_Ins'   );
    SaveMyDsk(wYearY_Ins  ,GetInterfaceName+string(wTypeDoc)+'_wYearY_Ins'  );
    SaveMyDsk(wZP_FLT     ,GetInterfaceName+string(wTypeDoc)+'_wZP_FLT'     );
    //-----------------------
    DoneMarker(Marker_TypeDocs_A, '' );
    DoneMarker(Marker_CatRaise_A, '' );
    DoneMarker(Marker_Status_A, '' );
    DoneMarker(Marker_KatPodr_A, '' );
    //-----------------------
    DoneMarker(Marker_TypeDocs, GetInterfaceName+string(wTypeDoc)+'_TypeDocs' );
    DoneMarker(Marker_CatRaise, GetInterfaceName+string(wTypeDoc)+'_CatRaise' );
    DoneMarker(Marker_Status  , GetInterfaceName+string(wTypeDoc)+'_Status'   );
    DoneMarker(Marker_Katpodr , GetInterfaceName+string(wTypeDoc)+'_Katpodr'  );
    //-- для создания
    DoneMarker(Marker_KatPodrIns , GetInterfaceName+string(wTypeDoc)+'_KatpodrIns'  );
    DoneMarker(Marker_KPI_RAISE  , GetInterfaceName+string(wTypeDoc)+'_KPI_RAISE'  );
  } //Procedure SaveParam;

  //------------------------------------
  // восстановить параметры
  //------------------------------------
  Procedure ReadParam;
  { if not ReadMyDsk(wFilter     ,GetInterfaceName+string(wTypeDoc)+'_wFilter'     ,false) wFilter     :=0;
    if not ReadMyDsk(wYear_Flt   ,GetInterfaceName+string(wTypeDoc)+'_wYear_Flt'   ,false) wYear_Flt   :=YearRas;
    if not ReadMyDsk(wMonth_b_Flt,GetInterfaceName+string(wTypeDoc)+'_wMonth_b'    ,false) wMonth_b_Flt:=MonthRas;
    if not ReadMyDsk(wMonth_e_Flt,GetInterfaceName+string(wTypeDoc)+'_wMonth_e'    ,false) wMonth_e_Flt:=MonthRas;
    if not ReadMyDsk(wKvartal_Ins,GetInterfaceName+string(wTypeDoc)+'_wKvartal_Ins',false) wKvartal_Ins:=0;
    if not ReadMyDsk(wYear_Ins   ,GetInterfaceName+string(wTypeDoc)+'_wYear_Ins'   ,false) wYear_Ins   :=0;
    if not ReadMyDsk(wYearY_Ins  ,GetInterfaceName+string(wTypeDoc)+'_wYearY_Ins'  ,false) wYearY_Ins  :=0;
    if not ReadMyDsk(wZP_FLT     ,GetInterfaceName+string(wTypeDoc)+'_wZP_FLT'     ,false) wZP_FLT     :=0;

    Marker_TypeDocs  :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_TypeDocs' , 8, 50, 10, True);
    Marker_CatRaise  :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_CatRaise' , 8, 50, 10, True);
    Marker_KatPodr   :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_KatPodr'  , 8, 50, 10, True);
    Marker_Status    :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_Status'   , 8, 50, 10, True);

    Marker_TypeDocs_A :=InitMarker('' , 8, 50, 10, True);
    Marker_CatRaise_A :=InitMarker('' , 8, 50, 10, True);
    Marker_KatPodr_A  :=InitMarker('' , 8, 50, 10, True);
    Marker_Status_A   :=InitMarker('' , 8, 50, 10, True);
    //-- для создания
    Marker_KatPodrIns :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_KatpodrIns' , 8, 50, 10, True);
    Marker_KPI_RAISE  :=InitMarker(GetInterfaceName+string(wTypeDoc)+'_KPI_RAISE'  , 8, 50, 10, True);

  } //  Procedure ReadParam;

  //------------------------------------
  // декларация сложного фильтра
  //------------------------------------
  function isFilterAnCorrect(ww_nrec:comp): boolean; cacheable;
  { #__UNUSED__(ww_nrec)
    Result:=true;
    if isPodrShare
    { if not EnablePodr(GP_KPI_Doc.cKatPodr) then
      { Result:=false;
        exit;
      }
    }
    if IsBitCTW(wFilter,3)
    { if Count_TypeDocs>1
      { If not FoundMarker(Marker_TypeDocs_A,Gp_TypeDocs.Nrec)
        { Result:=false;
          Exit;
        }
      }
    }
    if IsBitCTW(wFilter,4)
    { if Count_Status>1
      { If not FoundMarker(Marker_Status_A,GP_KPI_Doc.cStatus)
        { Result:=false;
          Exit;
        }
      }
    }
    if IsBitCTW(wFilter,5)
    { if Count_KatPodr>1
      { If not FoundMarker(Marker_Katpodr_A,GP_KPI_Doc.cKatpodr)
        { Result:=false;
          Exit;
        }
      }
    }
    if IsBitCTW(wFilter,6)
    { var isFind:boolean=false;
      _Loop GP_KPI_Doc_Sp
      { //if getfirst GP_KPI_Raise=tsok
         If FoundMarker(Marker_CatRaise_A,GP_KPI_Raise.cDoplata)
         {  isFind:=true;
            break;
         }
      }
      if not IsFind
      { result:=false;
        exit;
      }
    }
    if IsBitCTW(wFilter,7)
    { if FLag<>'ЗП'
      { result:=false;
        exit;
      }
    }

  }//function isFilterAnCorrect(ww_nrec:comp): boolean;

    //-------------------------------------------
  // скопировать фильтры в данные для отборв
  //-------------------------------------------
  Procedure CopyToA;
  { CopyMarker(Marker_TypeDocs_A ,Marker_TypeDocs);
    CopyMarker(Marker_CatRaise_A ,Marker_CatRaise);
    CopyMarker(Marker_Katpodr_A  ,Marker_Katpodr);
    CopyMarker(Marker_Status_A   ,Marker_Status);
    wZP_FLT_A:=wZP_FLT;
  } //Procedure CopyToA;

  //-------------------------------------------
  // восстановить данные для задания фильтрации
  // из данных для отбора
  //-------------------------------------------
  Procedure RestFromA;
  { CopyMarker(Marker_TypeDocs ,Marker_TypeDocs_A );
    CopyMarker(Marker_CatRaise ,Marker_CatRaise_A);
    CopyMarker(Marker_Katpodr  ,Marker_Katpodr_A);
    CopyMarker(Marker_Status   ,Marker_Status_A);
    wZP_FLT:=wZP_FLT_A;
  } //Procedure RestFromA;

  //-------------------------------------------
  #doc
    Установить ограничения
  #end
  Function SetFilterBounds(_IsArch:word) : boolean;
  { #__UNUSED__(_IsArch)
    Result:=false;
    isFilterRun:=True;
    if ConditionActiveInLeave(tcFilterAn, #GP_KPI_Doc)
    { PopConditionForLeave(tcFilterAn, #GP_KPI_Doc);
    }
    If BoundActive(tbByYear    ) SubBounds(tbByYear    );
    If BoundActive(tbByMonth   ) SubBounds(tbByMonth   );
    If BoundActive(tbByTypeDocs) SubBounds(tbByTypeDocs);
    If BoundActive(tbByStatus  ) SubBounds(tbByStatus  );
    If BoundActive(tbByKatpodr ) SubBounds(tbByKatPodr );
    //-----------------------
    CopyToA;
    //-----------------------
    ClearFuncCache; // очистим кэш функций
    var need_FilterAn:boolean=false;
    if IsBitCTW(wFilter,1)
    {  AddBounds(tbByYear);
    }
    if IsBitCTW(wFilter,2)
    {  if wMonth_b_flt>wMonth_e_flt wMonth_b_flt:=wMonth_e_flt;
       AddBounds(tbByMonth);
    }
    if IsBitCTW(wFilter,3)
    {  Count_TypeDocs:=GetMarkerCount(Marker_TypeDocs);
       GetMarker(Marker_TypeDocs,0,wc_Nrec);
       if GetFirst Gp_TypeDocs where (( wc_Nrec == Gp_TypeDocs.Nrec ))=tsok
       { wType_flt:=Gp_TypeDocs.wType;

       }
       if Count_TypeDocs=1
       { AddBounds(tbByTypeDocs);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,4)
    {  Count_Status:=GetMarkerCount(Marker_Status);
       GetMarker(Marker_Status,0,pStatus_flt);
       if Count_Status=1
       {
         AddBounds(tbByStatus);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,5)
    {  Count_Katpodr:=GetMarkerCount(Marker_Katpodr);
       GetMarker(Marker_Katpodr,0,pKatpodr_Flt);
       if Count_Katpodr=1
       {
         AddBounds(tbByKatpodr);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,6)
    {  Count_CatRaise:=GetMarkerCount(Marker_CatRaise);
       need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,7) need_FilterAn:=true;
    if isPodrShare         need_FilterAn:=true;
    ClearFuncCache;
    // использование сложного фильтра
    if need_FilterAn
    { PushConditionForLeave(tcFilterAn, #GP_KPI_Doc);
    }
    ReReadRecord(#GP_KPI_DOC);
    Result:=true;
    isFilterRun:=False;

  } //Function SetFilterBounds : boolean;

  //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_TypeDocs
    { #mrkfiltr_(TypeDocs_Flt,TypeDocs,Nrec,wc_nrec,TypeDocs_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_CatRaise
    { #mrkfiltr_(CatRaise_Flt,CatRaise,Nrec,wc_nrec,CatRaise_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_KatPodr
    { #mrkfiltr_(KatPodr_Flt,KatPodr,Nrec,wc_nrec,KatPodr_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_Status
    { #mrkfiltr_(Status_Flt,Status,Nrec,wc_nrec,Status_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_KatPodrIns
    { #mrkfiltr_(KatPodr_Flt,KatPodrIns,Nrec,wc_nrec,KatPodr_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_KPI_RAISE
    { #mrkfiltr_(KPI_RAISE_Flt,KPI_RAISE,Nrec,wc_nrec,KPI_RAISE_Flt.Name)
    }
    ReScanPanel(#TypeDocs_Flt);
  } //Procedure SetFilterNM(_Field:longint)



//******************************************************************************
// Функции
//******************************************************************************

//===============================================
// Получить получить значение полей
//===============================================
Function GetFieldVal(wTp:word; wwNum:word) : Variant;
{ Result:='';
  case wTp of
  03,04:
  { Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetFieldVal(wTp,wwNum);

  }
  end;

} //Function GetFieldVal(wTp:word; wwNum:word) : Variant;

Function GetFieldValS(wTp:word; wwNum:word) : String;
{ Result:=String(GetFieldVal(wTp,wwNum),0,if(wTp<3,2,0));
}//Function GetFieldValS(wTp:word; wwNum:word) : String;


//===============================================
// Установить значение полей
//===============================================
Function SetFieldVal(wTp:word; wwNum:word; _Value: Variant;_ClearManual:boolean=false):boolean ;
{
  case wTp of
  03:
  { Result:=iGP_KPI_Doc_RaiseEdit_Sp.SetFieldVal(3,wwNum,_Value,_ClearManual);

  }
  end;
  Result:=true;
}//Function SetFieldVal(wTp:word; wwNum:word;Value : Variant)boolean;

//-------------------------------------
#doc
 Установить режим обновления спецификации
#end
Procedure SetUpdateMode(_Immediately_SP:boolean);
{ boImmediately_SP:=_Immediately_SP;
  iGP_KPI_Doc_RaiseEdit_Sp.SetUpdateMode(_Immediately_SP);
}
//-------------------------------------
#doc
 Сохранить спецификация
#end
Function Update_SP:longint;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.Update_SP;
}

//-------------------------------------
#doc
 Установить позицию
#end
Function SetDocPosition(_wTypeDoc:word;_cDoc:comp;_cDocSp:comp):boolean;
{ Result:=false;
  if wTypeDoc<>_wTypeDoc and _wTypeDoc<>100 and _wTypeDoc<>0
    set wTypeDoc:=_wTypeDoc;
  timelog('GP_KPI_Doc_RaiseEdit->SetDocPosition:'+string(_wTypeDoc)+','
         +string(_cDoc,0,0)+','+string(_cDocSp,0,0));
  if pGP_KPI_DOC<>_cDoc
  { set pGP_KPI_DOC:=_CDoc;
    if getfirst GP_KPI_DOC where (( pGP_KPI_DOC == GP_KPI_DOC.Nrec )) <>tsok
    { pGP_KPI_DOC:=0;
      Exit;
    }
    if boWinEdit=false
    {
      iGP_KPI_Doc_RaiseEdit_Sp.InitParam(wIntMode
           ,GP_KPI_Doc.Nrec
           ,0,if(_wTypeDoc=100,11,0),true);
    }
  }

  if pGP_KPI_DOC_SP<>_cDocSp
  { set pGP_KPI_DOC_SP:=_cDocSp;
    if _wTypeDoc=100
    { if getfirst tmp_kpi_Doc_Val where (( pGP_KPI_DOC_SP == tmp_kpi_Doc_Val.Nrec )) <>tsok
      { pGP_KPI_DOC_SP:=0;
        Exit;
      }
    }
    else
    { if getfirst GP_KPI_DOC_SP where (( pGP_KPI_DOC_SP == GP_KPI_DOC_SP.Nrec )) <>tsok
      { pGP_KPI_DOC_SP:=0;
        Exit;
      }
    }
    timelog('GP_KPI_Doc_RaiseEdit->SetDocPosition:спец.');
    iGP_KPI_Doc_RaiseEdit_Sp.InitParam(wIntMode
           ,GP_KPI_Doc.Nrec
           ,pGP_KPI_DOC_SP,if(_wTypeDoc=100,11,0),true);
  }
  Result:=true;
}//Function SetDocPosition(_wTypeDoc:word;_cDoc:comp;_cDocSp:comp):boolean;

//-------------------------------------------------
// Получить первую позицию спецификации
//-------------------------------------------------
Function GetFirstSP:boolean;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetFirstSP;

}//Function GetFirstSP:boolean;

//-------------------------------------------------
// Получить следующую позицию спецификации
//-------------------------------------------------
Function GetNextSP:boolean;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetNextSP;

}//Function GetNextSP:boolean;

//-------------------------------------------------
// Установить раздел
//-------------------------------------------------
Function SetRazdel(nRazdel:word): boolean;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.SetRazdel(nRazdel);

}//Function SetRazdel(nRazdel:word): boolean;

//-------------------------------------------------
#doc
 Получить раздел
#end
Function GetRazdel: word;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetRazdel;
}//Function SetRazdel(nRazdel:word): boolean;

//-------------------------------------------------
//получить наименование раздела
//-------------------------------------------------
Function GetRazdelName:string;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetRazdelName;

} //Function GetRazdelName:string;

//-------------------------------------------------
//Получить наименование поля
//-------------------------------------------------
Function GetFieldTitle(wNpp:word):string;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetFieldTitle(wNpp);

}//Function GetFieldTitle(wNpp:word):string;

//-------------------------------------------------
//Получить наименование поля
//-------------------------------------------------
Function GetFieldParam(wNpp:word;_Param:word):word;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetFieldParam(wNpp,_Param);

}//Function GetFieldTitle(wNpp:word):string;

//-------------------------------------------------
// Получить наименование строки
//-------------------------------------------------
Function GetNameSP:string;
{ Result:=iGP_KPI_Doc_RaiseEdit_Sp.GetNameSP;

}//Function GetNameSP:string;

//------------------------------------------
// Создание документов - вставка в GP_KPI_DOC
//------------------------------------------
Function InsDocument(boRezerv:boolean=false):boolean;
{  Result:=false;
   var _PDoc:comp=0;
   count_oper++;
   if boRezerv //только для текущего документа
   { _PDoc:=GP_KPI_DOC.Nrec
   }
   else
   { if Getfirst GP_KPI_DOC where ((
         pIns_Podr    == GP_KPI_DOC.cKatpodr
     and wTypeDoc     == GP_KPI_DOC.wType
     and wYear_Flt    == GP_KPI_DOC.wYear
     and wMonth_b_flt == GP_KPI_DOC.wMonth
     //and pIns_Status  == GP_KPI_DOC.cStatus(noindex) - надо искать первую
        ))<>tsok
      { ClearBuffer(#GP_KPI_DOC);
        GP_KPI_DOC.wType   :=wTypeDoc;
        GP_KPI_DOC.cKatpodr:=pIns_Podr;
        GP_KPI_DOC.wMonth  :=wMonth_b_flt;
        GP_KPI_DOC.wYear   :=wYear_Flt;
        GP_KPI_DOC.wKvartal     :=wKvartal_Ins;
        GP_KPI_DOC.WYEARKVARTAL :=wYear_Ins;
        GP_KPI_DOC.WYEARPREM    :=wYearY_Ins;
        GP_KPI_DOC.DocCreate:=_CurDateTime;
        GP_KPI_DOC.cCreator :=UserId;
        GP_KPI_DOC.cStatus  :=Status.GetDefault;
        GP_KPI_DOC.DocNumber:=GetNextDocNumber(wYear_Flt);
        GP_KPI_DOC.DocDate  :=Cur_Date;
        insert current GP_KPI_DOC;

        _PDoc:=GP_KPI_DOC.Nrec;
        displ('Для подразделения '+KatPodr_Flt.Kod+','+KatPodr_Flt.Name+ ' создали ведомость '+GP_KPI_DOC.DocNumber);
      }
      else
      { if GP_KPI_DOC.cStatus<>Status.GetDefault
        { displ('Для подразделения '+KatPodr_Flt.Kod+','+KatPodr_Flt.Name+
            chr(13)+ ' уже есть ведомость '+GP_KPI_DOC.DocNumber+' в не оформляемом статусе');
          exit;
        }
        else
        { displ('Для подразделения '+KatPodr_Flt.Kod+','+KatPodr_Flt.Name+ ' обновляем ведомость '+GP_KPI_DOC.DocNumber);
        }
        _PDoc:=GP_KPI_DOC.Nrec;
      }
    } //else if boRezerv //только для текущего документа
    // мы уже тут
    if True //getfirst GP_KPI_DOC where ((     _PDoc==GP_KPI_DOC.Nrec ))=tsok
    {
      if not FoundMarker(Marker_tmp,_PDoc)
      { InsertMarker(Marker_tmp,_PDoc);
        if NPOEM_OWN_Raise_FORM_DEL_waste
        { _Loop fullcache GP_KPI_DOC_SP
          { if boRezerv
            { if GP_KPI_DOC_SP.cGP_KPI_RAISE<>0
              { count_oper++;
                continue;
              }
            }
            else
            { if GP_KPI_DOC_SP.cGP_KPI_RAISE=0
              { count_oper++;
                continue;
              }
            }
            InsertMarker(Marker_Spec,GP_KPI_Doc_SP.Nrec);
          } //_Loop fullcache GP_KPI_DOC_SP
          Timelog(' InsDocument Marker_Spec = '+GetMarkerCount(Marker_Spec));
        } //if NPOEM_OWN_Raise_FORM_DEL_waste
      } //if not FoundMarker(Marker_tmp,_PDoc)
    } //getfirst GP_KPI_DOC where ((     _PDoc==GP_KPI_DOC.Nrec ))=tsok

    boIns_Doc:=true;
    Result:=true;
}//Procedure InsDocument;

//------------------------------------------
// Создание документов
//------------------------------------------
Function InsPrem(_wTable:word;
     _pLschet:comp;
     _cPodr:comp;
     _pPersons:comp;
     var _Reason:string;
     boRezerv:boolean=false
     ):boolean;
var _pKPI_Raise:comp;
    isExistRaise:boolean;
    _ProcPrem:double;
    _SummaPrem:double;
{ #__UNUSED__(_wTable)
  _pKPI_Raise:=0;
  timelog('GP_KPI_Doc_RaiseEdit->InsPrem _pLschet='+string(_pLschet,0,0));
  set pLschet :=_plschet;
  Result:=false;
  _Reason:='';
  if Getfirst Lschet_F<>tsok then
  { set pPersons:=_pPersons;
    if getfirst Persons_F<>tsok {}
    insert into tmp_err
     set tmp_err.name:=Persons_F.Fio
        ,tmp_err.Prim:='Не найден лицевой счет';
    exit;
  }
  timelog('GP_KPI_Doc_RaiseEdit->InsPrem 001 '+Lschet.StrTabn);
  if wTypeDoc=102 or wTypeDoc=103
  { _pKPI_Raise:=vRaise_102.pDoplata;
  }
  else
  { /* Не проверяем
    if UP_STAFF_CATALOGS_SeniorExecutive<>0
    { if GP_KPI_DOC.wType=103
        if vApp.Appointments.cRef3<>UP_STAFF_CATALOGS_SeniorExecutive exit;
      if GP_KPI_DOC.wType=102
        if vApp.Appointments.cRef3=UP_STAFF_CATALOGS_SeniorExecutive exit;
    }
    */
    vRaise.pAppoint:=vApp.Appointments.Nrec;
    _pKPI_Raise:=vRaise.pDoplata;
    //----- в базовом объекте
    _SummaPrem:=0;
    _ProcPrem:=CheckExistRaise(_SummaPrem,_Reason);
    isExistRaise:=(_ProcPrem<>0 or _SummaPrem>0);
    //премия есть в доплатах по штатке, но с 0 процентом
    if _ProcPrem=-999 _ProcPrem:=0;
    timelog('GP_KPI_Doc_RaiseEdit->InsPrem '+GetStrTabn(Lschet_F.Tabn,Lschet_F.StrTabn));
    //------------------------------
    if wTypeDoc<>104
    { if not isExistRaise then exit;
    }
  }
  if not boIns_Doc
  { boIns_Doc:=InsDocument(boRezerv);
    if not boIns_Doc
    {   insert into tmp_err
        set tmp_err.name:=' ошибка создания ведомости'
          ,tmp_err.Prim:='';
      exit;
    }
  }
  timelog('GP_KPI_Doc_RaiseEdit->InsPrem 002');
  if GP_KPI_Doc.wType<>101
  { timelog(' FIO='+vRaise_102.Persons.Fio+','+DateToStr(vRaise_102.Appointments.AppointDate,'DD/MM/YYYY'));
  }
  Result:=true;
  count_oper++;
  var _cPost :comp;
  if wTypeDoc=102 or wTypeDoc=103
  { _cPost:=vRaise_102.Appointments.Post;
  }
  else
  { _cPost:=vApp.Appointments.Post
  }
  var isNeedIns:boolean=false;
  if boRezerv
    _pKPI_Raise:=0;
  if getfirst GP_KPI_Doc_SP where
      (( GP_KPI_DOC.Nrec == GP_KPI_Doc_SP.cGP_KPI_DOC
      and pLschet         ==      GP_KPI_Doc_SP.cLschet(noindex)
      and _pKPI_Raise     == GP_KPI_Doc_SP.cGP_KPI_RAISE
      and ( ( GP_KPI_DOC.wType=101
          and _cPost = GP_KPI_Doc_SP.cPost
            )
         or ( _cPodr = GP_KPI_Doc_SP.cKatPodr
            and GP_KPI_DOC.wType<>101
            )
          )
      )) <> tsok
  { Clearbuffer(#GP_KPI_Doc_SP);
    isNeedIns:=True;
  }
  do {
    var _wdt:date=ZeroDate;
    // НУЖНО ПОЛЕ !!!
    _wdt:=StrToDate(GP_KPI_Doc_SP.FARRVALUE[20],'YYYYMMDD');
    if _wdt<>ZeroDate and (not isNeedIns)
    { if _wdt>vApp.Appointments.AppointDate
        break;
    }
    GP_KPI_Doc_SP.wType      :=GP_KPI_DOC.wType;
    GP_KPI_Doc_SP.cGP_KPI_Doc:=GP_KPI_DOC.Nrec ;
    GP_KPI_Doc_SP.cLschet:=pLschet;
    GP_KPI_Doc_SP.cPersons:=Lschet_F.tPerson;
    GP_KPI_Doc_SP.Tabn    :=Lschet_F.Tabn;
    GP_KPI_Doc_SP.StrTabn :=Lschet_F.StrTabn;
    GP_KPI_Doc_SP.FARRVALUE[20]:=datetostr(vApp.Appointments.AppointDate,'YYYYMMDD');
    set pPersons:=Lschet_F.tPerson;
    if getfirst Persons_F=tsok
    { GP_KPI_Doc_SP.Fio     :=Persons_F.Fio;
    }
    GP_KPI_Doc_SP.cGP_KPI_RAISE:=_pKPI_Raise;
    GP_KPI_Doc_SP.cKatpodr:=_cPodr;
    if wTypeDoc=102 or wTypeDoc=103
    { GP_KPI_Doc_SP.cAppointments:=vRaise_102.Appointments.Nrec;
      GP_KPI_Doc_SP.cPost        :=vRaise_102.Appointments.Post;
      GP_KPI_Doc_SP.cKlKatego    :=vRaise_102.Appointments.EmpCategory;// KlKatego_Ls.Nrec;
      if GP_KPI_Doc_SP.cKlKatego=0
      { if vRaise_102.Getfirst StaffStruct=tsok
          GP_KPI_Doc_SP.cKlKatego:=vRaise_102.StaffStruct.EmpCategory;// KlKatego_Ls.Nrec;
      }
    }
    else
    { GP_KPI_Doc_SP.cAppointments:=vApp.Appointments.Nrec;
      GP_KPI_Doc_SP.cPost    :=vApp.Appointments.Post;
      GP_KPI_Doc_SP.cKlKatego:=vApp.Appointments.EmpCategory;// KlKatego_Ls.Nrec;
      if GP_KPI_Doc_SP.cKlKatego=0
      { if vApp.Getfirst StaffStruct=tsok
          GP_KPI_Doc_SP.cKlKatego:=vApp.StaffStruct.EmpCategory;// KlKatego_Ls.Nrec;
      }
    }
    if isNeedIns
    {  Insert current GP_KPI_Doc_SP;
    }
    else
    { update current GP_KPI_Doc_SP;
      if FoundMarker(Marker_Spec,GP_KPI_Doc_SP.Nrec)
        DeleteMarker(Marker_Spec,GP_KPI_Doc_SP.Nrec);
    }
  } while False;
  Result:=true;
} //Procedure InsPrem(_pLschet:comp);

Function InsertDoc(boRezerv:boolean=false) :boolean;
var ii,jj,ll:longint;
    _DTB, _DTE:date;
    _PDoc:comp;
    _cPodr:comp;
    //_Status:comp;
    _pPodrMain:comp;
    isAllOk  :boolean;
    //_Count:longint;
    boRaise:boolean;
    _Reason:string;
{ _PDoc:=0;
  count_oper:=0;
  Timelog('GP_KPI_Doc_RaiseEdit->InsertDoc год='+string(wYear_Flt)+', мес='+string(wmonth_b_flt));
  Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
  Marker_Spec :=InitMarker('', 8, 50, 10, True);
  ClearMarker(Marker_Tmp);
  ClearMarker(Marker_Spec);
  Filltmp_Staff_Raise;
  Timelog('GP_KPI_Doc_Base->Status_Init(wTypeDoc)');
  Status_Init(wTypeDoc);
  delete all tmp_err;
  //При переформировании ведомостей 101-103 убирать "лишних" сотрудников
  NPOEM_OWN_Raise_FORM_DEL_waste:=false;
  if ExistTune('NPOEM_OWN.Raise.FORM_DEL_WASTE')
    NPOEM_OWN_Raise_FORM_DEL_waste:=boGetTune('NPOEM_OWN.Raise.FORM_DEL_WASTE');

  //---------------------------------------
  var _dt_close:date;
  _dt_close:=date(1,wMonth_b_Flt,wYear_Flt);
  //---------------------------------------
  _DTB:=date(1,wmonth_b_flt,wYear_Flt);
  _DTE:=date(Last_day(_DTB),wmonth_b_flt,wYear_Flt);
  //---------------------------------------
  Timelog('GP_KPI_Doc_Base->_DTB = ' + _DTB + '  _DTE = ' + _DTE);
  pIns_Status:=Status.GetDefault;
  isAllOk:=true;
  //displ иначе не работает
  Init_Zar;
  Timelog('GP_KPI_Doc_Base->Init_Zar');
  //	Премии по высшему и среднему звену
  //	Необходимо формировать 1 документ по всему предприятию.
  //  А не разбивать по подразделениям, в качестве подразделения можно указать
  //  собственную организацию или верхний уровень штатного расписания
  _pPodrMain:=0;
  IF wTypeDoc=102 or wTypeDoc=103
  {
    Timelog('GP_KPI_Doc_Base->IF wTypeDoc=102 or wTypeDoc=103');
    _pPodrMain:=0;
    if ExistTune('NPOEM_OWN.CAT_DEP_DEFAULT')
      _pPodrMain:=coGetTune('NPOEM_OWN.CAT_DEP_DEFAULT');
    if _pPodrMain=0
    {
      _pPodrMain:=iCatFunc.GetCatalogsNrec(-11);
      if getfirst catRaise_flt where (( _pPodrMain == catRaise_Flt.cParent
       and 'НПО "Энергомаш"' == catRaise_flt.Name
        )) = tsok
         _pPodrMain:=catRaise_flt.Nrec;
      else
      if getfirst catRaise_flt where (( _pPodrMain == catRaise_Flt.cParent
       and 'Энергомаш' == catRaise_flt.Name
        )) = tsok
         _pPodrMain:=catRaise_flt.Nrec;
    }
    StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm,
          'Создание ведомостей на премирование', GetMarkerCount(Marker_KPI_RAiSE));
    pIns_Podr:=GetKatPodrByCatalogs(_pPodrMain);
    boIns_Doc:=false;

    For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
    {
      Timelog('GP_KPI_Doc_Base->For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++) jj=' + jj);
      if not nextvisual
      { isAllOk:=false;
        break
      }
      if not GetMarker(Marker_KPI_RAISE, jj,vRaise_102.pDoplata) continue;
      Timelog('GP_KPI_Doc_Base->if not GetMarker(Marker_KPI_RAISE, jj,vRaise_102.pDoplata) continue;');

      set vRaise_102.pDoplata:=vRaise_102.pDoplata;
      timelog(' доплата '+string(vRaise_102.pDoplata,0,0));
      if vRaise_102.getfirst GP_KPI_RAISe<>tsok then continue;
      Timelog('GP_KPI_Doc_Base->if vRaise_102.getfirst GP_KPI_RAISe<>tsok then continue;');
      // проверим по дате закрытия
      if vRaise_102.GP_KPI_RAISe.DEND<>ZeroDate
        if vRaise_102.GP_KPI_RAISe.DEND<_dt_close then continue;
      if boRezerv
      {
        Timelog('GP_KPI_Doc_Base->if boRezerv');
        if wYear_Flt=0 wYear_Flt:=GP_KPI_DOC.WYEAR;
        if wMonth_b_flt=0
        { wMonth_b_flt:=GP_KPI_DOC.WMonth;
          wMonth_e_flt:=GP_KPI_DOC.WMonth;
        }
        case vRaise_102.GP_KPI_RAISE.TYPEPERIOD of
        2:
        { wKvartal_Ins:=GP_KPI_Doc.HARRCOMP[1];
          wYear_Ins   :=GP_KPI_Doc.HARRCOMP[2];
        }
        3:
        { wYearY_Ins:=GP_KPI_Doc.HARRCOMP[3];
        }
        end;
      }
      GetPeriodPrem(vRAISe_102.GP_KPI_Raise.TypePeriod, vRaise_102.DTBeg,vRaise_102.DTEND
        ,wMonth_b_flt ,wYear_Flt  ,wKvartal_Ins ,wYear_Ins,wYearY_Ins);
      timelog(' период '+DateToStr(vRaise_102.DTBEG,'DD.MM.YYYY')+' от '+DateToStr(vRaise_102.DTEND,'DD.MM.YYYY'));
      vRaise.DTBeg:=vRAISe_102.DTBEG;
      vRaise.DTend:=vRAISe_102.DtEnd;
      vRaise_102._Loop GP_KPI_Pers_Raise
      { if vRaise_102.getfirst Appointments<>tsok
        { if vRaise_102.Getfirst Persons <>tsok continue;
          displ('Для премии для "'+vRaise_102.Persons.Fio+'" от '+DateToStr(vRaise_102.GP_KPI_Pers_Raise.FROMDATE,'DD.MM.YYYY')
              +' не нашлось назначение');
          continue;
        }
        if vRaise_102.Appointments.lPrizn=2 //Заместительства
        { if Check_NoZarSignal(vRaise_102.Appointments.cCont) then continue;
        }
        if vRaise_102.getfirst Persons=tsok {}
        timelog('  '+vRaise_102.Persons.Fio);
        _cPodr:=GetKatPodrByCatalogs(vRaise_102.Appointments.Department);
        InsPrem(coAppointments,vRaise_102.Appointments.cAddNrec2,_cPodr,vRaise_102.Appointments.Person,_Reason,boRezerv);
      }
    } //For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
    StopVisual('',0);
  } //else IF wTypeDoc=102 or wTypeDoc=103
  else
  { StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm,
         'Создание ведомостей на премирование', GetMarkerCount(Marker_KatpodrIns)*3);
      //-------------------
      // Будем считать что только месячная
      //-------------------
      if not GetMarker(Marker_KPI_RAISE, 0,vRaise.pDoplata) {}
      if vRaise.getfirst GP_KPI_RAISe<>tsok then {};
      GetPeriodPrem(vRAISe.GP_KPI_Raise.TypePeriod, vApp.DTBEG,vApp.DtEnd
              ,wMonth_b_flt ,wYear_Flt  ,wKvartal_Ins ,wYear_Ins,wYearY_Ins);

      vRaise.DTBeg:=vApp.DTBEG;
      vRaise.DTend:=vApp.DtEnd;
      timelog(' период '+DateToStr(vApp.DTBEG,'DD.MM.YYYY')+' от '+DateToStr(vApp.DTEND,'DD.MM.YYYY'));
      vRaise.DTBeg:=vApp.DTBEG;
      vRaise.DTend:=vApp.DtEnd;

    For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
    { if Not NextVisual then
      { isAllOk:=false;
        break;
      }
      if not GetMarker(Marker_KatpodrIns,ii,wc_Nrec) continue;
      _cPodr:=wc_Nrec;
      boIns_Doc:=false;
      //	Премии по высшему и среднему звену
      //	Необходимо формировать 1 документ по всему предприятию.
      //  А не разбивать по подразделениям, в качестве подразделения можно указать
      //  собственную организацию или верхний уровень штатного расписания
      pIns_Podr:=GetKatPodrUp(wc_nrec);
      // также здесь нужно учесть переходы
      // потом переделать на DSQL
      /*
      _Loop Lschet where (( wc_nrec == Lschet.Cex  ))
      { if Lschet.DatPos>_DTE then continue;
        // вот насчет увольнения это вопрос
      if Lschet.DatUv<>ZeroDate
        if Lschet.DatUV<_DTB then continue;
      InsPrem(coLschet,Lschet.Nrec);
    } //_Loop Lschet where (( wc_nrec == Lschet.Cex  ))
    */

      vApp.pPodr:=_cPodr;
      For(ll:=1;ll<=2;ll++)
      { if Not NextVisual then
        { isAllOk:=false;
          break;
        }
        //-----------------------------
        //меняем ограничения, чтобы подтянуть переподчинение премии на подразделение ЗГД
        SwitchAppScan(ll=1);
        //-----------------------------
            timelog('     ll = ' + ll);
            timelog('    GetMarkerCount(Marker_KPI_RAiSE) = '+GetMarkerCount(Marker_KPI_RAiSE));
            timelog('    vApp.pPodr = '+vApp.pPodr);
            timelog('    vApp.DTBEG  = '+vApp.DTBEG+'; vApp.DTEND = ' + vApp.DTEND);
          vApp._Loop ExtCatLinks
          { Timelog('GP_KPI_Doc_RaiseEdit->InsertDoc 2 '+Katpodr_Flt.Name);
            if ll=1
            { vApp._Loop FullCache Appointments
              { //if vApp.GetFirst Appointments_Next<>tsok
                 timelog('     vApp._Loop FullCache Appointments NREC = ' + vApp.Appointments.NREC);
                 if vApp.Getfirst tmp_Staff_Raise=tsok then
                  {
                    timelog('if vApp.Getfirst tmp_Staff_Raise=tsok THEN continue');
                    continue;
                  }
                 if vApp.Appointments.lPrizn=2 //Заместительства
                 { if Check_NoZarSignal(vApp.Appointments.cCont) then
                    {
                     timelog('if Check_NoZarSignal(vApp.Appointments.cCont) then continue');
                      continue;
                    }
                 }
                 boRaise:=false;
                 _Reason:='';
                 For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
                 { if not GetMarker(Marker_KPI_RAISE, jj,vRaise.pDoplata) continue;
                   timelog(' доплата '+string(vRaise.pDoplata,0,0));
                   if vRaise.getfirst GP_KPI_RAISe<>tsok then continue;
                   timelog(' доплата '+vRaise.GP_KPI_Raise.Name);
                   if InsPrem(coAppointments,vApp.Appointments.cAddNrec2,_cPodr,vApp.Appointments.Person,_Reason,boRezerv)
                     boRaise:=true;
                 } //For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
                 if not boRaise
                 {  set pPersons:=vApp.Appointments.Person;
                    if getfirst Persons_F<>tsok {}
                     insert into tmp_err
                      set tmp_err.name:=Persons_F.Fio
                     ,tmp_err.Prim:=_Reason;
                 }
              } //vApp._Loop FullCache Appointments
            } ////if ll=1
            else
            { timelog('GP_KPI_RAISE_EDIT->InsertDoc шаг 2');
              vApp._Loop FullCache tmp_Staff_Raise
              { timelog('GP_KPI_RAISE_EDIT->InsertDoc tmp_Staff_Raise.Department='
                  +string(vApp.tmp_Staff_Raise.Department,0,0)+',StaffStr='+string(vApp.StaffStr,0,0));
                vApp._Loop FullCache Appointments
                { //if vApp.GetFirst Appointments_Next<>tsok
                 timelog('     vApp._Loop FullCache Appointments NREC = ' + vApp.Appointments.NREC);
                  if vApp.Appointments.lPrizn=2 //Заместительства
                  { if Check_NoZarSignal(vApp.Appointments.cCont) then
                     {
                       timelog('Check_NoZarSignal(vApp.Appointments.cCont) then');
                       continue;
                     }
                  }
                  _cPodr:=GetKatPodrByCatalogs(vApp.Appointments.Department);
                  boRaise:=false;
                  _Reason:='';
                  For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
                  { if not GetMarker(Marker_KPI_RAISE, jj,vRaise.pDoplata) continue;
                    timelog(' доплата '+string(vRaise.pDoplata,0,0)
                       +', Department='+string(vApp.Appointments.Department,0,0)
                       +', _cPodr='+string(_cPodr,0,0)
                       +', StrTabn='+vApp.Appointments.StrTabn
                                     );
                    if vRaise.getfirst GP_KPI_RAISe<>tsok then continue;
                    if InsPrem(coAppointments,vApp.Appointments.cAddNrec2,_cPodr,vApp.Appointments.Person,_Reason,boRezerv)
                      boRaise:=true;
                  } //For(jj:=0;jj<GetMarkerCount(Marker_KPI_RAiSE);jj++)
                  if not boRaise
                  { set pPersons:=vApp.Appointments.Person;
                    if getfirst Persons_F<>tsok {}
                     insert into tmp_err
                      set tmp_err.name:=Persons_F.Fio
                     ,tmp_err.Prim:=_Reason;
                  }
                } //vApp._Loop FullCache Appointments
              } //vApp._Loop FullCache tmp_Staff_Raise
            }  //else if ll=1
          } //vApp._Loop ExtCatLinks
      } //For(ll:=1;ll<=2;ll++)
      if not isAllOk break;
    } //For(ii:=0; ii<GetMarkerCount(Marker_KatpodrIns);ii++)
    StopVisual('',0);
  } //IF wTypeDoc=102 or wTypeDoc=103
  //------- сразу запустим расчет без параметров, нужно например сформировать список фондов
  if NPOEM_OWN_Raise_FORM_DEL_waste
  if wTypeDoc=101 or wTypeDoc=102 or wTypeDoc=103
  { For(jj:=0;jj<GetMarkerCount(Marker_SPEC);jj++)
    { if not GetMarker(Marker_SPEC, jj,wc_nrec) continue;
      Timelog(' InsertDoc удаляем GP_KPI_DOC_SP.nrec = '+string(GP_KPI_DOC_SP.nrec,0,0));

      if getfirst GP_KPI_DOC_SP where (( wc_nrec == GP_KPI_DOC_SP.Nrec ))=tsok
      {
        insert into tmp_err
          set tmp_err.name:=GP_KPI_DOC_SP.FIO
           ,tmp_err.Prim:=' удалили из ведомости, так у него изменились данные';

        TimeLog('Нужно удалить '+GP_KPI_DOC_SP.FIO);
        delete current GP_KPI_DOC_SP
      }
    } //For(jj:=0;jj<GetMarkerCount(Marker_SPEC);jj++)
  } //if wTypeDoc=101 or wTypeDoc=102 or wTypeDoc=103
  if RecordsInTable(#tmp_err)>0
  { displ('Обнаружены следующие ошибки при формировании');
    _loop tmp_err
    { displ(tmp_err.name+':'+tmp_err.prim)
    }
  }
  if isAllOk
    if getMarkerCount(Marker_tmp)>0
      CalculateDoc(true,false,boRezerv);
  DoneMarker(Marker_tmp,'');
  DoneMarker(Marker_Spec,'');
  count_oper:=0;

  //----------------------
  // ЗАПУСТИМ С ДОБАВКОЙ
  PositionChanged(32768);
  ShowErrors;
  ReReadRecord(#GP_KPI_DOCSUMFOND);
  ReReadRecord(#GP_KPI_DOC);
  ReScanPanel(#GP_KPI_DOC);
  ReScanPanel(#GP_KPI_DOCSUMFOND);
  Result:=True;
  Timelog('GP_KPI_Doc_RaiseEdit->InsertDoc Finish');

} //Function InsertDoc :boolean;


//===============================================
// рассчитать резерв
//===============================================
Function CalcRezerv:boolean;
{ Result:=false;
  UpdateTable;
  Timelog('GP_KPI_Doc_RaiseEdit->CalcRezerv Start');
  if GP_KPI_Doc.HARRCOMP[4]=0
  { message('Не задан ни один из периодов расчета резерва');
    exit;
  }
  ClearMarker(Marker_KPI_RAiSE);
  if (GP_KPI_Doc.HARRCOMP[4] and 1)>0
  { if GP_KPI_Doc.HARRCOMP[1]=0 or GP_KPI_Doc.HARRCOMP[2]=0
    { message('Не задан период для расчета резерва квартальной премии');
      exit;
    }
    if GP_KPI_Doc.HARRCOMP[5]=0
    { message('Не указана квартальная премия для начисления резерва');
      exit;
    }
    InsertMarker(Marker_KPI_RAiSE,GP_KPI_Doc.HARRCOMP[5])
  }
  if (GP_KPI_Doc.HARRCOMP[4] and 2)>0
  { if GP_KPI_Doc.HARRCOMP[3]=0
    { message('Не задан период для расчета резерва годовой премии');
      exit;
    }
    if GP_KPI_Doc.HARRCOMP[6]=0
    { message('Не указана годовая премия для начисления резерва');
      exit;
    }
    InsertMarker(Marker_KPI_RAiSE,GP_KPI_Doc.HARRCOMP[6]);
  }
  InsertDoc(true);
  Result:=true;
  Timelog('GP_KPI_Doc_RaiseEdit->CalcRezerv Finish');
} //Function CalcRezerv:boolean;


//===============================================
// сформировать ведомость в зарплату
//===============================================
Procedure Make_Zar_Ved;
{
  if GP_KPI_DOC.wMonth<>MonthRas
  or GP_KPI_DOC.wYear <>YearRas
  { Message('Месяц и год документа не совпадает'
    +chr(13)+'с расчетным периодом в ЗП '+string(MonthRas)+'/'+string(YearRas) );
    exit;
  }
  if Gp_Status.name<>'утвержден'
  { Message('Документ должен быть в статусе "утвержден"');
    exit;
  }
  iGP_KPI_Doc_RaiseEdit_Sp.Make_Zar_Ved;
} //Procedure Make_Zar_Ved;

//-------------------------------------------------
#doc
 заполнить таблицу для печати tmp_print_fond
#end
Procedure Fill_Tmp_Print_Fond;
var
  _Econom : double; //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
  _SuProc : double; //% на поощрение
  _SuUse  : double; //Использование экономии по фондам, руб.
  _SuRas  : double; //Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
  _SuZGD  : double; //Выделено из фонда руководителя функционального направления, руб.
  _SuDop  : double; //Доп.фонд по инициативным заказам и проч., руб.
    //Премия текущего месяца
   _CurPlan : double; //План, руб. =// Сумма для формирования фонда руководителя
   _CurFact : double; //Факт, руб.
   _CurOst  : double; //Остаток, руб.
   _sGroupPers:string;//Группа персонала
   _pKatPodr:comp;
   _pDoc    :comp;
   _pRaise  :comp;
   _pFond   :comp;
   _wMonth  :word;
   _wYear   :word;
   _NPP_FLD_Nach:word;
   _sFond:string; //фонд

{ delete all tmp_print_fond;
  if GP_KPI_DOC.wType<>101 exit;
  timelog('Fill_Tmp_Print_Fond 001');
  PushPos(#GP_KPI_DOCSUMFOND);
  _pDoc    :=GP_KPI_DOC.Nrec;
  _pKatPodr:=GP_KPI_DOC.cKatPodr;
  _wMonth  :=GP_KPI_DOC.wMonth;
  _wYear   :=GP_KPI_DOC.wYear;

  _Loop GP_KPI_DOCSUMFOND
  { _sFond:='';
    _Econom :=GP_KPI_DOCSUMFOND.SUMMA; //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
    _SuProc :=0; //% на поощрение
    _SuUse  :=0; //Использование экономии по фондам, руб.
    _SuRas  :=0; //Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
    _SuZGD  :=0; //Выделено из фонда руководителя функционального направления, руб.
    _SuDop  :=0; //Доп.фонд по инициативным заказам и проч., руб.
    //Премия текущего месяца
    _CurPlan :=0; //План, руб. =// Сумма для формирования фонда руководителя
    _CurFact :=0; //GP_KPI_DOCSUMFOND.Rasp //Факт, руб.
    _CurOst  :=GP_KPI_DOCSUMFOND.SUMMA-GP_KPI_DOCSUMFOND.Rasp;  //Остаток, руб.
    vFond.pFond:=GP_KPI_DocSumFond.cGP_KPI_Fond;
    _sGroupPers:='';
    _pFond:=GP_KPI_DocSumFond.cGP_KPI_Fond;
    _NPP_FLD_Nach:=0;
    //-----------------------
    if vFond.Getfirst GP_KPI_Fond=tsok
    { if vFond.Getfirst GP_KPI_GroupPers=tsok
        _sGroupPers:=trim(vFond.GP_KPI_GroupPers.Name);
       //убираем группу только с конца
      _sFond:=trim(Replace(GP_KPI_Fond.Name+'$$',_sGroupPers+'$$',''));
      _pRaise:=vFond.GP_KPI_Fond.cKpi_Raise;

      //-----------------------
      // подобъем итоги по премии в разрезе фонда
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Fond 001='+vFond.GP_KPI_Fond.Name);
      delete all tmp_kpi_sum;
      _Try
      { SQL select ' ' as sortkey
        #GP_KPI_DOC_SP_REC_Null
        #GP_KPI_DOC_SP_SUM(01)
        #GP_KPI_DOC_SP_SUM(02)
        #GP_KPI_DOC_SP_SUM(03)
        #GP_KPI_DOC_SP_SUM(04)
        #GP_KPI_DOC_SP_SUM(05)
        #GP_KPI_DOC_SP_SUM(06)
        #GP_KPI_DOC_SP_SUM(07)
        #GP_KPI_DOC_SP_SUM(08)
        #GP_KPI_DOC_SP_SUM(09)
        #GP_KPI_DOC_SP_SUM(10)
        #GP_KPI_DOC_SP_SUM(11)
        #GP_KPI_DOC_SP_SUM(12)
        #GP_KPI_DOC_SP_SUM(13)
        #GP_KPI_DOC_SP_SUM(14)
        #GP_KPI_DOC_SP_SUM(15)
        #GP_KPI_DOC_SP_SUM(16)
        #GP_KPI_DOC_SP_SUM(17)
        #GP_KPI_DOC_SP_SUM(18)
        #GP_KPI_DOC_SP_SUM(19)
        #GP_KPI_DOC_SP_SUM(20)
        From GP_KPI_DOC_SP
        inner join GP_KPI_GROUPPERS_SP on GP_KPI_GROUPPERS_SP.cKlKatego = GP_KPI_DOC_SP.cKlKatego
        inner join GP_KPI_Fond on GP_KPI_Fond.cGroupPers =  GP_KPI_GROUPPERS_SP.cGroupPers
           and GP_KPI_FOND.Nrec=:(_pFond)
        where GP_KPI_DOC_SP.cGP_KPI_DOC =:(_pDoc) and GP_KPI_DOC_SP.cGp_Kpi_Raise=:(_pRaise)
        into tmp_kpi_sum;
      }
      _Except
      else
      { timelog('Возникло исключение при запуске запроса 001 '+ExploreException);
      }
      _finally
      {
      }
      ReReadRecord(#tmp_kpi_sum);
      if Getfirst tmp_kpi_sum<>tsok
      { insert current tmp_kpi_sum;
      }
      // подобъем итоги
      //-----------------------
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Fond 002='+vFond.GP_KPI_Fond.Name);
      if vFond.Getfirst GP_KPI_GroupPers=tsok
        _sGroupPers:=vFond.GP_KPI_GroupPers.Name;
      vFond.wTypeFld:=0;
      vFond.pDoc:=vFond.GP_KPI_Fond.cKpi_Raise;
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Ищем базовые суммы:_sFond='+_sFond);
      _Loop tmp_kpi_sum
      { vFond._Loop GP_KPI_Fields
        {
          if _sFond='Фонд руководителя Основные рабочие ОП'
          { if IsBitCTW(vFond.GP_KPI_Fields.Option,5)
            { _CurFact:=_CurFact+tmp_kpi_sum.dmSu[vFond.GP_KPI_Fields.Npp];
            }
          } //if _sFond='Фонд руководителя Основные рабочие ОП'
          else
          { if pos('Сумма для формирования фонда',vFond.GP_KPI_Fields.Name)>0
            { _CurPlan :=_CurPlan+tmp_kpi_sum.dmSu[vFond.GP_KPI_Fields.Npp]; //План, руб. =// Сумма для формирования фонда руководителя
            }
            if IsBitCTW(vFond.GP_KPI_Fields.Option,2)
              _CurFact:=_CurFact+tmp_kpi_sum.dmSu[vFond.GP_KPI_Fields.Npp];
          } //else if  _sFond='Фонд руководителя Основные рабочие ОП'
        }//vFond._Loop GP_KPI_Fields
      }//_Loop tmp_kpi_sum
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:_CurPlan='+string(_CurPlan,0,2)
               +', _CurFact='+string(_CurFact,0,2));

      //------------------------------
      //Найдем суммы фондовых ведомостей
      vFond.wTypeFld:=1;
      vFond.pDoc:=_pFond;
      delete all tmp_kpi_sum;
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Fond 003='+vFond.GP_KPI_Fond.Name);
      _Try
      { SQL select ' ' as sortkey
        #GP_KPI_DOC_SP_REC_Null
        #GP_KPI_DOC_SP_SUM(01)
        #GP_KPI_DOC_SP_SUM(02)
        #GP_KPI_DOC_SP_SUM(03)
        #GP_KPI_DOC_SP_SUM(04)
        #GP_KPI_DOC_SP_SUM(05)
        #GP_KPI_DOC_SP_SUM(06)
        #GP_KPI_DOC_SP_SUM(07)
        #GP_KPI_DOC_SP_SUM(08)
        #GP_KPI_DOC_SP_SUM(09)
        #GP_KPI_DOC_SP_SUM(10)
        #GP_KPI_DOC_SP_SUM(11)
        #GP_KPI_DOC_SP_SUM(12)
        #GP_KPI_DOC_SP_SUM(13)
        #GP_KPI_DOC_SP_SUM(14)
        #GP_KPI_DOC_SP_SUM(15)
        #GP_KPI_DOC_SP_SUM(16)
        #GP_KPI_DOC_SP_SUM(17)
        #GP_KPI_DOC_SP_SUM(18)
        #GP_KPI_DOC_SP_SUM(19)
        #GP_KPI_DOC_SP_SUM(20)
        From  GP_KPI_DOC
        Inner join GP_KPI_DOC_SP on GP_KPI_DOC_SP.cGp_KPI_Doc = GP_KPI_DOC.Nrec
         and ( :(_pKatpodr) = GP_KPI_DOC_SP.cKatPodr)
        inner join GP_Status on GP_Status.Nrec = GP_KPI_DOC.cStatus and (GP_Status.CODE<>'01')
        where (2 = GP_KPI_DOC.wType) and (:(_wMonth) =GP_KPI_DOC.wMonth)  and (:(_wYear) =GP_KPI_DOC.wYear)
           and GP_KPI_DOC.cGP_KPI_FOND = :(_pFond)
        into tmp_kpi_sum;
      }
      _Except
      else
      { timelog('Возникло исключение при запуске запроса 002 '+ExploreException);

      }
      _finally
      {
      }
      ReReadRecord(#tmp_kpi_sum);
      if Getfirst tmp_kpi_sum<>tsok
      { insert current tmp_kpi_sum;
      }
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Fond 004='+vFond.GP_KPI_Fond.Name);
      vFond._Loop GP_KPI_Fields
      { if pos('Из фонда руководителя',vFond.GP_KPI_Fields.Name)>0
        or pos('Выделено из фонда руководителя',vFond.GP_KPI_Fields.Name)>0
        { _SuZGD :=_SuZGD+tmp_kpi_sum.dmSu[vFond.GP_KPI_Fields.Npp]; //План, руб. =// Сумма для формирования фонда руководителя
        }
        if pos('Из фонда результативности',vFond.GP_KPI_Fields.Name)>0
        { //_SuProc :=_SuProc+tmp_kpi_sum.dmSu[vFond.GP_KPI_Fields.Npp]; //План, руб. =// Сумма для формирования фонда руководителя
        }
      } //vFond._Loop GP_KPI_Fields


      //Найдем суммы фондовых ведомостей
      //------------------------------
      timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Fond 005='+vFond.GP_KPI_Fond.Name);
    } //if vFond.Getfirst GP_KPI_Fond=tsok
    if _sFond='Фонд руководителя Основные рабочие ОП'
    { _CurPlan:=_SuZGD;
    }
    _SuUse :=(_CurFact-_CurPlan);//-(_SuRas+_SuZGD+_SuDop);
    if _SuUse<0 _SuUse:=0; // Если меньше 0 , то это экономия,  а не использование.
    _Econom:=_Econom-(_SuZGD+_SuProc);
    if _sFond='Фонд результативности'
    {  _SuProc:=_CurPlan*0.05;
       _Econom:=_Econom-_SuProc
    }
    if _sGroupPers='РСС' _sGroupPers:=' '+_sGroupPers;
    insert into tmp_print_fond set
     tmp_print_fond.sFond  :=_sFond
    ,tmp_print_fond.cFond  :=GP_KPI_Fond.Nrec
    ,tmp_print_fond.sGrRab :=_sGroupPers
    ,tmp_print_fond.cGrRab :=GP_KPI_Fond.cGroupPers
    ,tmp_print_fond.Econom :=Round(_Econom,2) //Экономия по по фонду премирования за результаты работы подразделения и результаты работы работника
    ,tmp_print_fond.SuProc :=Round(_SuProc,2) //% на поощрение
    ,tmp_print_fond.SuUse  :=Round(_SuUse,2) //Использование экономии по фондам, руб.
    ,tmp_print_fond.SuRas  :=Round(_SuRas,2) //Расчетный премиальный фонд на сокращенные штатные единицы по инициативе руководителя подразделения, руб.
    ,tmp_print_fond.SuZGD  :=Round(_SuZGD,2) //Выделено из фонда руководителя функционального направления, руб.
    ,tmp_print_fond.SuDop  :=Round(_SuDop,2) //Доп.фонд по инициативным заказам и проч., руб.
    //Премия текущего месяца
    ,tmp_print_fond.CurPlan :=Round(_CurPlan,2) //План, руб. =// Сумма для формирования фонда руководителя
    ,tmp_print_fond.CurFact :=Round(_CurFact,2) //Факт, руб.
    ,tmp_print_fond.CurOst  :=Round(_CurOst,2)  //Остаток, руб.
  } //_Loop GP_KPI_DOCSUMFOND
  PopPos(#GP_KPI_DOCSUMFOND);
  timelog('Fill_Tmp_Print_Fond->GP_KPI_DOCSUMFOND:Finish');

} //Procedure Fill_Tmp_Print_Fond;

//--------------------------------------------
#doc
  Установка статуса документа
#end
Function SetDocFieldsState: boolean;
{ Result:=Inherited::SetDocFieldsState;
  if not boLocked
  if (StatusChange.CanChangeStatus(GP_KPI_DOC.cStatus))
  { cfsSetProp('c_BRDOCRAISE_GP_STATUS.NAME_Статус_док-та','ButtonType',inPickButton); //WINCOMM.INC
    cfsSetProp('c_BRDOCRAISE03_GP_STATUS.NAME_Статус_док-та','ButtonType',inPickButton); //WINCOMM.INC
    cfsSetProp('i_SCRRAISEEDIT_GP_STATUS.NAME','ButtonType',inPickButton);
    cfsSetProp('i_ScrRaiseEdit03_GP_STATUS.NAME','ButtonType',inPickButton);
  }
  iGP_KPI_Doc_RaiseEdit_Sp.EnableDisableDelete(UserAccessService.CanDel(GP_KPI_DOC.cStatus));
}//Function SetDocFieldsState: boolean;


//===============================================
// обновить связанные окна
//===============================================
Procedure PositionChanged(_wIntMode_Add:word=0);
{
  if boWinEdit=True
  { iGP_KPI_Doc_RaiseEdit_Sp.InitParam((wIntMode
      or if(not CanEditTbl,cgiNotEdit,0)
      or if(UserAccessService.IsAdmin,cgiSingleEdit,0)
      ) +_wIntMode_Add

    ,GP_KPI_Doc.Nrec,0,0);

  }
  SetDocFieldsState;
}//Procedure PositionChanged;


//===============================================
// Перечитать запись при изменении в связанных окнах
//===============================================
Procedure onEvent_ReReadContainer;
{ timelog(' onEvent_ReReadContainer');
  if wVisibleRun
  { ReReadRecord(#GP_KPI_DOCSUMFOND);
    ReReadRecord(#GP_KPI_DOC);
    ReScanPanel(#GP_KPI_DOC);
  }
} //Procedure onEvent_ReReadContainer;

//===============================================
// Запустить локальное меню
//===============================================
Procedure MyHotKey(_boFlag:boolean);
var _wCommand:word;
{     timelog('GP_KPI_Doc_RaiseEdit->MyHotKey:_boFlag='+string(_boFlag));
      _wCommand:=0;
      case CurTable of
      #GP_KPI_Doc:
      { _try
          { iKPIReport.pDoc := GP_KPI_Doc.Nrec;
            //PutHotCommand
            //ProcessCommand(RunLoadMenu(iKPIReport.GetMenu(
            var ww_Str:string;
            ww_Str:='GP_STAFF::'+if(_boFlag,'GP_KPI_DocEdit_Main_HotKey','GP_KPI_DocEdit_Edit_HotKey');
            if(_boFlag)
            { //
              ww_Str:=ww_Str+';SEPARATOR;GP_STAFF::GP_KPI_DocEdit_Raise_ZP';
            }
            _wCommand:=RunDynMenu( ww_str);
            timelog('GP_KPI_Doc_RaiseEdit->MyHotKey:_wCommand='+string(_wCommand));
            //ProcessCommand(_wCommand);
            PutCommand(_wCommand);
          }
        _Except
        else
        {
        }
        _finally
          {
          }
      }
      end;

} //Procedure MyHotKey(_boFlag:boolean);

//========================================================
// Визуальная часть
//========================================================
Window wnFilter 'Установите фильтры'  Cyan, EscClose;
  Show at (,,50,10);
Screen scrFilter 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wFilter :NoProtect;
  wYear_Flt:NoProtect;
  wMonth_b_Flt : NoProtect;
  wMonth_e_Flt : NoProtect;
  Filtr_TypeDocs : PickButton,Protect;
  Filtr_Status   : PickButton,Protect;
  Filtr_KatPodr  : PickButton,Protect;
  Filtr_CatRaise : PickButton,Protect;
  wZP_FLT        : [List 0 'Да','Нет'],Protect;
Buttons
  cmOk    ,,, 'Установить фильтр', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Фильтр по`
 [.] Году`          .@@@@@@@
 [.] Месяцам`       с .@@@@@@@@@@ по .@@@@@@@@@@
 [.] Типу ведомости`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Статусу       `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Подразделению `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Виду премии   `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Передано в ЗП `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }

}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnFilter,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;

//----------------------------------------------
//
//----------------------------------------------
Window wnInsert 'Установите параметры создания'  Cyan, EscClose;
  Show at (,,50,9);
Screen scrInsert 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wYear_Flt:NoProtect;
  wKvartal_Ins   :NoProtect;
  wMonth_b_Flt   :#Month_List
  wYear_Ins      :NoProtect;
  wYearY_Ins     :NoProtect;

  Filtr_KatPodrIns  : PickButton,Protect;
// Убрано по задаче 781 02.02.2018
//  Filtr_KPI_Raise   : PickButton,Protect;
//  `Премии       `.@@@@@@@@@@@@@@@@@@@@@@@@@@@

Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
 `Год`          .@@@@@@@@ `Квартал` .@@@@@@@
 `Месяц`        .@@@@@@@@ `Год кв`  .@@@@@@@
                 `Годовая премия за`.@@@@@@@
 `Подразделения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ if ExistTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
  { if boGetTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
    { Message('Формирование ведомостей'
        +chr(13)+'временно запрещено!'
        );
      abort;
      exit;
    }
  } //if ExistTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
  wYear_Flt:=YearRas;
  wMonth_b_Flt:=MonthRas;
  wMonth_e_Flt:=wMonth_b_Flt;

  isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}

cmOk:
{ if GetMarkerCount(Marker_KatPodrIns)=0
  { Message('Задайте фильтр по подразделениям!');
    exit;
    abort;
  }
  wMonth_e_Flt:=wMonth_b_Flt;
  // Убрано по задаче 781 02.02.2018
  //  только для 101 типа документа!
  /*
  if GetMarkerCount(Marker_KPI_RAISE)=0
  { Message('Задайте фильтр по премиям!');
    exit;
    abort;
  }
  */
  ClearMarker(Marker_KPI_RAISE);
  var _pGp_TypeDocs:comp=0;
  if getfirst Gp_TypeDocs_Find where (( 101 == Gp_TypeDocs_Find.wType ))=tsok
  { _pGp_TypeDocs:=Gp_TypeDocs_Find.Nrec;
    var _dt_close:date;
    _dt_close:=date(1,wMonth_b_Flt,wYear_Flt);

    vRaise._loop GP_KPI_Raise
      where (( _pGp_TypeDocs == GP_KPI_Raise.cGp_TypeDocs
      and (GP_KPI_Raise.DEND=zerodate or GP_KPI_Raise.DEND>_dt_close)
       ))
          InsertMarker(Marker_KPI_RAISE, vRaise.GP_KPI_Raise.Nrec);
  }

  if GetMarkerCount(Marker_KPI_RAISE)=0
  { Message('Не найдены премии для формирования!');
    exit;
    abort;
  }


  if wYear_Flt<YearRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    exit;
    abort;
  }
  if wMonth_b_Flt=0
  { Message('Не задан месяц формирования');
    exit;
    abort;

  }
  if wYear_Flt=YearRas and wMonth_b_Flt<MonthRas
  {
    if username <> 'lapushkov_dv'
    {
     Message('Ведомости нельзя создавать в предыдущих периодах');
     exit;
     abort;
    }
  }

  CloseWindowEx(wnInsert,cmDefault)

}
end;// HandleEvent
end; //Windows wnInsert 'Установите фильтры' , Cyan, EscClose;

//----------------------------------------------
//
//----------------------------------------------
Window wnInsert102 'Установите параметры создания'  Cyan, EscClose;
  Show at (,,50,9);
Screen scrInsert102 'Фильтры' ('Фильтры',,sci13Esc);
Table TypeDocs_Flt;
Fields
  wYear_Flt:NoProtect;
  wKvartal_Ins   :NoProtect;
  wMonth_b_Flt   :#Month_List
  wYear_Ins      :NoProtect;
  wYearY_Ins      :NoProtect;
  Filtr_KPI_Raise   : PickButton,Protect;
Buttons
  cmOk    ,,, 'Сформировать', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
 `Год`          .@@@@@@@@ `Квартал` .@@@@@@@
 `Месяц`        .@@@@@@@@ `Год кв`  .@@@@@@@
                 `Годовая премия за`.@@@@@@@
 `Премии       `.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ if ExistTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
  { if boGetTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
    { Message('Формирование ведомостей'
        +chr(13)+'временно запрещено!'
        );
      abort;
      exit;
    }
  } //if ExistTune('NPOEM_OWN.Raise.LOCK_FORM_VED')
  isProtect2:=isProtect;
  if boIns_Rezerv
  { wKvartal_Ins   :=GP_KPI_Doc.HARRCOMP[1];
    wYear_Ins      :=GP_KPI_Doc.HARRCOMP[2];
    wYearY_Ins     :=GP_KPI_Doc.HARRCOMP[3];
  } //if boInsRezerv
  else
  { wMonth_b_Flt:=MonthRas;
    wMonth_b_Flt:=MonthRas;
    isProtect2:=isProtect;
  } //else
  //------------------------
  ToggleFieldSelectable(#wYear_Flt   , not boIns_Rezerv);
  ToggleFieldSelectable(#wMonth_b_Flt, not boIns_Rezerv);
  ToggleFieldProtected (#wKvartal_Ins, boIns_Rezerv);
  ToggleFieldProtected (#wYear_Ins   , boIns_Rezerv);
  ToggleFieldProtected (#wYearY_Ins  , boIns_Rezerv);
  //------------------------


  if isProtect
  { SetEditMode(True)
  }
}
cmDone:
{ if isProtect2
    SetEditMode(false);
}

cmOk:
{ if GetMarkerCount(Marker_KPI_RAISE)=0
  { Message('Задайте фильтр по премиям!');
    exit;
    abort;
  }
  if wYear_Flt<YearRas
  { Message('Ведомости нельзя создавать в предыдущих периодах');
    exit;
    abort;
  }
  if wMonth_b_Flt=0
  { Message('Не задан месяц формирования');
    exit;
    abort;

  }
  if wYear_Flt=YearRas and wMonth_b_Flt<MonthRas
  if username <> 'lapushkov_dv'

  { Message('Ведомости нельзя создавать в предыдущих периодах');
    exit;
    abort;
  }
  CloseWindowEx(wnInsert102,cmDefault)

}
end;// HandleEvent
end; //Windows wnInsert102 'Установите фильтры' , Cyan, EscClose;


//-----------------------------------------
Window wnEdit  'Редактирование ведомости' ;
Show at (,,120,30);
FormatsGroup fgDocRaiseEdit;
Show at (,,,13) ;
Screen ScrRaiseEdit (,,sci18Esc);
Show at (,,,9) fixed_y;
Table GP_KPI_Doc;
Fields
  GP_KPI_Doc.DocCreate    ('Дата создания') : Protect,NoDel;
  x$users.XU$FULLNAME     ('пользователь, создавший документ')  : Protect,NoDel;
  GP_KPI_Doc.DocNumber    ('Дата документа') : NoProtect,PickButton,NoDel;
  GP_KPI_Doc.DocDate      ('Дата документа') : NoProtect;
  GP_KPI_Doc.Summa        ('Итого по ведомости') : ['\2p[|-]366`666`666`666`666.88'],Protect;
  Katpodr.Kod             ('Код подразделения' ) :[6],Protect,NoDel;
  Katpodr.Name            ('Наименование подразделения') :[25],Protect,NoDel;
  GP_Status.Name          ('Статус документа',,sci1378Esc) :Protect,PickButton,EditButton,NoDel;
  GP_TypeDocs.Name        ('Тип ведомости') :[15],Protect,NoDel;
  GP_KPI_Doc.WYEARPREM    ('Год, за который идет выплата год.премии'   ) :NoProtect,NoDel;
  GP_KPI_Doc.wYear        ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       ('Месяц ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wKvartal     ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.WYEARKVARTAL ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.Description  ('Описание')     :NoProtect,NoPickButton,NoDel;
  Flag                    ('Признак наличия ведомостей в зарплате')
           :Protect,NoPickButton,NoDel ,{Font={Bold=True}};
  ChiefPost.Name ('Должность ответственного',,):Protect,NoDel;
  ChiefDep.Code ('Подразделение ответственного',,):Protect,NoDel;
  Executor.Fio            ('Исполнитель'):Protect,PickButton,NoDel;
  [RecordProtected] if (boLocked,'Редактир. '
    +sGetAttrID(coGP_KPI_DOC,GP_KPI_DOC.Nrec,VA_GP_KPI_DOC_LOCK),'')
      ('Признак редактирования записи другим пользователем') : {Font = {Bold = (true); Color = ColorSysRed }}, Skip, Centered;
  //-------------------------------
Buttons
  cmValue11    ,,, 'Рассчитать', hcAllBOk, scGalDial;
  cmValue12    ,,, 'Сформировать ведомости в заработную плату', hcAllBOk, scGalDial;
<<
  `Дата создания`.@@@@@@@@@@@@@@ `Автор` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.  Расчет  .>
  `Номер`        .@@@@@@@@@@@@@@ `Дата`  .@@@@@@@@@@ Сумма .@@@@@@@@@@@@@@
  `Подразделение`.@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Статус`       .@@@@@@@@@@@@@@ `Тип`   .@@@@@@@@@@@@@@@@@ `Год.Пр.`.@@@@ <.В зарплату.>
  `Год`          .@@@@@@@        `Месяц` .@@@ `Квартал`.@@@ `Год кв.`.@@@@
  `Описание`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   .@@@@@@@@@
  `Должность ответственного` .@@@@@@@@@@@@@@@@@@@ `Подразделение`.@@@@@@@@
  `Исполнитель`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;//Screen ScrRaiseEdit;
Browse brDocFondEdit '' (,,sci147EnEsc);
Show at (,10,,) fixed_y;
Table GP_KPI_DocSumFond;
Fields
  GP_KPI_Fond.Name        'Фонд'         :[30],Protect, NoDel, NoPickButton;
  GP_KPI_DOCSUMFOND.SUMMA 'Сумма фонда'  :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
  GP_KPI_DOCSUMFOND.Rasp  'Распределено' :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
  [Fond_Ost] GP_KPI_DOCSUMFOND.SUMMA-GP_KPI_DOCSUMFOND.Rasp   'Остаток'      :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
end;
end;//fgDocRaiseEdit
//--------- Высшего звена ---------------------
//--------- СРЕДНЕГО звена ---------------------
Screen ScrRaiseEdit03;
Show at (,,,13) fixed_y;
Table GP_KPI_Doc;
bevel br {1,8,90,12, bsLowered , bsFrame};
Fields
  GP_KPI_Doc.DocCreate    ('Дата создания') : Protect,NoDel;
  x$users.XU$FULLNAME     ('пользователь, создавший документ')  : Protect,NoDel;
  GP_KPI_Doc.DocNumber    ('Номер документа') : NoProtect,PickButton,NoDel;
  GP_KPI_Doc.DocDate      ('Дата документа') : NoProtect;
  GP_KPI_Doc.Summa        ('Итого по ведомости') : ['\2p[|-]366`666`666`666`666.88'],Protect;
  Katpodr.Kod             ('Код подразделения' ) :[6],Protect,NoDel;
  Katpodr.Name            ('Наименование подразделения') :[25],Protect,NoDel;
  GP_Status.Name          ('Статус документа',,sci1378Esc) :Protect,PickButton,EditButton,NoDel;
  GP_TypeDocs.Name        ('Тип ведомости') :[15],Protect,NoDel;
  GP_KPI_Doc.WYEARPREM    ('Год, за который идет выплата год.премии'   ) :NoProtect,NoDel;
  GP_KPI_Doc.wYear        ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       ('Месяц ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wKvartal     ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.WYEARKVARTAL ('Квартал, за который идет выплата ведомости') :NoProtect,NoDel;
  GP_KPI_Doc.Description  ('Описание')     :Protect,NoPickButton,NoDel;
  Flag                    ('Признак наличия ведомостей в зарплате')
    :Protect,NoPickButton,NoDel ,{Font={Bold=True}};
  ChiefPost.Name ('Должность ответственного',,):Protect,PickButton,NoDel;
  ChiefDep.Code ('Подразделение ответственного',,):Protect,PickButton,NoDel;
  Executor.Fio            ('Исполнитель'):Protect,PickButton,NoDel;
  RecordProtected ('Признак редактирования записи другим пользователем')  : {Font = {Bold = (true); Color = ColorSysRed }}, Skip, Centered;
  //-------- Резерв
  Rez_Option  ('Резерв - опции            '): NoProtect;
  Rez_Kv_Mes  ('Квартальный резерв - месяц'): NoProtect;
  Rez_Kv_Year ('Квартальный резерв - год  '): NoProtect;
  GP_KPI_Raise_KV.Name ('Наименование квартальной премии') :Protect,PickButton;
  Rez_YP_Year ('Годовой резерв - год      '): NoProtect;
  GP_KPI_Raise_YP.Name ('Наименование годовой премии') :Protect,PickButton;
Buttons
  cmValue11    ,,, 'Рассчитать', hcAllBOk, scGalDial;
  cmValue12    ,,, 'Сформировать ведомости в заработную плату', hcAllBOk, scGalDial;
  cmValue14    ,,, 'Сформировать ведомости в заработную плату', hcAllBOk, scGalDial;
<<
  `Дата создания`.@@@@@@@@@@@@@@ `Автор` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <. Расчет  .>
  `Номер`        .@@@@@@@@@@@@@@ `Дата`  .@@@@@@@@@@ Сумма .@@@@@@@@@@@@@@
  `Подразделение`.@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Статус`       .@@@@@@@@@@@@@@ `Тип`   .@@@@@@@@@@@@@@@@@@`Год.Пр.`.@@@@ <.В зарплату.>
  `Год`          .@@@@@@@        `Месяц` .@@@ `Квартал`.@@@ `Год кв.`.@@@@
  `Описание`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  .@@@@@@@@@@
  `Должность ответственного` .@@@@@@@@@@@@@@@@@@@ `Подразделение`.@@@@@@@@
  `Исполнитель`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@

  `РЕЗЕРВ` [.] Квартальная` Квартал.@@@@ Год.@@@@@@ .@@@@@@@@@@@@@@@@@@@@@ <.Расчет рез.>
           [.] Годовая`                  Год.@@@@@@ .@@@@@@@@@@@@@@@@@@@@@

>>
end;//Screen ScrRaiseEdit;

Embedded emDocSP 'Спецификация' interface;// iGP_KPI_Doc_RaiseEdit_Sp;
Show at (,14,,);
end;
HandleEvent
cmInit:
{ boWinEdit:=True;
  PositionChanged;
  //ProtectRecord(#GP_KPI_DOC, IsProtected(#GP_KPI_DOC));

  iGP_KPI_Doc_RaiseEdit_Sp.ReReadAllTables;

  case GP_KPI_DOC.wType of
  102,103:
  { SetFormat(ScrRaiseEdit03);

  }
  else
  { SetFormat(fgDocRaiseEdit);
  }
  end;
}
cmDone:
{ iGP_KPI_Doc_RaiseEdit_Sp.ReReadAllTables;
  boWinEdit:=False;

}
cmValue11://Рассчитать ведомость
{ CalculateDoc(false);
  ReReadRecord(#GP_KPI_Doc);
  PositionChanged;
}
cmValue12://В зарплату
{
 if not UserAccessService.IsAdmin
  then
   {
         Message('Только пользователь с ролью администратор может передавать ведомости в ЗП', error)
   }
  else
  {
    Make_Zar_Ved;
  }
}
cmValue14:// Резерв
{ if GP_KPI_DOC.cStatus<>Status.GetDefault
  { message('Расчет резерва возможен только в оформляемом статусе');
    exit;
  }
  else
  { boIns_Rezerv:=true;
    timelog('wnEdit->cmValue14 001');
    //if RunWindowModal(wnInsert102)=cmDefault
    //{ timelog('wnEdit->cmValue14 002');
    CalcRezerv;
    //}
    timelog('wnEdit->cmValue14 003');
    boIns_Rezerv:=false;
  }
}
cmValue2://Печать ведомостей
{ set iKPIReport.pDoc := GP_KPI_Doc.Nrec;
  //ProcessCommand(iKPIReport.GetMenu('');
  RunLoadMenu(iKPIReport.GetMenu(''));
}
cmHotKeys:
{ UpdateTable;
  timelog('GP_KPI_Doc_RaiseEdit->cmHotKeys 001 start');
  MyHotKey(false);
  timelog('GP_KPI_Doc_RaiseEdit->cmHotKeys 002 finish');
  stop;
}
cmPrintDoc://Печать ведомостей
{ timelog('GP_KPI_Doc_RaiseEdit->cmPrintDoc 001 start');
  PrintDocument(false);
  timelog('GP_KPI_Doc_RaiseEdit->cmPrintDoc 002 start');
  stop;
}
cmDone:
{ UnLockAll(#GP_KPI_DOC);
  boWinEdit:=False;
  boLocked:=False;
  PositionChanged;
}
end;
end;//Window wnEdit 'Редактирование ведомости' ;

//****************************************************
FormatsGroup fgDocRaise;
Browse brDocRaise '' (,,sci147Esc);
Show at (,,,15);
Table GP_KPI_Doc;
recMarker=pMarker;
Fields
  {Font={Bold=Flag<>''}};
  GP_KPI_Doc.DocCreate    'Дата создания' : [15], Protect;
  GP_KPI_Doc.DocNumber    'Номер' :[20],Protect,NoPickButton,NoDel;
  GP_KPI_Doc.DocDate      'Дата'  :[12],Protect;
  Katpodr.Kod             'Код'#13'подр-ния' ('Код подразделения') :[6],Protect,NoDel;
  Katpodr.Name            'Наименование'#13'подразделения' ('Наименование подразделения') :[25],Protect,NoDel;
  //GP_Status.Name          'Статус'#13'док-та'  ('Статус документа') :[15],Protect,NoDel;
  GP_Status.Name          'Статус'#13'док-та' ('Статус документа',,sci13Esc) :[15],Protect,PickButton,EditButton,NoDel;
  GP_TypeDocs.Name        'Тип'#13'ведомости'  ('Тип ведомости') :[15],Protect,NoDel;
  GP_KPI_Doc.wYear        'Год'          ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       'Месяц'        ('Месяц ведомости') :[5],Protect,NoDel;
  Flag                    'Ф'            :[2],Protect,NoPickButton,NoDel;
  GP_KPI_Doc.Description  'Описание'     :[40],Protect,NoPickButton,NoDel;
end;//Browse brDocRaise
Browse brDocFond '' (,,sci1Esc);
Show at (,16,,);
Table GP_KPI_DocSumFond;
Fields
  GP_KPI_Fond.Name        'Фонд'         :[30],Protect, NoDel, NoPickButton;
  GP_KPI_DOCSUMFOND.SUMMA 'Сумма фонда'  :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
  GP_KPI_DOCSUMFOND.Rasp  'Распределено' :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
  Fond_Ost                'Остаток'      :[12,'\2p[|-]366`666`666`666`666.88'],NoDel,Protect;
end;
end; //fgDocRaise

Browse brDocRaise103 '' (,,sci147Esc);
//Show at (,,,15);
Table GP_KPI_Doc;
recMarker=pMarker;
Fields
  {Font={Bold=Flag<>''}};
  GP_KPI_Doc.DocCreate    'Дата создания' : [15], Protect;
  GP_KPI_Doc.DocNumber    'Номер' :[20],Protect,NoPickButton,NoDel;
  GP_KPI_Doc.DocDate      'Дата'  :[12],Protect;
  Katpodr.Kod             'Код'#13'подр-ния' ('Код подразделения') :[6],Protect,NoDel;
  Katpodr.Name            'Наименование'#13'подразделения' ('Наименование подразделения',,sci137Esc) :[25],PickButton,Protect,NoDel;
  GP_Status.Name          'Статус'#13'док-та' ('Статус документа',,sci13Esc) :[15],Protect,PickButton,EditButton,NoDel;
  GP_TypeDocs.Name        'Тип'#13'ведомости'  ('Тип ведомости') :[15],Protect,NoDel;
  GP_KPI_Doc.wYear        'Год'          ('Год ведомости') :[5],Protect,NoDel;
  GP_KPI_Doc.wMonth       'Месяц'        ('Месяц ведомости') :[5],Protect,NoDel;
  Flag                    'Ф'            :[2],Protect,NoPickButton,NoDel;
  GP_KPI_Doc.Description  'Описание'     :[40],Protect,NoPickButton,NoDel;
end;//Browse brDocRaise


//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table GP_KPI_Doc;
cmSetDefault:
{ //if isFilterRun   then exit
  exit; // НЕ ДОБАВЛЯЕМ! - cmInsert
  //if not wVisibleRun then exit;
  //ClearBuffer(#GP_KPI_Doc);
}
cmInsert:
{ if not wVisibleRun then exit;
  //UpdateTable;
  case wTypeDoc of
  102,103:
  { if RunWindowModal(wnInsert102)=cmDefault
      InsertDoc;
  }
  else
  { if RunWindowModal(wnInsert)=cmDefault
      InsertDoc;
  }
  end;
  abort;

}
cmInsertRecord:
{ if not wVisibleRun then exit;
  Insert Current GP_KPI_Doc;
}
cmUpdateRecord:
{ if not wVisibleRun then exit;
  Update Current GP_KPI_Doc;
}
cmDeleteRecord:
{ if not wVisibleRun then exit;
  if isProtect exit;
  if message('Удалить ведомость '+GP_KPI_Doc.DocNumber
     +DateToStr(GP_KPI_Doc.DocDate,' от DD/MM/YYYY г'),YesNo)<>cmYes
  { abort;
    exit;

  }
  if delete GP_KPI_Doc_Sp where (( GP_KPI_Doc.Nrec == GP_KPI_Doc_Sp.cGP_KPI_DOC  ))=tsok
  { delete Current GP_KPI_Doc;
  }
  else
  { message('Ошибка удаления спец.ведомости')

  }
}
cmPositionChanged:
{ PositionChanged;


}
end;



//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    //----------------------
    cmInit:
    { //-------------------------
      if  inherited :: handleEvent (cmInit)=heAbort then Abort;
      //-------------------------


      fCurMainFormat    :=brDocRaise;

      fCurMainFormatEdit:=ScrRaiseEdit;
      if wTypeDoc=102 or wTypeDoc=103
      { fCurMainFormatEdit:=ScrRaiseEdit03;
        fCurMainFormat    :=brDocRaise103;
      }
      else
      { fCurMainFormatEdit:=fgDocRaiseEdit;
        fCurMainFormat    :=fgDocRaise;
      }
      if wTypeDoc<>100
      { ClearFieldState(Gp_TypeDocs.Name,sfVisible);

      }
      selectFormat(fCurMainFormat);
      //----------------------------------------
      pMarker.StoreName := 'GP_KPI_DOC_RaiseEdit';
      Timelog('GP_KPI_Doc_RaiseEdit->cmInit Заполним фонды');
      //------ Заполним фонды
      if wTypeDoc<>100
      { if getfirst GP_TypeDocs where (( wTypeDoc == GP_TypeDocs.wType ))=tsok
          SetTitle(GP_TypeDocs.Name);

      }
      Timelog('GP_KPI_Doc_RaiseEdit->cmInit подключим контейнер');
      //-------------------------
      BindEmbeddedInterface(emDocSP,iGP_KPI_Doc_RaiseEdit_Sp);
      BindEvent(onEvent_ReReadContainer, iGP_KPI_Doc_RaiseEdit_Sp.Event_ReReadContainer);

      //===========================
      Timelog('GP_KPI_Doc_RaiseEdit->cmInit загрузим права');

      Timelog('GP_KPI_Doc_RaiseEdit->cmInit загрузим переменные');
      ReadParam;
      if wTypeDoc<>0 and wTypeDoc<>100
      { wType_Flt:=0;
        ClusterDisabledField(#wFilter,4);
        BitOffW(wFilter,3);
      }
      else
      { ClusterDisabledField(#wFilter,0);
      }
      //в режиме все ведомости только просмотр
      if wTypeDoc=100
      { wIntMode:=wIntMode or cgiNotEdit;
        PushBounds(tbByTypeDocsAll);
      }
      Timelog('GP_KPI_Doc_RaiseEdit->cmInit установим ограничения');
      SetFilterBounds(0);
      SetFilterNM;
      if cREc>0
      { if getfirst GP_KPI_DOC where (( cRec == GP_KPI_DOC.Nrec )) <>tsok
        { cRec:=0
        }
      }
      if cRec=0 getlast GP_KPI_DOC;
      ReScanPanel(#GP_KPI_DOC);
      if wIntMode<>0
      { SetEditMode(false)
      }
      else
      { SetEditMode(True)
      }

      //--- скрыть показать колонки
      Timelog('GP_KPI_Doc_RaiseEdit->cmInit скроем колонки');
      iGP_VisibleHidden.SetVisibleForField( cfsGetCurrentContainerSelf
                               , GetInterfaceComponentName
                               , #(__InterfaceName__)
                               , 'brDocRaise');

      isFilterRun:=False;

    }
    //----------------------
    cmDefault:
    { if (wIntMode and cgiPick)>0
      { if (wIntMode and cgiPickMult)=cgiPickMult
        { if PMarker.Count=0
          { pMarker.Mark;
          }
          pMarker.ExportToName(pMarker.StoreName);
        }
        else
        { set cRec:=GP_KPI_Raise.Nrec;
        }
        CloseInterface(cmDefault)
      }
      else
      if (wIntMode=0 or wIntMode=cgiNotEdit)
      { PutCommand(cmEdit) ;
      }
    }
    //----------------------
    cmDone:
    { if DataProtector<>NullRef
      { FreeVipInterface(DataProtector);

      }
      SaveParam;
      //-------------------------
      if  inherited :: handleEvent (cmDone)=heAbort then Abort;
      //-------------------------
    }
    //----------------------
    cmEdit:
    { if GetCurrentFormat<>brDocRaise and GetCurrentFormat<>brDocRaise103
      {
        case curfield of
        #GP_Status.name:{//История изменения статусов
          StatusChange.ShowStatusChangeLog(coGP_KPI_Doc,GP_KPI_Doc.NRec);
        }
        end;
      }
      else
      {
        //RunWindowModal(wnEdit);
        RunWindow(wnEdit);
      }
    }
    //----------------------
    cmOpenSearch :
    {
      isOpenSearch:= true;
      ProcessCommand(cmPick);
      isOpenSearch:= false;
    }
    //----------------------
    cmExprFieldChanged :
    { case CurField of
      #Rez_Kv_Mes: //Квартальный резерв - месяц
      { set GP_KPI_Doc.HARRCOMP[1]:=comp(ExprFieldValue);
        SetModified(true);
        UpdateTable;
      }
      #Rez_Kv_Year: //Квартальный резерв - год
      { set GP_KPI_Doc.HARRCOMP[2]:=comp(ExprFieldValue);
        SetModified(true);
        UpdateTable;
      }
      #Rez_YP_Year: //Годовой резерв - год
      { set GP_KPI_Doc.HARRCOMP[3]:=comp(ExprFieldValue);
        SetModified(true);
        UpdateTable;
      }
      #Rez_Option : //Резерв - опции
      { set GP_KPI_Doc.HARRCOMP[4]:=comp(ExprFieldValue);
        SetModified(true);
        UpdateTable;
      }
      end;
      case inherited :: handleEvent (cmExprFieldChanged) of
      heAbort:{abort;exit;}
      heStop:{stop;exit;}
      end;
    } //cmExprFieldChanged :
    //----------------------
    cmCheckField:
    {
      //принудительно вызовем вставку
      Case CurTable of
      #GP_KPI_Doc:
      { SetModified(True);
        UpdateTable;

      }
      end;
    }
    cmPick:
    { if  inherited :: handleEvent (cmPick)=heAbort then Abort;
      case CurField of
      #GP_Status.Name:
      { if wTypeDoc=101
        { PushPos(#GP_KPI_DocSumFond);
          var _errmes:string='';
          _Loop GP_KPI_DocSumFond
          { if GP_KPI_DocSumFond.Summa - GP_KPI_DocSumFond.Rasp<-0.005 // иногда пролетают хвосты
            { _errmes:=_errmes+chr(13)+GP_KPI_FOND.Name+', ост.='+string(GP_KPI_DocSumFond.Summa - GP_KPI_DocSumFond.Rasp,0,2)
            }

          }
          if _errmes<>''
          { message(   'Запрещено изменение статуса,'
              +chr(13)+'если сумма остатков по фондам отрицательная'
              +_errmes
              );
            exit;
            abort;
          }
          PushPos(#GP_KPI_DocSumFond);
        }
        if (StatusChange.PickStatus(GP_KPI_DOC.cStatus))
        {
          if (ChangeStatus(GP_KPI_DOC.NRec,StatusChange.StatusChangeLog))
          {
            set GP_KPI_DOC.cStatus:=StatusChange.StatusChangeLog.cStatusTo;
            update current GP_KPI_DOC;
            // пересчитаем права  на спецификацию
            if boWinEdit=True
            { iGP_KPI_Doc_RaiseEdit_Sp.InitParam(wIntMode
                  or if(not CanEditTbl,cgiNotEdit,0)
                  or if(UserAccessService.IsAdmin,cgiSingleEdit,0)
                 ,GP_KPI_Doc.Nrec,0,0);

            }
            SetDocFieldsState;
          }
        }
      }
      //------------------------------
      #GP_KPI_Raise_KV.Name,#GP_KPI_Raise_KV.Code:
      { wc_nrec:=GP_KPI_Doc.HARRCOMP[5];
        if RunInterface(GP_KPI_RaiseEdit,cgiPick,wc_nrec,if(wTypeDoc=100,0,wTypeDoc))<>cmCancel
          set GP_KPI_Doc.HARRCOMP[5]:=wc_nrec;
      }
      //------------------------------
      #GP_KPI_Raise_YP.Name,#GP_KPI_Raise_YP.Code:
      { wc_nrec:=GP_KPI_Doc.HARRCOMP[6];
        if RunInterface(GP_KPI_RaiseEdit,cgiPick,wc_nrec,if(wTypeDoc=100,0,wTypeDoc))<>cmCancel
          set GP_KPI_Doc.HARRCOMP[6]:=wc_nrec;

      }
      //------------------------------
      #Filtr_TypeDocs:
      { KauMarkerName:='GP_PickTypeDocs';
        StoreMarker(Marker_TypeDocs,KauMarkerName);
        //if RunInterface(GP_KPI_TypeVedEdit,cgiPickMult,'',0,100)<>cmCancel
        if (RunInterface(GP_PickTypeDocs,cgiPickMult, '',pTmp,100) = cmDefault)
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_TypeDocs,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_TypeDocs);
          BitOnW(wFilter,3);
        }
      }
      //------------------------------
      #Filtr_CatRaise:
      { KauMarkerName:='CatalogsMarker';
        StoreMarker(Marker_CatRaise,KauMarkerName);
        wc_nrec:=0;
        if ( RunInterface('PickCatalog2', integer(-17), wc_nrec, 100) <> cmCancel )
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_CatRaise,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_CatRaise);
          BitOnW(wFilter,6);
        }
      }
      //------------------------------
      #Filtr_Katpodr:
      { /*
        KauMarkerName := iGetKau.GetMarkerName(cgKau_Katpodr);
        StoreMarker(Marker_KatPodr,KauMarkerName);
        If (iGetKau.GetCodeKau(cgiPickMult,cgKau_KatPodr,Comp(0)) <> 0)
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_KatPodr,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_Katpodr);
          BitOnW(wFilter,5);
        }
        */
        //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
        //CopyMarker(_PodrMArkerPointer,Marker_KatPodr);
        //if RunInterface('GetPodaLN',11, 0, 1)=cmDefault
        if RunInterface('GP_GetPodaLN',12, Marker_KatPodr, 1,0)=cmDefault
        { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
          //CopyMarker(Marker_KatPodr,_PodrMArkerPointer);
          SetFilterNm(#Filtr_Katpodr);
          BitOnW(wFilter,5);
        }
      }
      //------------------------------
      #Filtr_KatpodrIns:
      { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
        //CopyMarker(_PodrMArkerPointer,Marker_KatPodrIns);
        if RunInterface('GP_GetPodaLN',12, Marker_KatPodrIns, 1,0)=cmDefault
        { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
          //CopyMarker(Marker_KatPodrIns,_PodrMArkerPointer);
          SetFilterNm(#Filtr_KatpodrIns);
        }
      }
      //------------------------------
      #Filtr_KPI_Raise:
      { KauMarkerName := 'GP_KPI_RaiseEdit';
        StoreMarker(Marker_KPI_Raise,KauMarkerName);
        if RunInterface(GP_KPI_RaiseEdit,cgiPickMult,0,if(wTypeDoc=100,0,wTypeDoc))<>cmCancel
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_KPI_Raise,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_KPI_Raise);
        }
      }
      //------------------------------
      #Filtr_Status:
      { var _cTypeDoc:comp=0;
        if wTypeDoc<>0
        { if GetFirst GP_TypeDocs where (( wTypeDoc == wType ))=tsok
            _cTypeDoc:=GP_TypeDocs.Nrec;

        }
        if _cTypeDoc=0
        { if GetFirst GP_TypeDocs =tsok
            _cTypeDoc:=GP_TypeDocs.Nrec;
        }
        if RunInterface(GP_Common::GP_StatusPickAndEdit,_cTypeDoc,cgiPickMult,pStatus_Flt,Marker_Status)<>cmCancel
        { SetFilterNm(#Filtr_Status);
          BitOnW(wFilter,4);
        }
      }
      end;
      if IsProtect
      { Abort;
        Exit;

      }
    }  //cmPick

    //----------------------
    cmDelOnProtect:
    { if  inherited :: handleEvent (cmDelOnProtect)=heAbort then Abort;
      Case Curfield of
      //------------------------------
      #GP_KPI_Raise_KV.Name,#GP_KPI_Raise_KV.Code:
      { set GP_KPI_Doc.HARRCOMP[5]:=0;
      }
      //------------------------------
      #GP_KPI_Raise_YP.Name,#GP_KPI_Raise_YP.Code:
      { set GP_KPI_Doc.HARRCOMP[6]:=0;
      }
      //------------------------------
      #Filtr_TypeDocs:
      { ClearMarker(Marker_TypeDocs);
        BitOffW(wFilter,3);
        SetFilterNm(#Filtr_TypeDocs);
      }
      //------------------------------
      #Filtr_CatRaise:
      { ClearMarker(Marker_CatRaise);
        BitOffW(wFilter,6);
        SetFilterNm(#Filtr_CatRaise);
      }
      //------------------------------
      #Filtr_Status:
      { ClearMarker(Marker_Status);
        BitOffW(wFilter,4);
        SetFilterNm(#Filtr_Status);
      }
      //------------------------------
      #Filtr_Katpodr:
      { ClearMarker(Marker_Katpodr);
        BitOffW(wFilter,5);
        SetFilterNm(#Filtr_Katpodr);
      }
      //------------------------------
      #Filtr_KatpodrIns:
      { ClearMarker(Marker_KatpodrIns);
        SetFilterNm(#Filtr_KatpodrIns);
      }
      //------------------------------
      #Filtr_KPI_RAISE:
      { ClearMarker(Marker_KPI_RAISE);
        SetFilterNm(#Filtr_KPI_RAISE);
      }
      end;
    }
    cmValue3: //Копирование записи
    { if isProtect
      { Message('В этом режиме копирование запрещено');
        Exit

      }
    }
    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Doc: RunInterface('ExClassifier', coGP_KPI_Doc, GP_KPI_Doc.nRec);
      end;
    }
    //--------------------------
    cmFilterSave:
    { UpdateTable;

      if RunWindowModal(wnFilter)=cmDefault
      { SetFilterBounds(0);
      }
      else RestFromA

    }


    //--------------------------
    cmPickAttr:// внешние атрибуты
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Doc: RunInterface('Attribute', coGP_KPI_Doc, GP_KPI_Doc.nRec);
      end;
    }
    //--------------------------
    cmManagerID:
    { timelog('GP_KPI_Doc_RaiseEdit->cmManageID');
      if ( RunInterface(GP_VisibleHidden, cfsGetCurrentContainerSelf
                                   , GetInterfaceComponentName
                                   , #(__InterfaceName__)
                                   , 'brDocRaise') = cmDefault )
      {
        ReScanPanel(#GP_KPI_DOC);
      }
    }
    //--------------------------
    cmHotKeys:
    { timelog('GP_KPI_Doc_RaiseEdit->cmHotKeys main 001 start');
      MyHotKey(True);
      timelog('GP_KPI_Doc_RaiseEdit->cmHotKeys main 002 finish');
      exit;
    }
    cmValue2://Печать ведомостей
    { timelog('GP_KPI_Raise->cmPrintDoc');
      iKPIReport.pDoc := GP_KPI_Doc.Nrec;
      RunLoadMenu(iKPIReport.GetMenu(''));
      //ProcessCommand(iKPIReport.GetMenu(''));
    }
    cmPrintDoc://Печать ведомостей
    { // Поскольку в функции обработки нe знаем про pMarker и tbRmGP_KPI_Doc1, то набьем здесь
      timelog('GP_KPI_Doc_RaiseEdit->cmPrintDoc main 001 start');
      Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
      if pMarker.Count>0
      { SubBounds(tbRmGP_KPI_Doc1);
        AddBounds(tbRmGP_KPI_Doc2);
        _Loop pMarker
        { InsertMarker(Marker_Tmp,pMarker.pNRec )
        }
        SubBounds(tbRmGP_KPI_Doc2);
        AddBounds(tbRmGP_KPI_Doc1);
        PrintDocument(true);
      }
      else PrintDocument(false);
      timelog('GP_KPI_Doc_RaiseEdit->cmPrintDoc main 001 finish');
      DoneMarker(Marker_Tmp,'');
      ReReadRecord(#GP_KPI_Doc);
      PositionChanged;
      Stop;
    }
    cmValue10://Рассчитать ведомости
    { // Поскольку в функции обработки нe знаем про pMarker и tbRmGP_KPI_Doc1, то набьем здесь
      Marker_Tmp  :=InitMarker('', 8, 50, 10, True);
      if pMarker.Count>0
      { SubBounds(tbRmGP_KPI_Doc1);
        AddBounds(tbRmGP_KPI_Doc2);
        _Loop pMarker
        { InsertMarker(Marker_Tmp,pMarker.pNRec )
        }
        SubBounds(tbRmGP_KPI_Doc2);
        AddBounds(tbRmGP_KPI_Doc1);
      }
      CalculateDoc(true);
      DoneMarker(Marker_Tmp,'');
      ReReadRecord(#GP_KPI_Doc);
      PositionChanged;
    }

    cmValue11://Рассчитать ведомость
    { CalculateDoc(false);
      ReReadRecord(#GP_KPI_Doc);
      PositionChanged;
    }
    cmValue13://Передача в зарплату
    { // Поскольку в функции обработки нe знаем про pMarker и tbRmGP_KPI_Doc1, то набьем здесь
     if not UserAccessService.IsAdmin
       {
         Message('Только пользователь с ролью администратор может передавать ведомости в ЗП', error)
       }
      else
      {
          if pMarker.Count>0
          { if message('Экспортировать в зарплату '+string(pMarker.Count)+' ведомостей?', YesNo )=cmYes
            { PushPos(#GP_KPI_DOC);
              Init_Zar;
              StartNewVisual(vtIndicatorVisual, vfTimer+ vfThread , 'Экспорт в зарплату', 0);

              SubBounds(tbRmGP_KPI_Doc1);
              AddBounds(tbRmGP_KPI_Doc2);
              timelog(' Экспорт в зарплату  ' );

              _Loop pMarker
              { //InsertMarker(Marker_Tmp,pMarker.pNRec )
                if not NextVisual then break;
                if getfirst GP_KPI_DOC where (( pMarker.pNRec == GP_KPI_DOC.Nrec )) <>tsok then continue;
                timelog(' GP_KPI_DOC.Nrec ='+string(GP_KPI_DOC.Nrec,0,0)+', '+GP_KPI_DOC.DocNumber );
                if GP_KPI_DOC.wMonth<>MonthRas
                or GP_KPI_DOC.wYear <>YearRas
                { displ('Месяц и год документа'+GP_KPI_DOC.DocNumber+' не совпадает'
                    +' с расчетным периодом в ЗП '+string(MonthRas)+'/'+string(YearRas) );
                  continue;
                }
                if Gp_Status.name<>'утвержден'
                { Displ('Документ '+GP_KPI_DOC.DocNumber+' должен быть в статусе "утвержден"');
                  continue;
                }
                // Нужно проининициализировать
                iGP_KPI_Doc_RaiseEdit_Sp.InitParam(wIntMode
                  or if(not CanEditTbl,cgiNotEdit,0)
                  or if(UserAccessService.IsAdmin,cgiSingleEdit,0)
                 ,GP_KPI_Doc.Nrec,0,0);
                if not iGP_KPI_Doc_RaiseEdit_Sp.Make_Zar_Ved(1)
                { displ(' экспорт прерван');
                  break
                }
                else
                {

                }
              } //_Loop pMarker
              SubBounds(tbRmGP_KPI_Doc2);
              AddBounds(tbRmGP_KPI_Doc1);
              PopPos(#GP_KPI_DOC);
              PositionChanged;

              if VisualizationActive
                StopVisual('',0);
              if VisualizationActive
                 StopVisual('',0);
              ShowErrors;
            } //if message('Экспортировать в зарплату '+string(pMarker.Count)+' ведомостей?', YesNo )=cmYes
          } //if pMarker.Count>0
          else
          { Make_Zar_Ved;
          } //else if pMarker.Count>0
      }
      //----------------------
      ReReadRecord(#GP_KPI_Doc);
    } //cmValue13
    cmValue14: // расчет резерва
    {
    }
  end;
end.

GP_KPI_DocEdit_Raise_ZP Menu
{
- 'Передать в зарплату'     , cmValue13  , 'Передать в зарплату',  ,'',,sci1Esc;
}
