/* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |24/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_UserAccessService.vih
#include GP_Status.vih

#include GP_StatusAccessEdit.vih
interface GP_StatusAccessEdit 'Настройки доступа к документам', Gray;
show(20,5,120,25);

var cCurRoleGroup,cCurTypeDoc:comp;
    UserAccessService:GP_UserAccessService NoAuto;
    Status:GP_Status;

create view
from
  GP_Status,
  GP_StatusRoles,GP_Roles,
  GP_StatusChange,GP_Status StatusNew,
  GP_StatusChangeRoles,GP_Roles RolesStatusChange,
  GP_Status GP_Status2,GP_Roles GP_Roles2,GP_StatusRoles GP_StatusRoles2,
  GP_StatusChange GP_StatusChange2,GP_StatusChangeRoles GP_StatusChangeRoles2
where((
  cCurTypeDoc==GP_Status.cTypeDoc and
  GP_Status.NRec==GP_StatusRoles.cStatus and
  GP_StatusRoles.cRole==GP_Roles.NRec and

  GP_Status.NRec==GP_StatusChange.cStatusFrom and
  GP_StatusChange.cStatusTo==StatusNew.NRec and
  GP_StatusChange.NRec==GP_StatusChangeRoles.cStatusChange and
  GP_StatusChangeRoles.cRole==RolesStatusChange.NRec
));

browse brStatus (,,sci14Esc);
show(,,,10);
table GP_Status;
fields
  {font={Bold=GP_Status.IsDefault}};
  GP_Status.Code 'Код':[5], Protect,NoAutoSize;
  GP_Status.Name 'Наименование статуса':[40], Protect;
  [IsDefaultStatus] if(GP_Status.IsDefault,'Да','Нет')
    'По умол.' ('Статус по умолчанию',,sci134Esc):[8],Protect,NoAutoSize,PickButton;
end;

TabbedSheet bottom tabStatusAccessEdit;
show(,11,,);

FormatsGroup fgAccess 'Настройка доступа';
browse brRoles (,,sci178Esc);
show(,11,75,);
table GP_StatusRoles;
fields
  GP_Roles.Name 'Наименование роли' ('Наименование роли',,):[30],Protect,NoDel;
end;

screen scAccess (,,sci1Esc);
show(76,11,,);
table GP_StatusRoles;
fields
  GP_StatusRoles.Access ('Доступ',,):NoProtect;
<<
 `Доступ`
 [.] Просмотр`
 [.] Редактирование`
 [.] Добавление`
 [.] Удаление`
 [.] Только свои документы`
>>
end;
end;

FormatsGroup fgStatusChange 'Настройка изменений статуса';
browse brStatusChange (,,sci178Esc);
show(,11,55,);
table GP_StatusChange;
fields
  GP_StatusChange.Code 'Код' ('Код',,):[5],NoProtect;
  StatusNew.Name 'В статус':[40],Protect,NoDel;
end;

browse brStatusChangeRoles (,,sci178Esc);
show(56,11,,);
table GP_StatusChangeRoles;
fields
  RolesStatusChange.Name 'Доступно ролям' ('Наименование роли',,):[30],Protect,NoDel;
end;
end;
end;

TableEvent table GP_Status;
cmPositionChanged:{
  ClusterDisabledField(#GP_StatusRoles.Access,if(GP_Status.IsDefault,0,100b));//Добавление доступно только в статусе по умолчанию
}
end;

TableEvent table GP_StatusRoles;
cmCheckField:{
  if (GP_StatusRoles.Access>1) //Любое редактирование предполагает и Просмотр
    set GP_StatusRoles.Access:=GP_StatusRoles.Access or 1b;

  if ((GP_StatusRoles.Access and 100b)<>0) //Добавление предполагает Редактирование
    set GP_StatusRoles.Access:=GP_StatusRoles.Access or 10b;
}
cmUpdateRecord:{
  update current GP_StatusRoles;
}
cmDeleteRecord:{
  delete current GP_StatusRoles;
}
end;

TableEvent table GP_StatusChange;
cmUpdateRecord:{
  update current GP_StatusChange;
}
cmDeleteRecord:{
  if (delete GP_StatusChangeRoles where((GP_StatusChange.NRec==GP_StatusChangeRoles.cStatusChange))=tsok)
    delete current GP_StatusChange;
}
end;

TableEvent table GP_StatusChangeRoles;
cmDeleteRecord:{
  delete current GP_StatusChangeRoles;
}
end;


HandleEvent
cmPick:{
  case CurField of
    #IsDefaultStatus:{
      if (not GP_Status.IsDefault)
        if (Status.SetDefault(GP_Status.NRec))
          ReReadRecord(tnGP_Status);
    }
  end;
}
cmInsert:{
  if (not IsValidAll(tnGP_Status)) exit;

  var m:longint;
  if (CurTable=tnGP_StatusRoles) {
    m:=InitMarker('',8,0,1);
    if (RunInterface(GP_PickRoles,cCurRoleGroup,m)=cmDefault) {
      _loop GP_Roles2
      where((
        cCurRoleGroup==GP_Roles2.cRoleGroup and GP_Status.Nrec==GP_StatusRoles2.cStatus
        and GP_Roles2.NRec==GP_StatusRoles2.cRole
      )) {
        if (not FoundMarker(m,GP_Roles2.NRec)) continue;
        if (IsValidAll(tnGP_StatusRoles2)) continue;

        ClearBuffer(tnGP_StatusRoles);
        GP_StatusRoles.cRole:=GP_Roles2.NRec;
        GP_StatusRoles.cStatus:=GP_Status.Nrec;
        GP_StatusRoles.Access:=1;
        if (insert current GP_StatusRoles <> tsok) {
          message('Ошибка вставки записи в таблицу GP_StatusRoles!',error);
          break;
        }
      }
      ReReadRecord(tnGP_StatusRoles);
    }
    DoneMarker(m,'');
  } else if (CurTable=tnGP_StatusChange) {
    m:=InitMarker('',8,0,1);
    if (RunInterface(GP_StatusPickAndEdit,cCurTypeDoc,cgiPickMult,0,m)=cmDefault) {
      _loop GP_Status2
      where((
        cCurTypeDoc==GP_Status2.cTypeDoc and GP_Status2.Nrec==GP_StatusChange2.cStatusTo
        and GP_Status.NRec==GP_StatusChange2.cStatusFrom
      )) {
        if (GP_Status.NRec=GP_Status2.NRec) continue;
        if (not FoundMarker(m,GP_Status2.NRec)) continue;
        if (IsValidAll(tnGP_StatusChange2)) continue;

        ClearBuffer(tnGP_StatusChange);
        GP_StatusChange.cStatusFrom:=GP_Status.NRec;
        GP_StatusChange.cStatusTo:=GP_Status2.Nrec;
        if ((getlast GP_StatusChange2 where((GP_Status.NRec==GP_StatusChange2.cStatusFrom)) ordered by GP_StatusChange2.Code)=tsok)
          GP_StatusChange.Code:=NextNumStr(GP_StatusChange2.Code)
        else
          GP_StatusChange.Code:='01';
        if (insert current GP_StatusChange <> tsok) {
          message('Ошибка вставки записи в таблицу GP_StatusChange!',error);
          break;
        }
      }
      ReReadRecord(tnGP_StatusChange);
    }
    DoneMarker(m,'');
  } else if (CurTable=tnGP_StatusChangeRoles) {
    if (not IsValidAll(tnGP_StatusChange)) exit;

    m:=InitMarker('',8,0,1);
    if (RunInterface(GP_PickRoles,cCurRoleGroup,m)=cmDefault) {
      _loop GP_Roles2
      where((
        cCurRoleGroup==GP_Roles2.cRoleGroup and GP_StatusChange.Nrec==GP_StatusChangeRoles2.cStatusChange
        and GP_Roles2.NRec==GP_StatusChangeRoles2.cRole
      )) {
        if (not FoundMarker(m,GP_Roles2.NRec)) continue;
        if (IsValidAll(tnGP_StatusChangeRoles2)) continue;

        ClearBuffer(tnGP_StatusChangeRoles);
        GP_StatusChangeRoles.cRole:=GP_Roles2.NRec;
        GP_StatusChangeRoles.cStatusChange:=GP_StatusChange.Nrec;
        if (insert current GP_StatusChangeRoles <> tsok) {
          message('Ошибка вставки записи в таблицу GP_StatusChangeRoles!',error);
          break;
        }
      }
      ReReadRecord(tnGP_StatusChangeRoles);
    }
    DoneMarker(m,'');
  }

  stop;
}
cmEdit:{
  RunInterface(GP_StatusPickAndEdit,cCurTypeDoc,cgiMultiEdit,GP_Status.Nrec,0);
  ReReadRecord(tnGP_Status);
}
cmHotKeys:{
  if (brRoles=GetCurrentFormat or brStatusChangeRoles=GetCurrentFormat)
    PutContextMenuCommand('GP_StatusAccessEdit_HotKeys');
}
cmValue1:{//Перейти к роли
  if (brRoles=GetCurrentFormat) {
    if (IsValidAll(tnGP_StatusRoles))
      GoToRole(GP_StatusRoles.cRole);
  } else if (brStatusChangeRoles=GetCurrentFormat) {
    if (IsValidAll(tnGP_StatusChangeRoles))
      GoToRole(GP_StatusChangeRoles.cRole);
  }
}
end;

constructor Init;
{
  result:=false;
}

constructor InitForRoleGroupAndTypeDoc(cRoleGroup,cTypeDoc:comp);
{
  cCurRoleGroup:=cRoleGroup;
  cCurTypeDoc:=cTypeDoc;
  result:=cCurRoleGroup<>0 and cCurTypeDoc<>0;

  if (result)
    Status.TypeDoc:=cCurTypeDoc;
}

procedure SelectStatus(cStatus:comp);
{
  if (getfirst GP_Status where((cStatus==GP_Status.NRec))=tsok)
    ReReadRecord(tnGP_Status);
}

end.

GP_StatusAccessEdit_HotKeys Menu
{
- '~П~ерейти к роли', cmValue1, 'Перейти в представление по ролям', , , , sci1Esc,,;
}
