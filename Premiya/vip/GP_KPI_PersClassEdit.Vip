/*************************************************************************************************\
* Наименование:  КПИ Премия за классность                                                         *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#1971         |01/03/18|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#816          |09/01/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию
#include FRRecordDefinition.vih
#include ChoiseYourPersons.vih
#include CatFunc.Vih
#include GetKau.Vih
//---------------------------------
#include CLSFUNCS.VIH // ф-ии пересканирования текущих л/с
//---------------------------------

#include GP_Protector.Vih
#include GP_UserAccessService.vih
#include GP_GetFIOPostByPeriod.Vih

#include GP_KPI_PersEdit.Vih
#include GP_KPI_PersClassEdit.Vih
#doc
#1971 КПИ Премия за классность
<p>#816 Закрепление за должностями
#end
//------------------------------------
Interface GP_KPI_PersClassEdit 'Премия за классность' , EscClose;
//------------------------------------
Show At (,,70,20) ;
//------------------------------------
// декларация сложного фильтра
//------------------------------------
function isFilterAnCorrect(ww_nrec:comp): boolean; forward;
//------------------------------------
// Запуск окна редактирования
//------------------------------------
Procedure RunEdit;forward;
//------------------------------------
#include GetKau.var
var
//------------------------------------
  wIntMode:word; // тип запуска
  wTypeOpl:word; // тип 1 - премия за классность
                 // тип 10001 - закрепление за ЗГД водителей
                 // тип 10002 - закрепление за ЗГД секретарей
  cRec    :Comp; // ссылка на группу
  pPersons:Comp; // тип документа
  isOpenSearch:boolean; //признак запуска быстрого выбора
  isProtect,isProtect2 :boolean; //защищенный выбор
  DataProtector : IGP_Protector2;//защита полей от модификации
  UserAccessService:GP_UserAccessService NoAuto;
  pMarker:IMarker(Marker) new;
  viCYPersons         : ChoiseYourPersons;
  iCatFunc            : CatalogsFunctions;   // Переменная типа интерфейс CatalogsFunctions
  //-- пометка подразделения
  CLSF: CurLSFunctions;
  DA: IDepartmentAvailability(CurLSFunctions);
  _PodrMArkerPointer        : Longint; // сам маркер по подразделениям
  isPodrShare               : boolean;
  //-------------------------------------
  RoleGroupName    :string;
  MarkerTmp        :Longint;
  pTmp             :comp;
  DTB,DTE          :date;//для фильтра по сроку действия
  sUserName        :string;//= UserName()
  App_Entry        :word; //0 - основное, 3 - совмещение
  DT_Ras           :date;//Дата отчетного периода
//-----------------------------------------
// Фильтры
//-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
   isFilterRun  :boolean;
   wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :longint;

   #mrkfld_(Persons)
   #mrkfld_(CatRaise)
   #mrkfld_(Katpodr)

Create View
var
 pCatRaise:comp;//для фильтра по типу доплаты
 pDepartment:comp;//для проверки прав по зарплате
 wVidopl :word;
as select GP_KPI_Pers_Class.Nrec
From
  GP_KPI_Pers_Class(GP_Pers_Class05)
//, GP_KPI_Pers_Class GP_KPI_Pers_Class_F//для поисков
, Catalogs CatRaise
//-------------- #816
, Persons      Link_Persons
, StaffStruct  Link_StaffStruct
, Catalogs     Link_CatDep
, Appointments Link_APP
//------- фильтры
 , Persons     Persons_Flt
 , Catalogs    CatRaise_Flt
 , Katpodr     Katpodr_Flt
where
((  wVidopl                    == GP_KPI_Pers_Class.Vidopl
//and GP_KPI_Pers_Class.cDoplata == CatRaise.Nrec
and pCatRaise                  == CatRaise.Nrec
and GP_KPI_Pers_Class.cPersons == Persons.Nrec
and GP_KPI_Pers_Class.cAppoint == Appointments.Nrec
and GP_KPI_Pers_Class.cTitleDoc== TitleDoc.Nrec
and GP_KPI_Pers_Class.cContDoc == ContDoc.Nrec
// Доплаты по тарифной сетке
and Appointments.TARIFF         == GP_TarStavExt.cTarStav
//-- Доплаты по штатному расписанию
and Appointments.StaffStr == GP_KPI_Raise_Sts_SP.cStaffStruct
and   GP_KPI_Pers_Class.FromDate>>=GP_KPI_Raise_STS_SP.DataN(noindex)
and  ( GP_KPI_Raise_STS_SP.DatOk=ZeroDate
  or (GP_KPI_Pers_Class.FromDate<=GP_KPI_Raise_STS_SP.DatOk and Appointments.AppointDate<=GP_KPI_Raise_STS_SP.Datok)
 )
//-------------- #816
and GP_KPI_Pers_Class.cLink_Pers  == Link_Persons.Nrec
and GP_KPI_Pers_Class.cLink_Staff == Link_StaffStruct.Nrec
and GP_KPI_Pers_Class.cLink_App   == Link_APP.Nrec
//and Link_StaffStruct.Department   == Link_CatDep.Nrec
and Link_App.Department           == Link_CatDep.Nrec
//------- фильтры
and wc_nrec == Persons_Flt.Nrec
and wc_nrec == CatRaise_Flt.Nrec
and wc_nrec == Katpodr_Flt.Nrec
//--------------
and 11               == extcatlinks.objtype
and 1                == extcatlinks.modtype
and pDepartMent      == extcatlinks.staffcat //extcatlinks.extcat

and sUserName          ==  Zar_User.OwnName

))
Bounds byPeriod  DTE>>= GP_KPI_Pers_Class.FromDate(NoIndex)
     and (DTB=ZeroDate or GP_KPI_Pers_Class.ToDate>=DTB or GP_KPI_Pers_Class.ToDate=ZeroDate )
  ordered by TableOrder
Bounds byPersons  pPersons == GP_KPI_Pers_Class.cPersons(noindex) ordered by TableOrder
//Bounds byCatRaise pCatRaise == GP_KPI_Pers_Class.cDoplata(noindex) ordered by TableOrder
condition FilterAn = // использование сложного фильтра
  (isFilterAnCorrect(GP_KPI_Pers_Class.Nrec))

;
Parameters
  wIntMode
#doc

#end
,  wTypeOpl
#doc
 тип 1     - премия за классность
 тип 10001 - закрепление за ЗГД водителей
 тип 10002 - закрепление за ЗГД секретарей
#end
, cRec
#doc
 возвращаемый параметр
#end
, pPersons
#doc
 фильтрация по человеку
#end
;



//******************************************************************************
// Функции
//******************************************************************************
  //------------------------------------
  // Наименование интерфейса
  //------------------------------------
  Function GetInterfaceName:string;
  { Result:=#(__InterfaceName__);
  }
  //------------------------------------
  // сохранить параметры
  //------------------------------------
  Procedure SaveParam;
  { SaveMyDsk(wFilter  ,GetInterfaceName+'_wFilter');
    SaveMyDsk(DTB      ,GetInterfaceName+'_DTB');
    SaveMyDsk(DTE      ,GetInterfaceName+'_DTE');
    //-----------------------
    DoneMarker(Marker_Persons_A , '' );
    DoneMarker(Marker_CatRaise_A, '' );
    DoneMarker(Marker_Katpodr_A, '' );
    //-----------------------
    DoneMarker(Marker_Persons , GetInterfaceName+'_Persons' );
    DoneMarker(Marker_CatRaise, GetInterfaceName+'_CatRaise');
    DoneMarker(Marker_Katpodr , GetInterfaceName+'_KatPodr' );
  } //Procedure SaveParam;

  //------------------------------------
  // восстановить параметры
  //------------------------------------
  Procedure ReadParam;
  { if not ReadMyDsk(wFilter,GetInterfaceName+'_wFilter',false) wFilter:=0;
    if not ReadMyDsk(DTB    ,GetInterfaceName+'_DTB'    ,false) DTB:=ZeroDate;
    if not ReadMyDsk(DTE    ,GetInterfaceName+'_DTE'    ,false) DTE:=ZeroDate;

    Marker_Persons   :=InitMarker(GetInterfaceName+'_Persons'  , 8, 50, 10, True);
    Marker_CatRaise  :=InitMarker(GetInterfaceName+'_CatRaise' , 8, 50, 10, True);
    Marker_KatPodr   :=InitMarker(GetInterfaceName+'_KatPodr' , 8, 50, 10, True);

    Marker_Persons_A  :=InitMarker('' , 8, 50, 10, True);
    Marker_CatRaise_A :=InitMarker('' , 8, 50, 10, True);
    Marker_KatPodr_A  :=InitMarker('' , 8, 50, 10, True);

  } //  Procedure ReadParam;

//------------------------------------
// Включено разграничение доступа
//------------------------------------
Function GetPodrShare :boolean;
{ Result:= ZAR_USER.PODRSHARE = '+'
}//Function PodrShare :boolean;


//------------------------------------
// Доступность подразделения по зарплатным правам.
//------------------------------------
Function GetKatpodrNrec(_pDepartment:comp) :comp; cacheable;
{ Result:=0;
  pDepartment:=_pDepartment;
  if getfirst extcatlinks<>tsok then exit;
    Result:=extcatlinks.extcat
}
Function EnablePodr(_pDepartment:comp) :boolean; cacheable;
var _cPodr:comp;
{ Result:=true;
  _cPodr:=GetKatpodrNrec(_pDepartment);
  Result:=DA.IsAvailable(_cPodr);
} //Function AVaiblePodr(_cPodr:comp) :comp; cacheable;


  //------------------------------------
  // декларация сложного фильтра
  //------------------------------------
  function isFilterAnCorrect(ww_nrec:comp): boolean; cacheable;
  { #__UNUSED__(ww_nrec)
    Result:=true;
    if isPodrShare or IsBitCTW(wFilter,3)
    { pDepartment:=0;
      if GP_KPI_Pers_Class.cAppoint>0
      { pDepartment:=AppointMents.Department
      }
      else
      if GP_KPI_Pers_Class.cPersons>0
      { pDepartment:=Persons.Department
      }
      if IsBitCTW(wFilter,3)
      { var _pPodr:comp=GetKatpodrNrec(pDepartment);
        if _pPodr>0
        If not FoundMarker(Marker_Katpodr_A,_pPodr)
        { Result:=false;
          Exit;
        }
      }
      if isPodrShare
      { if not EnablePodr(pDepartment) then
        { Result:=false;
          exit;
        }
      }
    }
    if IsBitCTW(wFilter,2)
    { if Count_Persons>1
      { If not FoundMarker(Marker_Persons_A,GP_KPI_Pers_Class.cPersons)
        { Result:=false;
          Exit;
        }
      }
    }

  }//function isFilterAnCorrect(ww_nrec:comp): boolean;

    //-------------------------------------------
  // скопировать фильтры в данные для отборв
  //-------------------------------------------
  Procedure CopyToA;
  { CopyMarker(Marker_Persons_A  ,Marker_Persons);
    CopyMarker(Marker_Katpodr_A  ,Marker_KatPodr);
  } //Procedure CopyToA;

  //-------------------------------------------
  // восстановить данные для задания фильтрации
  // из данных для отбора
  //-------------------------------------------
  Procedure RestFromA;
  { CopyMarker(Marker_Persons  ,Marker_Persons_A );
    CopyMarker(Marker_CatRaise ,Marker_CatRaise_A);
    CopyMarker(Marker_Katpodr  ,Marker_KatPodr_A);
  } //Procedure RestFromA;

  //-------------------------------------------
  #doc
    Установить ограничения
  #end
  Function SetFilterBounds(_IsArch:word) : boolean;
  { #__UNUSED__(_IsArch)
    Result:=false;
    isFilterRun:=True;
    if ConditionActiveInLeave(tcFilterAn, #GP_KPI_Pers_Class)
    { PopConditionForLeave(tcFilterAn, #GP_KPI_Pers_Class);
    }
    If BoundActive(tbByPeriod  ) SubBounds(tbByPeriod  );
    If BoundActive(tbByPersons) SubBounds(tbByPersons);
    //-----------------------
    CopyToA;
    //-----------------------
    ClearFuncCache; // очистим кэш функций
    var need_FilterAn:boolean=false;
    if IsBitCTW(wFilter,1)
    {  AddBounds(tbByPeriod);
    }
    if IsBitCTW(wFilter,2)
    {  Count_Persons:=GetMarkerCount(Marker_Persons);
       GetMarker(Marker_Persons,0,pPersons);

       if Count_Persons=1
       { AddBounds(tbByPersons);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,3)
    {  Count_Katpodr:=GetMarkerCount(Marker_KatPodr);
       need_FilterAn:=true;
    }
    if isPodrShare need_FilterAn:=true;

    // использование сложного фильтра
    if need_FilterAn
    { PushConditionForLeave(tcFilterAn, #GP_KPI_Pers_Class);
    }
    ReReadRecord(#GP_KPI_Pers_Class);
    Result:=true;
    isFilterRun:=False;

  } //Function SetFilterBounds : boolean;

  //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_Persons
    { #mrkfiltr_(Persons_Flt,Persons,Nrec,wc_nrec,Persons_Flt.Fio)
    }
    if _Field=0 or _Field=#Filtr_CatRaise
    { #mrkfiltr_(CatRaise_Flt,CatRaise,Nrec,wc_nrec,CatRaise_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_Katpodr
    { #mrkfiltr_(Katpodr_Flt,Katpodr,Nrec,wc_nrec,Katpodr_Flt.Name)
    }
    ReScanPanel(#Persons_Flt);
  } //Procedure SetFilterNM(_Field:longint)


  //---------------------------------------
  // Установка режима редактирования
  //---------------------------------------
procedure SetEditMode(Value: boolean);
{
  DataProtector.SetProtected(not Value);

  if Value
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpBlueWindow);
  else
  { cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpCyanWindow);
    cfsSetProp('cb_SCRFILTER_wFilter',cfpProtect,False);
    cfsSetProp('cb_SCRFILTER_DTB'    ,cfpProtect,False);
    cfsSetProp('cb_SCRFILTER_DTE'    ,cfpProtect,False);
    cfsSetProp('cb_SCRFILTER_Filtr_Persons'      ,cfpButtonType,inPickButton);
    cfsSetProp('cb_SCRFILTER_Filtr_CatRaise'     ,cfpButtonType,inPickButton);
    cfsSetProp('cb_SCRFILTER_Filtr_KatPodr'      ,cfpButtonType,inPickButton);
  }
  isProtect:=not Value;

} //Procedure SetEditMode(_isEdit:boolean);


  //---------------------------------------
  // получить тип назначения
  //---------------------------------------
Function GetAppoint_Type(_LPrizn:word):string;
{ Result:='-';
  Case _LPrizn of
  0: Result:='Основное';
  3: Result:='Внутреннее Совместительство';
  end;
} //Function GetAppoint_Type(_LPrizn:word):string;


//---------------------------------------
// получить тип Доплаты
//---------------------------------------
Procedure InitDoplata(_wTypeOpl:word);
{ Timelog(GetInterfaceName+'->InitDoplata:_wTypeOpl='+string(_wTypeOpl));
  case _wTypeOpl of
  1:
  { wVidopl:=38;
    pCatRaise:=coGetTune('NPOEM_OWN.Raise.Raise_Class');
    if getfirst CatRaise=tsok
    // set iVidOpl := longint(Substr(Catalogs.CatData, 1, 5));
     set wVidOpl := longint(Substr(CatRaise.CatData, 1, 5));
    Timelog(GetInterfaceName+'->InitDoplata:pCatRaise='+string(pCatRaise)+',wVidopl='+string(wVidOpl));
  }
  10001: // водители
  { wVidopl:=10001;
  }
  10002: // секретари
  { wVidopl:=10002;
  }
  end;
} //Procedure InitDoplata(_wTypeOpl:word);

//---------------------------------------
// получить плановый процент
//---------------------------------------
Function GetPlanProcent:double;
var jj:word;
{ Result:=0;
  if getlast GP_TarStavExt<>tsok then exit;
  for(jj:=1;jj<=3;jj++)
  { if GP_TarStavExt.MonthlyBonus[jj]>0
    { if GP_TarStavExt.cMonthlyBonusType[jj]=pCatRaise
      {  Result:=GP_TarStavExt.MonthlyBonus[jj];
      }
    }
  } //for(jj:=1;jj<=3;jj++)
  if Result=0
  if GP_TarStavExt.QuarterlyBonus>0
  { if GP_TarStavExt.cQuarterlyBonusType=pCatRaise
    { Result:=GP_TarStavExt.QuarterlyBonus;
    }
  } //if GP_TarStavExt.QuarterlyBonus>0
  if Result=0
  if GP_TarStavExt.AnnualBonus>0
  { if GP_TarStavExt.cAnnualBonusType=pCatRaise
    { Result:=GP_TarStavExt.AnnualBonus;
    }
  } //if GP_TarStavExt.QuarterlyBonus>0

} //Function GetPlanProcent:double;

//========================================================
// Визуальная часть
//========================================================
Window wnFilter 'Установите фильтры'  Cyan, EscClose;
  Show at (,,50,10);
Screen scrFilter 'Фильтры' ('Фильтры',,sci13Esc);
Table Persons_Flt;
Fields
  wFilter :NoProtect;
  DTB : NoProtect;
  DTE : NoProtect;
  Filtr_Persons  : PickButton,Protect;
  Filtr_Katpodr  : PickButton,Protect;
Buttons
  cmOk    ,,, 'продолжить выполнение', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Фильтр по`
 [.] Периоду`       с .@@@@@@@@@@ по .@@@@@@@@@@
 [.] Сотруднику`    .@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Подразделению` .@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }

}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnFilter,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;


Window wnGetApp_Entry 'Выберите тип назначения'  Cyan, EscClose;
  Show at (,,50,5);
Screen scrApp_Entry 'Фильтры' ('Фильтры',,sci13Esc);
Table Persons_Flt;
Fields
  App_Entry : [List 0 'Основное',3 'Внутреннее Совместительство'], Protect;
Buttons
  cmOk    ,,, 'продолжить выполнение', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<

  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }

}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnGetApp_Entry,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;


//****************************************************
Window wnPersEdit 'Редактирование записи о премии' ;
Show at (5,3,70,13);
//---------------------------------------------
Screen ScrPersonsEdit (,,Sci178Esc);
Table GP_KPI_Pers_Class;
Fields
  //Persons.Fio :
  GP_KPI_Pers_Class.Fio :Protect,PickButton,NoDel;
  GP_KPI_Pers_Class.FromDate :,NoProtect;
  GP_KPI_Pers_Class.ToDate   :NoProtect;
  GP_KPI_Pers_Class.Procent  :[10.2],NoProtect;
  [Status] if(GP_KPI_Pers_Class.ToDate=ZeroDate or GP_KPI_Pers_Class.ToDate>=DT_Ras
     ,'Активная','Архив') :Protect,Skip,NoStatic;
  GP_KPI_Pers_Class.DOCNUMBER('Номер приказа') :NoProtect,NoDel;
  GP_KPI_Pers_Class.DOCDate  ('Дата приказа') :NoProtect,NoDel;
  [Appoint_Type] GetAppoint_Type(Appointments.LPrizn) : Protect, PickButton, NoDel,
    {font={BackColor=if(not isvalid(#Appointments),ColorNeed,0)}};
  Appointments.AppointDate : Protect,PickButton,NoDel,
    {font={BackColor=if(not isvalid(#Appointments),ColorNeed,0)}};
  [Post]   iCatFunc.GetCatalogsName(Appointments.Post) : Protect, PickButton, NoDel;
  [DEPART] iCatFunc.GetCatalogsName(Appointments.Department) : Protect,NoPickButton, NoDel;
  [DEPART_Code] iCatFunc.GetCatalogsCode(Appointments.Department) : Protect,NoPickButton, NoDel;
<<
 `ФИО сотрудника`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Действует с`   .@@@@@@@@@@@ `по`.@@@@@@@@@@@
 `Процент`       .@@@@@@@@@@@ `Статус`  .@@@@@@@@@@@@@@
 `Номер приказа` .@@@@@@@@@@@ `Дата пр.`.@@@@@@@@@@@@@@
 `Вакансия`      .@@@@@@@@@@@ `Назначен`.@@@@@@@@@@@@@@
 `Должность`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразделение` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Код подразд.`  .@@@@@@@
>>
end;//Screen ScrPersEdit
//-----------------------------------
end;//Window wnRaiseEdit


//****************************************************
Window wnPersEdit10000 'Редактирование записи о связи с должностью' ;
Show at (5,3,70,20);
//---------------------------------------------
Screen ScrPersonsEdit10000 (,,Sci178Esc);
Table GP_KPI_Pers_Class;
Fields
  //Persons.Fio :
  GP_KPI_Pers_Class.Fio :Protect,PickButton,NoDel;
  GP_KPI_Pers_Class.FromDate :,NoProtect;
  GP_KPI_Pers_Class.ToDate   :NoProtect;
  GP_KPI_Pers_Class.Procent  :[10.2],NoProtect;
  Status// if(GP_KPI_Pers_Class.ToDate=ZeroDate or GP_KPI_Pers_Class.ToDate>=DT_Ras
        // ,'Активная','Архив')
     :Protect,Skip,NoStatic;
  Appoint_Type// GetAppoint_Type(Appointments.LPrizn) : Protect, PickButton, NoDel,
    {font={BackColor=if(not isvalid(#Appointments),ColorNeed,0)}};
  Appointments.AppointDate : Protect,PickButton,NoDel,
    {font={BackColor=if(not isvalid(#Appointments),ColorNeed,0)}};
  Post   //iCatFunc.GetCatalogsName(Appointments.Post)
       : Protect, PickButton, NoDel;
  DEPART //iCatFunc.GetCatalogsName(Appointments.Department)
       : Protect,NoPickButton, NoDel;
  DEPART_Code// iCatFunc.GetCatalogsCode(Appointments.Department)
       : Protect,NoPickButton, NoDel;
//---------------------
  Link_Persons.FIO      ('ФИО сотрудника, связанного с этим периодом'        ) : Protect,PickButton, NoDel;
  Link_CatDep.Code      ('Подразделение, связанного с этим периодом'         ) : Protect,PickButton, NoDel;
  Link_CatDep.Name      ('Подразделение, связанного с этим периодом'         ) : Protect,PickButton, NoDel;
  Link_APP.AppointDate  ('Дата назначения, связанного с этим периодом'       ) : Protect,PickButton, NoDel;
  Link_APP.DisMissDate  ('Дата ухода с должности, связанного с этим периодом') : Protect,PickButton, NoDel;
<<
 `Связь периода работы с должностью`
 `ФИО сотрудника`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Действует с`   .@@@@@@@@@@@ `по`.@@@@@@@@@@@
 `Процент`       .@@@@@@@@@@@ `Статус`  .@@@@@@@@@@@@@@
 `Вакансия`      .@@@@@@@@@@@ `Назначен`.@@@@@@@@@@@@@@
 `Должность`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразделение` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Код подразд.`  .@@@@@@@

 `Связан с`
 `ФИО ЗГД`       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Подразделение` .@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Назначен c`    .@@@@@@@@@@@ `по`.@@@@@@@@@@@
>>
end;//Screen ScrPersEdit
//-----------------------------------
end;//Window wnRaiseEdit10000


//****************************************************
Browse brPersRaise '' (,,sci1478Esc);
Table GP_KPI_Pers_Class;
recMarker=pMarker;
Fields
  GP_KPI_Pers_Class.Fio  'Фио' :[30], Protect,NoPickButton,NoDel;
  //CatRaise.Name 'Премия' :[30], Protect,NoPickButton,NoDel;
  GP_KPI_Pers_Class.FromDate 'c' :[10],Protect;
  GP_KPI_Pers_Class.ToDate  'По' :[10], Protect;
  GP_KPI_Pers_Class.Procent '%'  :[10.2],Protect;
  Status                    'Статус' :[10],Protect;
  GP_KPI_Pers_Class.DOCNUMBER 'Номер приказа' ('Номер приказа') :[12],Protect,NoDel;
  GP_KPI_Pers_Class.DOCDate   'Дата приказа'  ('Дата приказа')  :[12],Protect,NoDel;
  //GP_KPI_Pers_Class.Summa   'Сумма'  :[10.2,'\2p[|-]366`666`666`666`666.88'],Protect;
  Appointments.AppointDate 'Назначен с'  :[10], Protect,NoPickButton,NoDel;
  Appoint_Type 'Тип вакансии' :[10],  Protect, NoPickButton,NoDel;
  Post   'Должность' :[20], Protect,NoPickButton, NoDel;
  DEPART_Code 'Код подр.' ('Код подразделения') :[6], Protect,NoPickButton, NoDel;
  //DEPART 'Подразделения' :[20], Protect,NoPickButton, NoDel;
end;//Browse brGroupPers

//****************************************************
Browse brPersRaise10000 '' (,,sci1478Esc);
Table GP_KPI_Pers_Class;
recMarker=pMarker;
Fields
  GP_KPI_Pers_Class.Fio  'Фио' :[30], Protect,NoPickButton,NoDel;
  //CatRaise.Name 'Премия' :[30], Protect,NoPickButton,NoDel;
  GP_KPI_Pers_Class.FromDate 'c' :[10],Protect;
  GP_KPI_Pers_Class.ToDate  'По' :[10], Protect;
  GP_KPI_Pers_Class.Procent '%'  :[10.2],Protect;
  Status                    'Статус' :[10],Protect;
  //GP_KPI_Pers_Class.DOCNUMBER 'Номер приказа' ('Номер приказа') :[12],Protect,NoDel;
  //GP_KPI_Pers_Class.DOCDate   'Дата приказа'  ('Дата приказа')  :[12],Protect,NoDel;
  //GP_KPI_Pers_Class.Summa   'Сумма'  :[10.2,'\2p[|-]366`666`666`666`666.88'],Protect;
  Appointments.AppointDate 'Назначен с'  :[10], Protect,NoPickButton,NoDel;
  Appoint_Type 'Тип вакансии' :[10],  Protect, NoPickButton,NoDel;
  Post   'Должность' :[20], Protect,NoPickButton, NoDel;
  DEPART_Code 'Код подр.' ('Код подразделения') :[6], Protect,NoPickButton, NoDel;
  Link_Persons.FIO 'Связано с(ФИО)  '  ('ФИО сотрудника, связанного с этим периодом' ) :[26], Protect,NoPickButton, NoDel;
  Link_CatDep.Name 'Связано с(Подр.) ' ('Подразделение, связанного с этим периодом'  ) :[26], Protect,NoPickButton, NoDel;
  Link_CatDep.Code 'Код '              ('Подразделение, связанного с этим периодом'  ) :[10], Protect,NoPickButton, NoDel;
  Link_APP.AppointDate 'Назначен с '   ('Дата назначения, связанного с этим периодом') :[11], Protect,NoPickButton, NoDel;
  Link_APP.DisMissDate 'Назначен по '  ('Дата ухода с должности, связанного с этим периодом') :[11], Protect,NoPickButton, NoDel;
end;//Browse brPersRaise10000


//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table GP_KPI_Pers_Class ;
cmSetDefault:
{ if isProtect   exit;
  if isFilterRun exit;
  ClearBuffer(#GP_KPI_Pers_Class);
  if Count_Persons>0
  { set GP_KPI_Pers_Class.cPersons:=pPersons;
    GP_KPI_Pers_Class.Fio :=Persons.Fio;
  }
  GP_KPI_Pers_Class.cDoplata:=pCatRaise;
  GP_KPI_Pers_Class.Vidopl  :=wVidopl;
  if IsBitCTW(wFilter,1)
  { GP_KPI_Pers_Class.FromDate:=DTB;
    GP_KPI_Pers_Class.ToDate:=DTE;
  }
  set GP_KPI_Pers_Class.cPersons:=GP_KPI_Pers_Class.cPersons;
  isProtect:=False;
  RunEdit;
}
cmInsertRecord:
{
  Insert Current GP_KPI_Pers_Class;
}
cmUpdateRecord:
{ Update Current GP_KPI_Pers_Class;
}
cmDeleteRecord:
{ if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }

  delete Current GP_KPI_Pers_Class;
}
end; //TableEvent table GP_KPI_Pers_Class

//=======================
// Запустить  редактирование
Procedure RunEdit;
{ case wTypeOpl of
  10001,10002: RunWindowModal(wnPersEdit10000);
  else         RunWindowModal(wnPersEdit);
  end;
} //Procedure RunEdit;

//------------------------------------------------------------------------------
#doc
   Инициализация параметров интерфейса
#end
Function InitParam(
  _wIntMode  : word;  // режим запуска (cgiNo, cgiPick, ...) см.GLOCONST.INC
  _wTypeOpl  : word;  // тип запуска 1 - премия за классность
                      // тип 10001 - закрепление за ЗГД водителей
                      // тип 10002 - закрепление за ЗГД секретарей
  _cTopRec   : comp;  // ссылка на "Ведомость"
  _cGetRec   : comp=0;   // выбранная запись
  _Format    : longint=0; // включить определенные форматы
  _NoVisual  : boolean=false //не перерисовывать экраны
) : boolean;
{ #__UNUSED__(_wIntMode,_wTypeOpl,_cTopRec,_cGetRec,_Format,_NoVisual)
  Result:=false;
  Timelog(GetInterfaceName+'->InitParam:_wTypeOpl='+string(_wTypeOpl)+',_cTopRec='+string(_cTopRec));
  if wTypeOpl<>_wTypeOpl
  { InitDoplata(_wTypeOpl);
    wTypeOpl:=_wTypeOpl;
    case wTypeOpl of
    10001:
    { SetFormat(brPersRaise10000);
      SetTitle('Закрепление за ЗГД водителей');
    }
    10002:
    { SetFormat(brPersRaise10000);
      SetTitle('Закрепление за ЗГД секретарей');
    }
    else
    { SetTitle('Премия за классность');
      SetFormat(brPersRaise);

    }
    end;
  }
  wIntMode:=_wIntMode;
  if _cTopRec<>0
  { pPersons:=_cTopRec;
  }
  if (wIntMode and cgiPickMult)=cgiPickMult
  { DataProtector.ProtectedStatusCtx := sci1EscIns;
    pMarker.AutoSave := True;
    pMarker.LoadAuto := True;
    pMarker.StoreName := 'GP_KPI_PersEdit';
    pMarker.Caption   := (' Отмечено [%d] ');
  }
  else  pMarker.Disable:=true;
  if wIntMode<>0
  { SetEditMode(false)
  }
  else
  { SetEditMode(True)
  }
   //----------------------------
   // включим принудительно фильтр по по типам документов
   if pPersons>0
   { ClearMarker(Marker_Persons);
     InsertMarker(Marker_Persons,pPersons);
     BitOnW(wFilter,2);
     ClusterDisabledField(#wFilter,2);
   } //if pPersons>0


   SetFilterBounds(0);
   Result:=true;
} //Function InitParam(


//--------------------------------------
// Загрузчик интерфейса
//--------------------------------------
Function LoadInterFace(_wType:word):boolean;
{ #__UNUSED__(_wType)
  sUserName :=UserName();
  Timelog_Init;
  DT_Ras:=Date(1,MonthRas,YearRas);
  Result:=True;
  Timelog(GetInterfaceName+'->LoadInterFace');
  if getfirst Zar_user=tsok {}
  isPodrShare:=GetPodrShare;
  isFilterRun:=false;
  LoadVipRef(DataProtector, 'GP_Protector');

  DataProtector.LinkToExt(cfsGetCurrentContainerSelf, '', true);
  DataProtector.ProtectedStatusCtx := sci1Esc;
  DataProtector.AutoPalette := true;
  //===========================
  RoleGroupName:='Мотивация персонала';

  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
  if (UserAccessService=NullRef) {
        exit;
  }
  Result:=True;
}

//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    cmInit:
    {
      LoadInterface(0);
      //----------------------------
      ReadParam;
      var _wTypeOpl:word=wTypeOpl;
      wTypeOpl:=0; //Иначе не сработает инициализация
      InitParam(wIntMode,_wTypeOpl,pPersons,pPersons);
      SetFilterNM;
    } //cmInit
    cmOnVipLoad:
    { LoadInterface(1);

    }
    //----------------------
    cmDefault:
    { if (wIntMode and cgiPick)>0
      {
        if (wIntMode and cgiPickMult)=cgiPickMult
        { if PMarker.Count=0
          { pMarker.Mark;
          }
          pMarker.ExportToName(pMarker.StoreName);
        }
        else
        { set cRec:=GP_KPI_Pers_Class.Nrec;

        }

        CloseInterface(cmDefault)
      }
      else
      { PutCommand(cmEdit);
      }

    }
    cmEdit:
    { //RunWindowModal(wnPersEdit);
      RunEdit;
    }
    //----------------------
    cmDone:
    { if DataProtector<>NullRef
      { FreeVipInterface(DataProtector);

      }
      SaveParam;
    }
    //----------------------
    cmCheckField:
    { case CurField of
      #GP_KPI_Pers_Class.Procent:
      { if GP_KPI_Pers_Class.Procent>0
        { var _fProcent:double;
          _fProcent:=GetPlanProcent;
          if _fProcent=0
          { message('По этому назначению'+chr(13)+CatRaise.Name+' не положена!');
            set GP_KPI_Pers_Class.Procent:=0;
          }
        }
      }
      #GP_KPI_Pers_Class.FromDate:
      { if GP_KPI_Pers_Class.ToDate<>Date(0,0,0)
        { if GP_KPI_Pers_Class.ToDate<GP_KPI_Pers_Class.FromDate
          { Message('Дата окончания меньше даты начала');
            set GP_KPI_Pers_Class.ToDate:=GP_KPI_Pers_Class.FromDate
          }
        }
        if GP_KPI_Pers_Class.Procent=0
          set GP_KPI_Pers_Class.Procent :=GetPlanProcent;
      }
      #GP_KPI_Pers_Class.ToDate:
      { if GP_KPI_Pers_Class.ToDate<>ZeroDate
        { if GP_KPI_Pers_Class.ToDate<GP_KPI_Pers_Class.FromDate
          { Message('Дата окончания меньше даты начала');
            set GP_KPI_Pers_Class.ToDate:=GP_KPI_Pers_Class.FromDate;

          }
          else
          { set GP_KPI_Pers_Class.ToDate:=GP_KPI_Pers_Class.ToDate;
          }
        } //GP_KPI_Pers_Class.ToDate
      }
      end;
    }
    //----------------------
    cmPick:
    { if IsProtect
      { Abort;
        Exit;

      }
      case CurField of
      //--------------------------
      #CatRaise.Name:
      { var cTmp: comp;
        cTmp:=GP_KPI_Pers_Class.cDoplata;
        if ( RunInterface('PickCatalog2', integer(-17), cTmp, 0) <> cmCancel )
        { set GP_KPI_Pers_Class.cDoplata:=cTmp;
          if GetFirst CatRaise=tsok {}
          if GP_KPI_Pers_Class.Procent=0
          { GP_KPI_Pers_Class.Procent:=Longint(CatRaise.LastUser);
          }
        }
      }
      //--------------------------
      #Persons.Fio,#GP_KPI_Pers_Class.Fio://     :
      {
        var wK:word;
        var DummyMarker1, DummyMarker2: TPtr;

        DummyMarker1 := InitMarker('', 8, 10, 10);
        DummyMarker2 := InitMarker('', 8, 1, 1);
        wK:=0;
        pTmp:=GP_KPI_Pers_Class.cPersons;
        if (viCYPersons.Choice(DummyMarker1, 3, vfCanSelect, wK, cRec, DummyMarker2))
        {
          set GP_KPI_Pers_Class.cPersons:=viCYPersons.GetPsnByKindChoice(wK, cRec);
          set GP_KPI_Pers_Class.Fio :=Persons.Fio;
          if getfirst Persons=tsok
          set GP_KPI_Pers_Class.cAppoint:=if(Persons.AppointCur>0,Persons.AppointCur,Persons.AppointLast);
          set GP_KPI_Pers_Class.FromDate:=Appointments.AppointDate;
          set GP_KPI_Pers_Class.Procent :=GetPlanProcent;

          //set NewExecutor:=GetPersonsFIO(BufNewStatement.cExecutor);
        }
        DoneMarker(DummyMarker1, '');
        DoneMarker(DummyMarker2, '');
      }
      //--------------------------
      #Appointments.AppointDate,#Appoint_Type,#Post,#Depart :
      { pTmp:=GP_KPI_Pers_Class.cAppoint;
        if RunWindowModal(wnGetApp_Entry)=cmDefault
        { if ( RunInterface(GetApp, Persons.Nrec, pTmp, App_Entry, GP_KPI_Pers_Class.FromDate) = cmDefault )
          { set GP_KPI_Pers_Class.cAppoint:=pTmp;
            set GP_KPI_Pers_Class.Procent :=GetPlanProcent;
          }
        }
      }
      //------------------------------
       #Link_Persons.FIO     // ФИО сотрудника, связанного с этим периодом
      ,#Link_CatDep.Name    // Подразделение, связанного с этим периодом
      ,#Link_APP.AppointDate// Дата назначения, связанного с этим периодом
      ,#Link_APP.DisMissDate// Дата ухода с должности, связанного с этим периодом
      :
      { if GP_KPI_Pers_Class.FromDate=ZeroDate
        { Message('Заполните дату "с"');
          exit;
        }
        var _dtb         :date = GP_KPI_Pers_Class.FromDate ;
        var _dte         :date = GP_KPI_Pers_Class.ToDate   ;
        var _cLink_App   :comp = GP_KPI_Pers_Class.cLink_App  ;
        var _cLink_Pers  :comp = GP_KPI_Pers_Class.cLink_Pers ;
        var _cLink_Staff :comp = GP_KPI_Pers_Class.cLink_Staff;
        if RunInterface(GP_GetFIOPostByPeriod,
            cgiPick
           ,'_Первые руководители и их заместители'
           ,_dtb
           ,_dte
           ,_cLink_App
           ,_cLink_Pers
           ,_cLink_Staff
           )<>cmCancel
        { set GP_KPI_Pers_Class.cLink_App    :=_cLink_App  ;
          set GP_KPI_Pers_Class.cLink_Pers   :=_cLink_Pers ;
          set GP_KPI_Pers_Class.cLink_Staff  :=_cLink_Staff;
          ReScanPanel(#GP_KPI_Pers_Class);
        }
      }
      //------------------------------
      #Filtr_Persons:
      { KauMarkerName := iGetKau.GetMarkerName(cgKau_Persons);
        StoreMarker(Marker_Persons,KauMarkerName);
        If (iGetKau.GetCodeKau(cgiPickMult,cgKau_Persons,Comp(0)) <> 0)
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_Persons,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_Persons);
          BitOnW(wFilter,2);
        }
      }
      #Filtr_Katpodr:
      { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
        //CopyMarker(_PodrMArkerPointer,Marker_KatPodr);
        if RunInterface('GetPodaLN',12, Marker_KatPodr, 1)=cmDefault
        { //_PodrMArkerPointer := CLSF.LoadFullCurrentDepartmentList;
          //CopyMarker(Marker_KatPodr,_PodrMArkerPointer);
          SetFilterNm(#Filtr_Katpodr);
          BitOnW(wFilter,3);
        }
      }
      end;
      ReScanPanel(#GP_KPI_Pers_Class);
    } //cmPick
    //----------------------
    cmDelOnProtect:
    { Case Curfield of
      //------------------------------
      #Filtr_Persons:
      { ClearMarker(Marker_Persons);
        BitOffW(wFilter,2);
        SetFilterNm(#Filtr_Persons);
      }
      //------------------------------
      #Filtr_KatPodr:
      { ClearMarker(Marker_KatPodr);
        BitOffW(wFilter,3);
        SetFilterNm(#Filtr_KatPodr);
      }
      end;
    }
    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Pers_Class: RunInterface('ExClassifier', coGP_KPI_Pers_Class, GP_KPI_Pers_Class.nRec);
      end;
    }
    //--------------------------
    cmFilterSave:
    { UpdateTable;
      if RunWindowModal(wnFilter)=cmDefault
      { SetFilterBounds(0);
      }
      else RestFromA
    }

    cmValue3:
    { GP_KPI_Pers_Class.Nrec:=0;
      Insert current GP_KPI_Pers_Class;
      ReScanPanel(#GP_KPI_Pers_Class);

    }
    //--------------------------
    cmPickAttr:// внешние аттрибуты
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Pers_Class: RunInterface('Attribute', coGP_KPI_Pers_Class, GP_KPI_Pers_Class.nRec);
      end;
    }
    //--------------------------
    cmHotKeys:
    {
      case CurTable of
      #GP_KPI_Pers_Class:
      { ProcessCommand(RunMenu('GP_KPI_PersClassEdit_Main_HotKey'));
      }
      end;
    }

  end;
end.

GP_KPI_PersClassEdit_Main_HotKey Menu
{
- 'Копирование записи', cmValue3, 'Копирование записи',  ,'',,sci1Esc;
 -----------;
- 'Фильтр на данные'     , cmFilterSave, 'Фильтр на данные', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;

}
