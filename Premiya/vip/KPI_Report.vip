/**********************************************************************************************\
* Наименование:  Разработка отчетной формы "Ведомости премирования"                               *
* Контур/Модуль: Управление персоналом                                                            *
* Примечание:    Мотивация персонала->Ведомости премирования                                      *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ---------------------------------------------------------------------------------------------*
* Разработка  |#782          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#784          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#785          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#786          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#788          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#789          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#790          |01/11/17|Валента А.В.             |НПО Энергомаш                    *
* Разработка  |#791          |18/11/17|Валента А.В.             |НПО Энергомаш                 *
* Разработка  |#793          |15/11/17|Валента А.В.             |НПО Энергомаш                    *
\**********************************************************************************************/
#include KPI_Report.VIH
#include GP_KPI_RaiseEdit.Vih
#include CatFunc.vih                     // Интерфейс работы с каталогом
#include FRRecordDefinition.vih
#include StrFunc.vih         // Функции работы со строками

//------------------------------------------------
interface KPIReport 'Ведомости премирования' EscClose;
//------------------------------------------------
#include ShowKau.Vpp
//*****************************************************************************
procedure FullTables(sqlHandle : string; tableHandle : longint; Prim:string='');  forward;
//*****************************************************************************
table struct tmpPremia
(
  NPP            : word
, cGp_KPI_RAISE  : comp
, NAME           : string
, Code           : string
, cDoplata       : comp
, cDoc           : comp
)
with index
(
  tmpPremia01 = cDoc + NPP
);

//*****************************************************************************
table struct tmpFields
(
  NRec      : comp
, Code      : string
, Name      : string
, NPP       : word
, cDoc      : comp
, GroupName : string
, cGroup    : comp
, NumCol    : word
, wTypeFld  : word
, Razr      : word
, Option    : word
, KODGROUP  : word
, RAZDEL    : word
, SUB       : word
, wOrderPrint : word
, ITogo     : double
)
with index
(
  tmpFields01 = NRec (Unique, Surrogate)
, tmpFields02 = RAZDEL + SUB + NPP
, tmpFields03 = NPP
, tmpFields04 = cDoc + GroupName + NPP
, tmpFields05 = cGroup + NPP
, tmpFields06 = wOrderPrint
);

//*****************************************************************************
table struct tmpPodrFond
(
  cFond             : comp
, sFond             : string
, cPodr             : comp
, PodrName          : string
, PodrKod           : string
, sValue1           : string
, sValue2           : string
, sValue3           : string
, sValue4           : string
, sValue5           : string
, sValue6           : string
, sValue7           : string
, sValue8           : string
, sValue9           : string
, sValue10          : string
, sValue11          : string
, sValue12          : string
, sValue13          : string
, sValue14          : string
, sValue15          : string
, sValue16          : string
, sValue17          : string
, sValue18          : string
, sValue19          : string
, sValue20          : string
)
with index
(
  tmpPodrFond01 = cFond
);
//*****************************************************************************
table struct tmpGrPodrFond
(
  cPodr             : comp
, PodrName          : string
, PodrKod           : string
, dValue            : array[1..60] of double
, cFond             : array[1..60] of comp
, cField            : array[1..60] of comp
)
with index
(
  tmpGrPodrFond01 = cPodr
, tmpGrPodrFond02 = PodrKod
);
//*****************************************************************************
table struct tmpCrossTable
(
  PodrKod     : string
, PodrName    : string
, cPodr       : comp
, GroupName   : string
, cGroup      : comp
, ColName     : string
, ColNPP      : word
, cField      : comp
, dValue      : double
)
with index
(
  tmpCrossTable01 = cPodr + cField
)
;
//*****************************************************************************
table struct tmpGP_KPI_DOC_SP
(
  NRec           : comp "Номер записи"
, Code           : String[30]  "Код"
, cPersons       : comp        "Сотрудник"
, sPersons       : string       "Сотрудник ФИО"
, cLschet        : comp         "Лицевой счет"
, cKatPodr       : comp         "Подразделение"
, KatPodrName    : string       "Подразделение наименование"
, KatPodrCode    : string       "Подразделение код"
, cPost          : comp          "Должность"
, sPost          : string        "должность наименование"
, cKlKatego      : comp          "Категория"
, KKName         : string
, KKCode         : string
, Tabn           : Longint "Табельный номер"
, StrTabn        : String[20] "Табельный номер, строчный"
, Fio            : String[50] "Фио работника"
, wType          : Word "Тип документа 0 - премии, 1 фонды"
, cGP_KPI_Doc    : comp               "Документ"
, cGP_KPI_Raise  : comp               "Тип премии"
, cGP_KPI_Fond   : comp               "Тип фонда"
, cAppointments  : comp               "Назначение сотрудника"
, wTypeLine      : word              "Тип строки 0 - данные, 1 - Итоги"   
, dValue         : Array [1..20] of tSumma
)
With index
(
  tmpGP_KPI_DOC_SP01 = NRec
, tmpGP_KPI_DOC_SP02 = cGP_KPI_Doc + cGP_KPI_Raise + Tabn + StrTabn
, tmpGP_KPI_DOC_SP03 = cGP_KPI_Doc + Fio + cPersons
, tmpGP_KPI_DOC_SP04 = cPersons + wType
, tmpGP_KPI_DOC_SP05 = cLschet  + wType
, tmpGP_KPI_DOC_SP06 = cKatPodr + wType + Tabn + StrTabn
, tmpGP_KPI_DOC_SP07 = wTypeLine + KatPodrCode + Tabn + StrTabn
);

//*****************************************************************************
create view
var 
  pType
, pRaiseType: word;
  pGP_KPI_DOC
, pFieldDoc
, pRaise    : comp;
  pMonth
, pYear     : word;
  npp       : longint;
as select 
  GP_KPI_Doc.Nrec,tmpFields.*,tmpPremia.*
from
  GP_KPI_Doc
, tmpGP_KPI_DOC_SP(tmpGP_KPI_DOC_SP07)
, tmpPremia
, tmpFields(tmpFields06)
, tmpFields  tmpFields_F
, GP_KPI_Doc_SP
, Katpodr
, Gp_Status
, persons
, catalogs
, Appointments
, Persons  PersonsDoc
, GP_KPI_RAISE
, x$users
, StaffStruct
, Catalogs ChiefPost
, Catalogs ChiefDep
, GP_KPI_Fond
, GP_KPI_TypeVed
, tmpPodrFond
, tmpGrPodrFond(tmpGrPodrFond02)
, tmpCrossTable
, StaffStruct StaffStructNach
, Appointments AppointmentsNach
, Catalogs PodrNach
, Catalogs PostNach
, Persons PersonNach
, GP_TYPEDOCS
, Katpodr KatPodr1
, KatOrg KatOrg1
where 
((
    pGP_KPI_DOC                == GP_KPI_DOC.NRec
AND GP_KPI_DOC.cKatpodr        == KatPodr.Nrec
AND GP_KPI_DOC.cStatus         == Gp_Status.Nrec
AND GP_KPI_DOC.wType           == GP_TYPEDOCS.wType
AND tmpGP_KPI_DOC_SP.NRec      == GP_KPI_DOC_SP.NRec
AND GP_KPI_Doc.cExecutor       == PersonsDoc.NRec
AND GP_KPI_Doc.cCreator        == x$users.ATL_NREC
AND GP_KPI_Doc.cGP_KPI_Fond    == GP_KPI_Fond.Nrec
AND GP_KPI_Doc.cGP_KPI_TypeVed == GP_KPI_TypeVed.NRec
AND GP_KPI_Doc.cChiefStaffStr  == StaffStruct.NRec
AND StaffStruct.Post           == ChiefPost.NRec
AND StaffStruct.Department     == ChiefDep.NRec

AND /*GP_KPI_DOC.NRec*/pGP_KPI_DOC == tmpPremia.cDoc
AND pRaise                     == GP_KPI_RAISE.NRec


AND 'Управление мотивации и оплаты труда' == PodrNach.Name  (NoIndex)
AND 'Начальник управления'                == PostNach.Name  (NoIndex)
//AND 'Отдел систем мотивации персонала' == PodrNach.Name  (NoIndex)
//AND 'Начальник отдела'                == PostNach.Name  (NoIndex)
AND PodrNach.NRec                 == StaffStructNach.Department
AND PostNach.NRec                 == StaffStructNach.Post
AND StaffStructNach.Nrec          == AppointmentsNach.StaffStr
AND ( 0 <> AppointmentsNach.Person
 and AppointmentsNach.lprizn = 0
  AND  Cur_Date  >= AppointmentsNach.AppointDate
  AND (Cur_Date  <= AppointmentsNach.DismissDate or
             AppointmentsNach.DismissDate = ZeroDate)
    )
AND AppointmentsNach.Person       == PersonNach .NRec

)) 

;

Parameters
  pGP_KPI_DOC
, pRaise
;
//*****************************************************************************
var iCatFunc   : CatalogsFunctions;            // Переменная типа интерфейс CatalogsFunctions
var iStrFunc   : StringFunctions;
//*****************************************************************************
  SQL QUERY SqltmpGP_KPI_DOC_SP =
    SELECT 
       SP.NRec                   AS NRec
     , SP.Code                   AS Code
     , SP.cPersons               AS cPersons
     , Coalesce(P.FIO, '')       AS sPersons
     , SP.cLschet                AS cLschet
     , SP.cKatPodr               AS cKatPodr
     , Coalesce(KP.Name, '')     AS KatPodrName
     , Coalesce(KP.Kod , '')     AS KatPodrCode
     , SP.cPost                  AS cPost
     , Coalesce(CP.Name, '')     AS sPost
     , SP.cKlKatego              AS cKlKatego
     , Coalesce(KK.NAIKAT, '')   AS KKName
     , Coalesce(KK.Kod   , '')   AS KKCode
     , SP.Tabn                   AS Tabn
     , SP.StrTabn                AS StrTabn
     , SP.Fio                    AS Fio
     , SP.wType                  AS wType
     , SP.cGP_KPI_Doc            AS cGP_KPI_Doc
     , SP.cGP_KPI_Raise          AS cGP_KPI_Raise
     , SP.cGP_KPI_Fond           AS cGP_KPI_Fond
     , SP.cAppointments          AS cAppointments
     , 0                         AS wTypeLine
    FROM  GP_KPI_DOC_SP SP              LEFT JOIN Persons  P  ON SP.cPersons   = P.NRec
                                        LEFT JOIN KatPodr  KP ON SP.cKatPodr   = KP.NRec
                                        LEFT JOIN Catalogs CP ON SP.cPost      = CP.NRec
                                        LEFT JOIN KlKatego KK ON SP.cKlKatego  = KK.NRec
    WHERE (:pDoc = SP.cGP_KPI_DOC) ;
//*****************************************************************************
  SQL QUERY SqltmpGP_KPI_DOC_SP_Raise =
    SELECT 
       SP.NRec                   AS NRec
     , SP.Code                   AS Code
     , SP.cPersons               AS cPersons
     , Coalesce(P.FIO, '')       AS sPersons
     , SP.cLschet                AS cLschet
     , SP.cKatPodr               AS cKatPodr
     , Coalesce(KP.Name, '')     AS KatPodrName  
     , Coalesce(KP.Kod , '')     AS KatPodrCode
     , SP.cPost                  AS cPost
     , Coalesce(CP.Name, '')     AS sPost  
     , SP.cKlKatego              AS cKlKatego
     , Coalesce(KK.NAIKAT, '')   AS KKName
     , Coalesce(KK.Kod   , '')   AS KKCode
     , SP.Tabn                   AS Tabn
     , SP.StrTabn                AS StrTabn
     , SP.Fio                    AS Fio
     , SP.wType                  AS wType
     , SP.cGP_KPI_Doc            AS cGP_KPI_Doc
     , SP.cGP_KPI_Raise          AS cGP_KPI_Raise
     , SP.cGP_KPI_Fond           AS cGP_KPI_Fond
     , SP.cAppointments          AS cAppointments
     , 0                         AS wTypeLine
    FROM  GP_KPI_DOC_SP SP              LEFT JOIN Persons  P  ON SP.cPersons   = P.NRec
                                        LEFT JOIN KatPodr  KP ON SP.cKatPodr   = KP.NRec
                                        LEFT JOIN Catalogs CP ON SP.cPost      = CP.NRec
                                        LEFT JOIN KlKatego KK ON SP.cKlKatego  = KK.NRec
    WHERE (:pDoc    = SP.cGP_KPI_DOC
       AND :pRaise  = SP.cGp_KPI_RAISe)
    ;
//*****************************************************************************
  SQL QUERY SqlTmp_KPI_Fields =
    SELECT
        F.NRec     AS NRec
      , F.Code     AS Code
      , F.Name     as Name
      , F.NPP      AS NPP
      , #comp(0)   AS cDoc
      , ''         AS GroupName
      , #comp(0)   as cGroup
      , 0          AS NumCol
      , F.wTypeFld as wTypeFld
      , F.Razr     as Razr
      , F.Option   as Option
      , F.KODGROUP as KODGROUP
      , F.RAZDEL   as RAZDEL
      , F.SUB      as Sub 
      , F.Sub+CASE F.RAZDEL
              WHEN 2 THEN 1000
              WHEN 1 THEN 2000
              WHEN 0 THEN 6000
              ELSE 0
              end
          as wOrderPrint
      , 0.00 as Itogo
    From GP_KPI_FIELDS F LEFT JOIN GP_KPI_Raise R ON F.cDoc = R.NRec
    Where (:pFieldDoc  = F.cDoc
       AND :pRaiseType = F.wType
       AND 3          <> F.RAZDEL
       AND 0           < F.SUB)
   ;

//*****************************************************************************
  SQL QUERY SqlTmp_KPI_FieldsFond =
    SELECT Distinct
           F.Nrec   as NRec
         , F.Code   as Code
         , F.Name   as Name
         , F.Npp    as NPP
         , Coalesce(FND.NRec, #comp(0))  as cDoc
         , Coalesce(FND.Name, '')        as GroupName
         , #comp(0)   as cGroup
         , 0          as NumCol
         , F.wTypeFld as wTypeFld
         , F.Razr     as Razr
         , F.Option   as Option
         , F.KODGROUP as KODGROUP
         , F.RAZDEL   as RAZDEL
         , F.SUB      as Sub 
         , F.Sub +CASE F.RAZDEL
              WHEN 2 THEN 1000
              WHEN 1 THEN 2000
              WHEN 0 THEN 6000
              ELSE 0
              end      as wOrderPrint
        , 0.00 as Itogo
    FROM GP_KPI_DOC    D
       , GP_KPI_FIELDS F LEFT JOIN GP_KPI_Raise R ON F.cDoc = R.NRec
    WHERE
         (:pType          = D.wType
      AND :pYear          = D.wYear
      AND :pMonth         = D.wMonth
      AND  D.CGP_KPI_FOND = F.cDoc
      AND  1              = F.wType
      AND  3             <> F.RAZDEL
      AND  0              < F.Sub)
   ;

//******************************************************************************
  SQL QUERY SqlTmp_KPI_Raise =
    SELECT DISTINCT
        0          as NPP
      , R.nrec     as cGp_KPI_RAISE
      , R.Name     as NAME
      , R.code     as Code
      , R.cDoplata as cDoplata
      , D.NRec     as cDoc
    FROM GP_KPI_DOC     D
       , GP_KPI_DOC_SP  SP
       , GP_KPI_RAISE   R
    WHERE
         (:pDoc            = D.NRec
      AND D.Nrec           = SP.cGp_KPI_Doc
      AND SP.cGP_KPI_RAISE = R.NRec)
  ;
//*****************************************************************************
  SQL QUERY Sqltmp_Ved_Fond =
    SELECT
        D.cGP_KPI_Fond               as cFond
      , Coalesce(F.Name     , '')    as sFond
      , SP.cKatPodr                  as cPodr
      , Coalesce(KP.Name    , '')    as PodrName
      , Coalesce(KP.Kod     , '')    as PodrKod
      , SP.fArrValue[1]              as SValue1
      , SP.fArrValue[2]              as SValue2
      , SP.fArrValue[3]              as SValue3
      , SP.fArrValue[4]              as SValue4
      , SP.fArrValue[5]              as SValue5
      , SP.fArrValue[6]              as SValue6
      , SP.fArrValue[7]              as SValue7
      , SP.fArrValue[8]              as SValue8
      , SP.fArrValue[9]              as SValue9
      , SP.fArrValue[10]             as SValue10
      , SP.fArrValue[11]             as SValue11
      , SP.fArrValue[12]             as SValue12
      , SP.fArrValue[13]             as SValue13
      , SP.fArrValue[14]             as SValue14
      , SP.fArrValue[15]             as SValue15
      , SP.fArrValue[16]             as SValue16
      , SP.fArrValue[17]             as SValue17
      , SP.fArrValue[18]             as SValue18
      , SP.fArrValue[19]             as SValue19
      , SP.fArrValue[20]             as SValue20
    FROM
         GP_KPI_DOC D     left join GP_KPI_FOND F  on (D.cGP_KPI_Fond = F.NRec)
       , GP_KPI_DOC_SP SP left join KatPodr     KP on (SP.cKatPodr    = KP.NRec)
   WHERE
          :pType      = D.wType
      AND :pYear      = D.wYear
      AND :pMonth     = D.wMonth
      AND D.NRec      = SP.cGP_KPI_DOC
  ;
//*****************************************************************************
Function GetMenu(MenuName : string) : longint;
{ timelog('KPI_REPORT->GetMenu:'+MenuName);
  var MenuID : longint=0;
  var isNeedSepr : boolean; isNeedSepr := true;
  _Try
  { if (trim(MenuName) = '')
    { MenuID := CreateMenu;
      isNeedSepr:=false;
    }
    else
    { MenuID := LoadMenu(MenuName,true);
    }//if (trim(MenuName) = '')
  }
  _except
  else
  { Message('Ошибка инициализации меню')
  }
  if (MenuID = 0)
    {
      result := 0;
     Exit;
  }

  case GP_KPI_DOC.wType of
       2 :
     {
       if isNeedSepr AddMenuItem(MenuID,'separator',1);
       if (GetFirst GP_KPI_FOND = tsOk)
         AddMenuItemEx2(MenuID, GP_KPI_FOND.Name, GP_KPI_FOND.Name, '', cmRunInterface,0,'GP_STAFF::KPIREPORT(' + string(pGP_KPI_DOC) + ', 0)');
     }
       3 :
     {
       if isNeedSepr AddMenuItem(MenuID,'separator',1);
       if (GetFirst GP_KPI_TypeVed = tsOk)
         AddMenuItemEx2(MenuID, GP_KPI_TypeVed.Name, GP_KPI_TypeVed.Name, '', cmRunInterface,0,'GP_STAFF::KPIREPORT(' + string(pGP_KPI_DOC) + ', 0)');
     }
     101
   , 102
   , 103
   , 104
   , 100 :
     {
       timelog('KPI_REPORT->GetMenu:Премия');
       if (GetFirst tmpPremia <> tsOk)
         { timelog('KPI_REPORT->GetMenu:GetFirst tmpPremia <> tsOk');
           FullTables(SqlTmp_KPI_Raise , #tmpPremia,'SqlTmp_KPI_Raise->tmpPremia');
           case GP_KPI_DOC.wType of
           102,103:
           { insert into tmpPremia set
                tmpPremia.NPP          =0
              , tmpPremia.cGp_KPI_RAISE=0
              , tmpPremia.NAME         ='Резерв'
              , tmpPremia.Code         ='1000'
              , tmpPremia.cDoplata     =0
              , cDoc                   :=GP_KPI_DOC.Nrec
             ;
           }
           end;
         } //if (GetFirst tmpPremia <> tsOk)
       // перестала отбираться
       /*
       _Loop tmpPremia where (( 0 << tmpPremia.cDoc))
       { timelog('KPI_REPORT->GetMenu:tmpPremia '+tmpPremia.NPP+','+tmpPremia.NAME
             +', '+tmpPremia.Code+', '+string(tmpPremia.cDoc,0,0) );

       } */
       _LOOP tmpPremia
         {
           timelog('KPI_REPORT->GetMenu:'+tmpPremia.NAME);

           if (isNeedSepr)
             {        
               AddMenuItem(MenuID,'separator',1);
               isNeedSepr := false;
             }  
           AddMenuItemEx2(MenuID, tmpPremia.Name, tmpPremia.Name, '', cmRunInterface,0,'GP_STAFF::KPIREPORT(' + string(tmpPremia.cDoc) + ', ' + string(tmpPremia.cGp_KPI_RAISE) + ')');
         }
     }
  end;

  result := MenuID;
}
//*****************************************************************************
Function TryDouble(value : string) : double;
begin
  var res : double; res := 0;

  _try
  {
     res := double(value);
  }
  _except else
  {
  }

  result := res;
}
//*****************************************************************************
Function GetValue(npp : word) : string;
{
  case npp of
    1: result := tmpPodrFond.sValue1;
    2: result := tmpPodrFond.sValue2;
    3: result := tmpPodrFond.sValue3;
    4: result := tmpPodrFond.sValue4;
    5: result := tmpPodrFond.sValue5;
    6: result := tmpPodrFond.sValue6;
    7: result := tmpPodrFond.sValue7;
    8: result := tmpPodrFond.sValue8;
    9: result := tmpPodrFond.sValue9;
   10: result := tmpPodrFond.sValue10;
   11: result := tmpPodrFond.sValue11;
   12: result := tmpPodrFond.sValue12;
   13: result := tmpPodrFond.sValue13;
   14: result := tmpPodrFond.sValue14;
   15: result := tmpPodrFond.sValue15;
   16: result := tmpPodrFond.sValue16;
   17: result := tmpPodrFond.sValue17;
   18: result := tmpPodrFond.sValue18;
   19: result := tmpPodrFond.sValue19;
   20: result := tmpPodrFond.sValue20;
  end;

}
//*****************************************************************************
Procedure GroupData;
{
  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm, 'Идет обработка данных', RecordsInTable(#tmpPodrFond));

  var nppLast : byte; nppLast := 0;

  _LOOP tmpPodrFond
    if (Not NextVisual)
      {
        Break;
      }
    else
      {
        if (GetFirst tmpGrPodrFond where ((tmpPodrFond.cPodr == tmpGrPodrFond.cPodr)) <> tsOk)
          {
            ClearBuffer(#tmpGrPodrFond);
            tmpGrPodrFond.cPodr           := tmpPodrFond.cPodr;
            tmpGrPodrFond.PodrName        := tmpPodrFond.PodrName;     
            tmpGrPodrFond.PodrKod         := tmpPodrFond.PodrKod;
            if (insert current tmpGrPodrFond = tsOk)
              {}
          }

        _LOOP tmpFields_F where ((tmpPodrFond.cFond == tmpFields_F.cDoc)) ordered by tmpFields_F.GroupName, tmpFields_F.Npp
          {
            if (tmpFields_F.NumCol = 0)
              {
                inc(nppLast);
                set tmpFields_F.NumCol := nppLast;
                if (update current tmpFields_F = tsOk)
                  {}
              }
            
            if (tmpFields_F.NumCol <= 60)
              {
                set tmpGrPodrFond.dValue[tmpFields_F.NumCol] := tmpGrPodrFond.dValue[tmpFields_F.NumCol] + TryDouble(GetValue(tmpFields_F.npp));
                set tmpGrPodrFond.cFond [tmpFields_F.NumCol] := if (tmpGrPodrFond.cFond [tmpFields_F.NumCol] = comp(0), tmpPodrFond.cFond, tmpGrPodrFond.cFond [tmpFields_F.NumCol]);
                set tmpGrPodrFond.cField[tmpFields_F.NumCol] := if (tmpGrPodrFond.cField[tmpFields_F.NumCol] = comp(0), tmpFields_F.NRec  , tmpGrPodrFond.cField[tmpFields_F.NumCol]);
              }
          }
           
        if (update current tmpGrPodrFond = tsOk)
          {}   
      }

  StopVisual('', 0);
}
//*****************************************************************************
Function GetReportName : string;
{
  if (bogettune('NPOEM_OWN.RAISE.DEBUGMODEPRINTREPORTS'))
  then
  {
    result := '';
    exit;
  }
  case GP_KPI_DOC.wType of
       2: result := '';
       3: result := 'Ведомость оценки выполнения исполнительской дисциплины';
     101
   , 102
   , 103
   , 104
   , 100 :
     { if pRaise>0
       { if (GetFirst GP_KPI_RAISE <> tsOk)
         {
           result := '';
           Exit;
         }

         case Trim(GP_KPI_RAISE.Code) of
         //Премия за результаты работы
         '22'    : result := 'Ведомость премирования работников цеха отдела';
         //Премия за качество и дисциплину труда
         '21'    : result := 'Ведомость премирования работников цеха отдела';
         //Годовая премия - руководители высшего звена
         '030.1'
       , '30.01' : result := 'Годовая ведомость премирования руководителей';
         //Квартальная премия - руководители высшего звена
         '31.01' : result := 'Квартальная ведомость премирования руководителей';
         //Ежемесячная премия - руководители высшего звена
         '32.01' : result := 'Месячная ведомость премирования руководителей';
         //Годовая премия - руководители среднего звена
         '030.2'
       , '30.02' : result := 'Годовая ведомость премирования руководителей';
         //Квартальная премия - руководители среднего звена   
         '31.02' : result := 'Квартальная ведомость премирования руководителей';
         //Ежемесячная премия  - руководители среднего звена
         '32.02' : result := 'Месячная ведомость премирования руководителей среднего звена';
         //цеховая ведомость
         '034'   : result := 'Ведомость премирования';
         //Премия из премиального фонда руководителя
         '23'    : result := 'Ведомость премирования работников цеха отдела';
         //Премия за выполнение показателей - контроль 2 поля,коэф. из показателей - только утв.
         '34'    : result := 'Ведомость премирования работников цеха отдела';
         '40'    : result := 'Ежемесячная премия по положению'; //Салда
         else
         {  result := 'Ведомость премирования';
            case GP_KPI_RAISE.TypePeriod of
            1: result := 'Ведомость премирования работников цеха отдела';
            2: result := 'Квартальная ведомость премирования руководителей';
            3: result := 'Годовая ведомость премирования руководителей';
            end;
         }
         end;
       }
       else
       {
         case GP_KPI_DOC.wType of
         102:
           Result := 'Резерв среднего звена';
         103:
           Result := 'Резерв высшего звена';
         end;

       }
     }
  end;
  Timelog('GetReportName='+Result);
}
//*****************************************************************************
Function GetReportFormNumber: string;
{
  case GP_KPI_DOC.wType of
       2 : result := ''; //'Отчет по премиальным фондам';
       3 : { result := ''; //if (GetFirst GP_KPI_TypeVed = tsOk)
             //result := GP_KPI_TypeVed.Name;
         }
     101
   , 102
   , 103
   , 104
   , 100 :
     { if pRaise>0
       { if (GetFirst GP_KPI_RAISE <> tsOk)
         {
           result := '';
           Exit;
         }

         case Trim(GP_KPI_RAISE.Code) of
         //Премия за результаты работы
         '22'    : result := 'Форма № ПР - Подр - ЭМ';//'Ведомость премирования работников цеха/отдела';
         //Премия за качество и дисциплину труда
         '21'    : result := 'Форма № ПР - Подр - ЭМ';//'Ведомость премирования работников цеха/отдела';
         //Годовая премия  - руководители среднего звена
         '030.1'
       , '30.01' : result := 'Форма № ПР - ГВЗ - ЭМ';//'Годовая ведомость премирования руководителей высшего звена';
         //Квартальная премия - руководители высшего звена
         '31.01' : result := 'Форма № ПР - КвВЗ - ЭМ';//'Квартальная ведомость премирования руководителей высшего звена';
         //Ежемесячная премия - руководители высшего звена
         '32.01' : result := 'Форма № ПР - МВЗ - ЭМ' ;//'Ежемесячная ведомость премирования руководителей высшего звена';
         //Годовая премия  - руководители среднего звена
         '030.2'
       , '30.02' : result := 'Форма № ПР - ГСЗ - ЭМ';//'Годовая ведомость премирования руководителей среднего звена';
         //Квартальная премия - руководители среднего звена
         '31.02' : result := 'Форма № ПР - КвСЗ - ЭМ';//'Квартальная ведомость премирования руководителей среднего звена';
         //Ежемесячная премия  - руководители среднего звена
         '32.02' : result := 'Форма № ПР - МСЗ - ЭМ';//'Ежемесячная ведомость премирования руководителей среднего звена';
         //цеховая ведомость
         '034'   : result := 'Форма № ПР - Подр - ЭМ';//;'Ведомость премирования';
         //Премия из премиального фонда руководителя
         '23'    : result := 'Форма № ПР - Подр - ЭМ';//'Ведомость премирования работников цеха/отдела';
         //Премия за выполнение показателей - контроль 2 поля,коэф. из показателей - только утв.
         '34'    : result := 'Форма № ПР - Подр - ЭМ';//'Ведомость премирования работников цеха/отдела';
         else
           result := GP_KPI_RAISE.Name;
         end;
       }
       else
       { case GP_KPI_DOC.wType of
         102:
           Result:=''; //'Резерв по руководителям среднего звена за '+string(GP_KPI_Doc.HARRCOMP[1])+' квартал '+string(GP_KPI_Doc.HARRCOMP[2]);
         103:
           Result:='';
             ;
         end;
       }
     }
  end;
}
Function GetReportTitle : string;
{
  case GP_KPI_DOC.wType of
       2 : result := 'Отчет по премиальным фондам';
       3 :
         {
           if (GetFirst GP_KPI_TypeVed = tsOk)
             result := GP_KPI_TypeVed.Name;
         }
     101
   , 102
   , 103
   , 104
   , 100 :
     { if pRaise>0
       { if (GetFirst GP_KPI_RAISE <> tsOk)
         {
           result := '';
           Exit;
         }

         case Trim(GP_KPI_RAISE.Code) of
         //Премия за результаты работы
         '22'    : result := 'Ведомость премирования работников цеха/отдела';
         //Премия за качество и дисциплину труда
         '21'    : result := 'Ведомость премирования работников цеха/отдела';
         //Годовая премия  - руководители среднего звена
         '030.1'
       , '30.01' : result := 'Годовая ведомость премирования руководителей высшего звена';
         //Квартальная премия - руководители высшего звена
         '31.01' : result := 'Квартальная ведомость премирования руководителей высшего звена';
         //Ежемесячная премия - руководители высшего звена
         '32.01' : result := 'Ежемесячная ведомость премирования руководителей высшего звена';
         //Годовая премия  - руководители среднего звена
         '030.2'
       , '30.02' : result := 'Годовая ведомость премирования руководителей среднего звена';
         //Квартальная премия - руководители среднего звена
         '31.02' : result := 'Квартальная ведомость премирования руководителей среднего звена';
         //Ежемесячная премия  - руководители среднего звена
         '32.02' : result := 'Ежемесячная ведомость премирования руководителей среднего звена';
         //цеховая ведомость
         '034'   : result := 'Ведомость премирования';
         //Премия из премиального фонда руководителя
         '23'    : result := 'Ведомость премирования работников цеха/отдела';
         //Премия за выполнение показателей - контроль 2 поля,коэф. из показателей - только утв.
         '34'    : result := 'Ведомость премирования работников цеха/отдела';
         else
           result := GP_KPI_RAISE.Name;
         end;
       }
       else
       { case GP_KPI_DOC.wType of
         102:
           Result:='Справка-расчет начисления оценочного обязательства по руководителям среднего звена по выплате '
             +if((GP_KPI_Doc.HARRCOMP[4] and 1)>0,' квартальной премии за '+string(GP_KPI_Doc.HARRCOMP[1])+' квартал '+string(GP_KPI_Doc.HARRCOMP[2])+'г.' ,'')
             +if((GP_KPI_Doc.HARRCOMP[4] and 2)>0,if((GP_KPI_Doc.HARRCOMP[4] and 1)>0,' и ','')
               + 'вознаграждений по итогам работы за '+string(GP_KPI_Doc.HARRCOMP[3])+'г.','')
             ;
         103:
           Result:='Справка-расчет начисления оценочного обязательства по руководителям высшего звена по выплате '
             +if((GP_KPI_Doc.HARRCOMP[4] and 1)>0,' квартальной премии за '+string(GP_KPI_Doc.HARRCOMP[1])+' квартал '+string(GP_KPI_Doc.HARRCOMP[2])+'г.' ,'')
             +if((GP_KPI_Doc.HARRCOMP[4] and 2)>0,if((GP_KPI_Doc.HARRCOMP[4] and 1)>0,' и ','')
               + 'вознаграждений по итогам работы за '+string(GP_KPI_Doc.HARRCOMP[3])+'г.','')
             ;
         end;
       }
     }
  end;
}
//***************************************************************************
Function GetSum(_npp : word) : string;
{
  result := '';
  if (_npp > 0 AND _npp <= GP_KPI_Doc_Max_FLD_SP)
    {
      if (GetFirst GP_KPI_Doc_SP <> tsOk)
        {  
          if (tmpGP_KPI_Doc_SP.wTypeLine = 1)
            if (GetFirst tmpFields_F where (( _npp == tmpFields_F.Npp )) = tsok)
              if (tmpFields_F.wTypeFld = 1) 
                result := DoubleToStr(tmpGP_KPI_Doc_SP.dValue[_Npp], '[|-]3 666 666 666.88');

          exit;
        }

      result := GP_KPI_Doc_SP.fArrValue[_Npp];
      if (GetFirst tmpFields_F where (( _npp == tmpFields_F.Npp )) = tsok)
        {
          case tmpFields_F.wTypeFld of
            1: //число
              {
                if (length(Result) = 0)
                  result:='0';
                var _vDouble: double=0;
                _vDouble := double(result);
                //if _vDouble=0 Result:='0';
                if(IsBitCTW(tmpFields_F.Option,4))
                { Update current tmpFields_F set tmpFields_F.Itogo:=tmpFields_F.Itogo+_vDouble;
                }
                result := DoubleToStr(Round(_vDouble,tmpFields_F.Razr), '[|-]3 666 666 666.88');
              }
            4:// 'аналитика'
              {
                var _wKodGr : longint; _wKodGr := tmpFields_F.KODGROUP;
                var _cKau : comp; _cKau := 0;
                _cKau:=comp(result);
                result:=#ShowKau(_wKodGr,_cKau);
              }
            5:// 'кадр.справочники'
              {
                var _wKodGr : longint= tmpFields_F.KODGROUP;
                var _cKau :comp; _cKau := 0;
                _cKau := comp(result);
                result := iCatFunc.GetCatalogsName(_cKau);
              }
            6:// 'таблица' //пока нет
              {
                var _wKodGr : longint; _wKodGr := tmpFields_F.KODGROUP;
                var _cKau   : comp;    _cKau   := 0;
                _cKau:=comp(result);
                result:='' ;
              }
            7:
              {
                if (result = '')
                  result:=0;
              }
          end;
        }
    }
  else
    {
      if ( _npp = 102)
        {
          var planPers : double; planPers := TryDouble(GetSum(1));
          var kid      : double; kid      := TryDouble(GetSum(4));
          var kktr     : double; kktr     := TryDouble(GetSum(6));
          var persSBC  : double; persSBC  := TryDouble(GetSum(8));

          result := DoubleToStr(Round(planPers * kid * kktr * ((100 - persSBC) /100), 2), '[|-]3 666 666 666.88');
          exit;
        }

      result := 0;
    }
} //Function GetSum(_npp : word) : string;

Function GetSumIT(_npp : word) : string;
{
  result := '';
  if (_npp > 0 AND _npp <= GP_KPI_Doc_Max_FLD_SP)
  { if (GetFirst tmpFields_F where (( _npp == tmpFields_F.Npp )) = tsok)
       if (IsBitCTW(tmpFields_F.Option,4))
       {  result := DoubleToStr(Round(tmpFields_F.Itogo,tmpFields_F.Razr), '[|-]3 666 666 666.88');
       }
  }
} //Function GetSumIT(_npp : word) : string;
//*****************************************************************************
Function GetSumD(_npp : word) : double;
{ var _sVal:string=Replace(GetSum(_npp),' ','');
  Result:=0;
  REsult:=double(_sVal);

} //Function GetSumD(_npp : word) : double;

//*****************************************************************************
Function GetSumFond(npp : word) : string;
{
  if (npp > 0 AND npp <= 60)
    result := tmpGrPodrFond.dValue[Npp];
}

//*****************************************************************************
Function GetSumFondD(npp : word) : double;
{ var _sVal:string=Replace(GetSumFond(npp),' ','');
  Result:=0;
  Result:=double(_sVal);
}
//*****************************************************************************
Function GetNumLine : longint;
{
  inc(npp);
  result := npp
}
//*****************************************************************************

function GetPostPerson(_cPers : comp): string;
{
 result := '';
  if getfirst persons where ((_cPers == persons.nrec)) = tsOK
   if getfirst appointments where ((persons.appointCur == Appointments.nrec)) = tsOK
    if getfirst catalogs where ((Appointments.post == catalogs.nrec)) = tsOK
     result := catalogs.name
}
function GetPodrPerson(_cPers : comp): string;
{
 result := '';
  if getfirst persons where ((_cPers == persons.nrec)) = tsOK
   if getfirst appointments where ((persons.appointCur == Appointments.nrec)) = tsOK
    if getfirst catalogs where ((Appointments.DEPARTMENT == catalogs.nrec)) = tsOK
     result := catalogs.name
}
Function GetSingerFIO(sFIO : string; isFirst : boolean) : string;
{
   if (trim(sFIO) = '')
     result := '';
   else
     {
       var _fn : string; _fn := iStrFunc.Get_FirstName(sFIO);
       var _sn : string; _sn := iStrFunc.GetPatronymic(sFIO);
       //ругается что есть такая функция
       var _ln : string; _ln := iStrFunc.Get_LastName(sFIO);

       if (isFirst)
       {
         result := trim(if (Trim(_fn) = '', '', SubStr(_fn, 1, 1) + '.')
                      + if (Trim(_sn) = '', '', SubStr(_sn, 1, 1) + '.')
                      + ' ' + _ln);
       }
       else
       {
         result := trim(_ln + ' '
                      + if (Trim(_fn) = '', '', SubStr(_fn, 1, 1) + '.')
                      + if (Trim(_sn) = '', '', SubStr(_sn, 1, 1) + '.'));
       }
     }
}

Function GetPodrName(_cPodr : comp) : string;
{
  if (getFirst FastFirstRow KatPodr1 where ((_cPodr == KatPodr1.nRec)) = tsOk ) then
  {
    result := KatPodr1.Name;
    Exit;
  }
  result := '-';
}


Function GetOrgName(_cOrg : comp) : string;
{
  if (getFirst FastFirstRow KatOrg1 where ((_cOrg == KatOrg1.nRec)) = tsOk ) then
  {
    result := KatOrg1.Name;
    Exit;
  }
  result := '-';
}
//*****************************************************************************

datastream KPIReportStream
(
  [CFH            ]      CommonFormHeader;
  [ORGNAME        ]      sGetTune('MYORG');
  [FIODIREKTOR    ]      sGetTune('BOSS');
  [FormNumber     ]      GetReportFormNumber();
  [ReportName     ]      GetReportTitle();
  [DocNumber      ]      GP_KPI_DOC.DocNumber;
  [DocDate        ]      GP_KPI_DOC.DocDate;
  [DocCreate      ]      GP_KPI_DOC.DocCreate;
  [wMonth         ]      GP_KPI_DOC.wMonth;
  [wKvartal       ]      GP_KPI_DOC.wKvartal;
  [wYear          ]      GP_KPI_DOC.wYear;
  [wYearKvartal   ]      GP_KPI_DOC.wYearKvartal;
  [WYEARPREM      ]      GP_KPI_DOC.WYEARPREM;
  [TypeDoc        ]      if (GP_KPI_DOC.wType = 0, 'Премии', 'Фонды');
  [Status         ]      GP_Status.Name;
  [Creator        ]      x$users.XU$FULLNAME;
  [Executor       ]      GetSingerFIO(PersonsDoc.FIO, true);
  [Post           ]      ChiefPost.Name;
  [Department     ]      ChiefDep.Name;
  [Description    ]      GP_KPI_DOC.Description;
  [KatPodr        ]      KatPodr.Name;
  [KatPodrCode    ]      KatPodr.Kod;
  [FOND           ]      GP_KPI_Fond.Name;
  [TypeVed        ]      GP_KPI_TypeVed.Name;
  [Summa          ]      GP_KPI_DOC.Summa;
  [Coef           ]      GP_KPI_DOC.Coef;
  [Summa_Base     ]      GP_KPI_DOC.Summa_Base;
  [Summa_CRP      ]      GP_KPI_DOC.Summa_CRP;
  [BossPost       ]      GetPostPerson(coGetTune('BOSS')) ;// 'Генеральный директор АО "НПО Энергомаш"';
  [Boss           ]      GetSingerFIO(sGetTune('BOSS'), true);
  [NachPost       ]      GetPostPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION')); //'Начальник управления мотивации и оплаты труда'; 'ИО Начальника управления мотивации и оплаты труда'
  [Nach           ]      GetSingerFIO(sGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION'), true);
  [NachPodr       ]      Replace(GetPodrPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION')), 'Управление', ''); //'мотивации и оплаты труда';
  [RaisePodr      ]      GetPodrName(coGettune('NPOEM_OWN.Raise.PODRMOTIVATION'));

  table tmpGP_KPI_DOC_SP
  (
     [NPP         ]  GetNumLine;
     [NRec        ]  tmpGP_KPI_DOC_SP.NRec       ;
     [Code        ]  tmpGP_KPI_DOC_SP.Code       ;
     [Persons     ]  GetSingerFIO(tmpGP_KPI_DOC_SP.sPersons, false);
     [PersonsFULL ]  tmpGP_KPI_DOC_SP.sPersons;
     [KatPodr     ]  tmpGP_KPI_DOC_SP.KatPodrName;
     [KatPodrCode ]  Substr(tmpGP_KPI_DOC_SP.KatPodrCode,1,3);
     [Post        ]  tmpGP_KPI_DOC_SP.sPost      ;
     [Kategory    ]  tmpGP_KPI_DOC_SP.KKName     ;
     [KategoryCode]  tmpGP_KPI_DOC_SP.KKCode     ;
     [Tabn        ]  tmpGP_KPI_DOC_SP.Tabn       ;
     [StrTabn     ]  tmpGP_KPI_DOC_SP.StrTabn    ;
     [Fio         ]  GetSingerFIO(tmpGP_KPI_DOC_SP.Fio, false);

     table tmpFields
     (
       [NRec     ]    tmpFields.NRec;
       [Code     ]    tmpFields.Code;
       [Name     ]    tmpFields.Name;
       [NPP      ]    tmpFields.NPP ;
       [cDoc     ]    tmpFields.cDoc;
       [GroupName]    tmpFields.GroupName;
       [Value    ]    GetSum  (tmpFields.NPP);
       [ValueD   ]    GetSumD (tmpFields.NPP);
       //[SUM(<tmpFields."ValueD">*<tmpFields."Agregate">,MasterData2)]  - не пашет
       [ValueIT  ]    GetSumIT(tmpFields.NPP);
       [wTypeFld ]    tmpFields.wTypeFld;
       [Razr     ]    tmpFields.Razr;
       [Option   ]    tmpFields.Option;
       [Agregate ]    if(IsBitCTW(tmpFields.Option,4),1.00,0.00);
       [KODGROUP ]    tmpFields.KODGROUP;
       [RAZDEL   ]    tmpFields.RAZDEL;
       [SUB      ]    tmpFields.SUB;
     );
  );
)
end;
//*****************************************************************************
datastream KPIReportFondStream
(
  [CFH            ]      CommonFormHeader;
  [ReportName     ]      GetReportTitle();
  [BossPost       ]      GetPostPerson(coGetTune('BOSS'));//;'Генеральный директор АО "НПО Энергомаш"';
  [Boss           ]      GetSingerFIO(sGetTune('BOSS'), true);
  [NachPost       ]      GetPostPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION')); //'Начальник управления мотивации и оплаты труда';
  [Nach           ]      GetSingerFIO(sGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION'), true);
  [NachPodr       ]      GetPodrPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION'));
  table tmpGrPodrFond
  (
     [cPodr       ]  tmpGrPodrFond.cPodr   ;
     [PodrName    ]  tmpGrPodrFond.PodrName;
     [PodrKod     ]  SubStr(tmpGrPodrFond.PodrKod,1,3) ;


     table tmpFields
     (
       [NRec     ]    tmpFields.NRec;
       [Code     ]    tmpFields.Code;
       [Name     ]    tmpFields.Name;
       [Option   ]    tmpFields.Option;
       [Agregate ]     if(IsBitCTW(tmpFields.Option,4),1,0);
       [NPP      ]    tmpFields.NPP ;
       [cDoc     ]    tmpFields.cDoc;
       [GroupName]    tmpFields.GroupName;
       [Value    ]    GetSumFond(tmpFields.NumCol);
       [ValueD   ]    GetSumFondD(tmpFields.NumCol);
     );
  );
)
end;
//*****************************************************************************
datastream KPIReportCrossFondStream
(
  [CFH            ]      CommonFormHeader;
  [ReportName     ]      GetReportTitle();
  [BossPost       ]      GetPostPerson(coGetTune('BOSS'));//;'Генеральный директор АО "НПО Энергомаш"';
  [Boss           ]      GetSingerFIO(sGetTune('BOSS'), true);
  [NachPost       ]      GetPostPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION')); //'Начальник управления мотивации и оплаты труда';
  [Nach           ]      GetSingerFIO(sGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION'), true);
  [NachPodr       ]      GetPodrPerson(coGettune('NPOEM_OWN.Raise.MANAGERMOTIVATION'));
  table tmpCrossTable
  (
    [PodrKod  ]   SubStr(tmpCrossTable.PodrKod,1,3);
    [PodrName ]   tmpCrossTable.PodrName;
    [cPodr    ]   tmpCrossTable.cPodr;
    [GroupName]   tmpCrossTable.GroupName;
    [ColName  ]   tmpCrossTable.ColName;
    [ColNPP   ]   tmpCrossTable.ColNPP;
    [cField   ]   tmpCrossTable.cField;
    [dValue   ]   tmpCrossTable.dValue;
  );
)
end;

//*****************************************************************************
procedure FullTables(sqlHandle : string; tableHandle : longint; Prim:string='');
{ timelog('FullTables:'+Prim);
  var stmt             : tptr;
  var ExecuteErrorCode : longint;
  _try
    {
      sqlFreeStr(stmt);
      stmt :=0;
      stmt := sqlAllocStmt;
      ExecuteErrorCode:=sqlPrepare(stmt,sqlHandle);
      if (ExecuteErrorCode = 0)
        { 
          sqlBindParamByName(stmt,'pDoc'      , pGP_KPI_DOC);
          sqlBindParamByName(stmt,'pType'     , pType);
          sqlBindParamByName(stmt,'pFieldDoc' , pFieldDoc);
          sqlBindParamByName(stmt,'pMonth'    , pMonth);
          sqlBindParamByName(stmt,'pYear'     , pYear);
          sqlBindParamByName(stmt,'pRaiseType', pRaiseType);
          sqlBindParamByName(stmt,'pRaise'    , pRaise);

          ExecuteErrorCode := SqlExecute(stmt);
          if (ExecuteErrorCode = 0)
            { 
              ExecuteErrorCode := SqlFetchIntoByName(stmt, tableHandle);
              ReReadRecord(tableHandle);
              timelog('  FullTables отобрали '+string(RecordsInTable(tableHandle)));
              if (ExecuteErrorCode <> 0)
                Message('Ошибка : ' + string(ExecuteErrorCode)); 
            }
          else 
            Message('Ошибка : ' + string(ExecuteErrorCode)); 
        }
      else
        Message('Ошибка : ' + string(ExecuteErrorCode));
    }
  _finally
    {
    }
}
//*****************************************************************************
Procedure CheckNullColumn;
{
  var hasValue : array [1..20] of boolean;
  var i : word;

  for(i:= 1; i <= 20; inc(i))
    hasValue[i] := false;

  var nn : word; nn := 20;

  _LOOP tmpGP_KPI_DOC_SP   
    if (nn <= 0)
      break;  
    else
      _LOOP tmpFields
        if (nn <= 0)
          break;
        else
          if (NOT hasValue[tmpFields.NPP])
            {
               hasValue[tmpFields.NPP] := if (tmpFields_F.wTypeFld = 1, GetSumD(tmpFields.NPP) <> 0, Trim(GetSum(tmpFields.NPP)) <> '');
               if (hasValue[tmpFields.NPP])
                 nn := nn - 1;
            }

  for(i:= 1; i <= 20; inc(i))
    if (NOT hasValue[i])
      delete tmpFields where ((i == tmpFields.NPP));
}
//*****************************************************************************
Procedure SetCurrentPosition(cD : comp);
{
  set pGP_KPI_DOC := cD;
  if (GetFirst GP_KPI_DOC = tsok)
    set pType := GP_KPI_DOC.wType;
  timelog('KPI_REPORT->SetCurrentPosition:pDoc='+string(pGP_KPI_DOC,0,0)+','+GP_KPI_DOC.DOCNUMBER);
}

//*****************************************************************************
Procedure CreateCrossTable;
{
   _LOOP tmpPodrFond
     _LOOP tmpFields_F
       {
         if (GetFirst tmpCrossTable where ((tmpPodrFond.cPodr == tmpCrossTable.cPodr
                                        AND tmpFields_F.NRec  == tmpCrossTable.cField)) <> tsOk)
           {
             ClearBuffer(#tmpCrossTable);
             tmpCrossTable.cPodr    := tmpPodrFond.cPodr;
             tmpCrossTable.PodrName := tmpPodrFond.PodrName;
             tmpCrossTable.PodrKod  := tmpPodrFond.PodrKod;
             tmpCrossTable.cField   := tmpFields_F.NRec;
             tmpCrossTable.GroupName:= tmpFields_F.GroupName;
             tmpCrossTable.ColName  := tmpFields_F.Name;
             tmpCrossTable.ColNPP   := tmpFields_F.NPP;
             if (insert current tmpCrossTable <> tsOk)
               {}
           }

         set tmpCrossTable.dValue := tmpCrossTable.dValue + TryDouble(GetValue(tmpFields_F.NPP));
         if (update current tmpCrossTable = tsOk)
           {}
       }
}
//*****************************************************************************
Procedure InsTotalRecor;
{
  var vals : array[1..GP_KPI_Doc_Max_FLD_SP] of double;
  var i : word;
  var bTotal : boolean; bTotal := false;

  _LOOP tmpGP_KPI_DOC_SP
    if (GetFirst GP_KPI_Doc_SP = tsOk)
      for(i := 1; i <= GP_KPI_Doc_Max_FLD_SP; inc(i))
        if (GetFirst tmpFields_F where ((i == tmpFields_F.Npp )) = tsok)
          if (tmpFields_F.wTypeFld = 1)
            {
              bTotal := true;
              vals[i] += Double(Replace(GP_KPI_Doc_SP.fArrValue[i], ',', '.'));
            }

  if (bTotal) 
    {
      ClearBuffer(#tmpGP_KPI_DOC_SP);
      tmpGP_KPI_DOC_SP.NRec           := GetNextNRec(tntmpGP_KPI_DOC_SP, 0);
        tmpGP_KPI_DOC_SP.sPost          := 'ИТОГО:';
      tmpGP_KPI_DOC_SP.wTypeLine      := 1;
      for(i := 1; i <= GP_KPI_Doc_Max_FLD_SP; inc(i))
        {
          tmpGP_KPI_Doc_SP.dValue[i] := vals[i];
        }

      if (insert current tmpGP_KPI_DOC_SP = tsOk)
        {}
    }
}

//*****************************************************************************
Procedure RunFRPdf(frType : word ; sName : string);
{
  //sName := '';
  npp := 0;
  var boPrintToPDF :boolean; boPrintToPDF := true;
  var ReportNames  : array [0..0] of String;

  if (ExistTune('NPOEM_OWN.Raise.Print2Pdf'))
     boPrintToPDF := boGetTune('NPOEM_OWN.Raise.Print2Pdf');
  //boPrintToPDF := false;
  if (NOT boPrintToPDF)
    {
      case frType of
        0 : RunFReport(KPIReportStream         , sName, true);
        1 : RunFReport(KPIReportCrossFondStream, sName, true);
      end;
    }
  else
    {
      var rHandle : tptr;

      case frType of
        0 : rHandle := FRCreate(KPIReportStream         );
        1 : rHandle := FRCreate(KPIReportCrossFondStream);
      end;

      if FROpenReport(rHandle, sName)
        if (FROpenReport(rHandle, sName))
          {
#IFDEF _2019_02_13_
            var ExportParam:String;
            //'Pages=1-5;Picture=False;DeleteEmptyRows=True;OpenAfterExport=True'
            ExportParam:='ShowDialog=False;OpenAfterExport=True';
#ELSE
            var exportParam : frxPDFExportParam;
            ClearAdvRecord(exportParam);
            FRGetDefaultParameters(frExportPDF, exportParam);
            ExportParam.Pages:='';
            ExportParam.ShowDialog := False;
            ExportParam.OpenAfterExport := True;
#ENDIF

            if (FRSetParameters(rHandle, frExportPDF, exportParam))
              FRExportReport(rHandle, frExportPDF, '');
          }

      FRDestroy(rHandle);
    }
} //Procedure RunFRPdf(frType : word ; sName : string);

//*****************************************************************************
window winMonth 'Выбор периода' DoAccept, EscClose, Cyan;
  Show at (, , 32, 5);
Panel pWinMonth;  
Screen scrMonth (, , sci13Esc);
Fields
  pMonth   ('Отчетный период')    :  [LIST 1'Январь'
                                           ,'Февраль'
                                           ,'Март'
                                           ,'Апрель'
                                           ,'Май'
                                           ,'Июнь'
                                           ,'Июль'
                                           ,'Август'
                                           ,'Сентябрь'
                                           ,'Октябрь'
                                           ,'Ноябрь'
                                           ,'Декабрь'], protect;
  pYear        ('Год отчета')                 : NoProtect, SpinButton [1, 1900, 2100];    
Buttons
  cmOK    , Default , , 'Печать', , sci1Esc;
  cmCancel,         , , 'Отмена', ,        ;
<<
    `Месяц`.@@@@@@@@@@@@@@@
    `Год`  .@@@@@@@@@@@@@@@
        
 <. Печать .>     <. Отмена .>
>>
end;
end;
HandleEvent
cmOk :
  {
    set pMonth := pMonth;
    set pYear  := pYear;
    PutCommand(cmDefault);
  }
end;
end;

//*****************************************************************************

property pDoc : comp read pGP_KPI_DOC write SetCurrentPosition(result);

//*****************************************************************************
HandleEvent

cmInit: 
  {
    timelog_init;
    timelog('KPIReport->cmInit:pGP_KPI_DOC='+string(pGP_KPI_DOC)+',pRaise='+string(pRaise));
    if (GetFirst GP_KPI_Doc <> tsOk)
       {
         Message('Ошибка позиционирования ' + string(pDoc));
         Abort;
         Exit;
       }

    set pType := GP_KPI_Doc.wType;
    delete all tmpFields;
    delete all tmpPodrFond;

    case GP_KPI_DOC.wType of
         2 :
       {
         set pFieldDoc := GP_KPI_Doc.cGP_KPI_FOND;
         set pRaiseType := 2;

         if (NOT ReadMyDsk(pYear, 'KPIReport_pYear', True))
           set pYear := Year(Cur_Date);

         if (NOT ReadMyDsk(pMonth, 'KPIReport_pMonth', True))
           set pMonth := Month(Cur_Date);

         if (RunWindowModal(winMonth) = cmDefault)
           {
             SaveMyDsk(pYear , 'KPIReport_pYear');
             SaveMyDsk(pMonth, 'KPIReport_pMonth');

             StartNewVisual(vtRotateVisual, vfTimer + vfConfirm, 'Идет выгрузка данных...', 1);
             FullTables(Sqltmp_Ved_Fond, #tmpPodrFond,'Sqltmp_Ved_Fond->tmpPodrFond');
             FullTables(SqlTmp_KPI_FieldsFond, #tmpFields,'SqlTmp_KPI_FieldsFond->tmpFields');

             StopVisual('', 0);
             GroupData();
             CreateCrossTable();
             ReReadRecord;
             RunFRPdf(1, GetReportName());
             Abort;
             Exit;
           }
       }
         3 :
       {
         set pFieldDoc := GP_KPI_Doc.cGP_KPI_TypeVed;
         set pRaiseType := 3;
       } 
       101
     , 102
     , 103
     , 104
     , 100 :
       {
         if pRaise>0
         { if getfirst GP_KPI_RAISE=tsok {}
           timelog('KPIReport->cmInit:GP_KPI_RAISE='+string(pGP_KPI_DOC)+',pRaise='+string(pRaise));
           set pFieldDoc := GP_KPI_RAISE.NRec;
           set pRaiseType := 0;
         }
         else
         { pRaiseType:=GP_KPI_DOC.wType;
           pFieldDoc :=GP_TYPEDOCS.Nrec;
         }
       }
    end;
    delete all tmpFields;

    delete all tmpGP_KPI_DOC_SP;
    FullTables(SqlTmpGP_KPI_DOC_SP_Raise, #tmpGP_KPI_DOC_SP,'SqlTmpGP_KPI_DOC_SP_Raise->tmpGP_KPI_DOC_SP');
                  
    FullTables(SqlTmp_KPI_Fields, #tmpFields,'SqlTmp_KPI_Fields->tmpFields');

    InsTotalRecor;

   /*
    if (GP_KPI_DOC.wType = 102)
      {
        ClearBuffer(#tmpFields);
        tmpFields.Code        := '';
        tmpFields.Name        := 'факт %';
        tmpFields.NPP         := 102;
        tmpFields.cDoc        := comp(0);
        tmpFields.GroupName   := '';
        tmpFields.cGroup      := comp(0);
        tmpFields.NumCol      := 0;
        tmpFields.wTypeFld    := 0;
        tmpFields.Razr        := 0;
        tmpFields.Option      := 0;
        tmpFields.KODGROUP    := 0;
        tmpFields.RAZDEL      := 0;
        tmpFields.SUB         := 0;
        tmpFields.wOrderPrint := 9;
        if (insert current tmpFields = tsOk)
          {}
      }
     */

    case GP_KPI_DOC.wType of
     101
   , 102
   , 103
   , 104
   , 100 :
       if (pRaise = 0)
         CheckNullColumn;
    end;
    ReReadRecord(#tmpFields_F);
    RunFRPdf(0, GetReportName());
    abort;
  }

end;
end.
