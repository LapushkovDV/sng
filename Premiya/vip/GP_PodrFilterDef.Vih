/*************************************************************************************************\
* Наименование: Функции по работе с фильтрами по подразделению                                    *
* Контур/Модуль: Заработная плата                                                                 *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#1704         |09/01/18|Кириллов Э.П.            |НПО Энергомаш                    *
* Разработка  |#794          |09/01/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/

#ifndef _PodrFilterDef_INCLUDED_
#define _PodrFilterDef_INCLUDED_

#ifdef ComponentVersion
#component "GP_Common"
#end
table struct tmp_podrier_GP "Сохранить иерархию"
(
  crec : comp "Ссылка на подр. ШР",
  datepodr : Date "Дата подр. для истории",
  dmpodrnm:array[1..10] of string "Код[20]+имя подр.",
  dmpodr_c :array[1..10] of comp "nrec подр.",
  t_podrlev:word
)
with index
( tmp_podrier_GP01 = crec,
  tmp_podrier_GP02 = crec + datepodr
);

ObjInterface ObjGP_PodrFilterDef;
//==============================
// инициализировать фильтр
//==============================
Procedure  Zar_InitFltPodr ;
//==============================
// проверить фильтр
//==============================
Function Zar_CheckFltPodr(wwc_podr :comp ) :boolean ;
// установить выбор по внешнему атрибуту "Краткое наименование"
Procedure SetShot_Name(w : boolean ) ;
// записать в протокол
Procedure SetLogFile (w :string) ;
procedure Mylog(w :string );

//================================
// перенести данные из маркера в маркер
//================================
// Копирует данные из маркера fromMarker в маркер toMarker
procedure MarkCopyMarkers(fromMarker : tptr ; toMarker : tptr) ;
// перенести в Pick
Procedure Mark2Pic(fromMarker : tptr ;wListDest : word) ;
Procedure Pic2Mark(toMarker : tptr ;wListDest : word) ;
//================================
// перенести данные из заданного маркера в маркер по имени
//================================
procedure MarkCopyMyToCat(fromMarker :tptr;nmmarker :string) ;
//================================
// перенести данные в заданный маркер из маркера по имени
//================================
  procedure MarkCopyCatToMy(fromMarker :tptr;nmmarker :string) ;
// получить фильтр по подразделению в кадрах(catalogs) 
public Function GetPodrFilterName(wMarker :tptr):string  ;
public Function GetPodrFilterName1(wMarker :tptr;wwhist:boolean;wdate_hist:date ):string  ;
public Function GetKatPodrFilterName(wMarker :tptr):string  ;
// получить значение на уровне
Function katpodrGetLevel(wwpodr:string;wcnrec : comp; wlev :word ) :string ;
// получить значение на уровне
Function katpodrGetLevelName(wlev :word) :string ;
// получить значение на уровне nrec
Function katpodrGetLevelNrec(wlev :word) :comp ;

// инициализация свертки до уровня
Procedure katpodrGetLevelInit ;
// найти подразделение по наименованию центра ответсвенности 
function FindKatPodrByFpco(wwpodr :string ) :comp ;
//=========================
// Проверить подчиненость одного центра ответсвенносит другому
//=========================
Function CheckPodchinenieFPCO(w_Fpco_main :comp; w_Fpco_slave :comp):boolean;
//=========================
// Проверить подчиненость одного подразделения другому
//=========================
Function CheckPodchineniePodr(w_podr_main :comp; w_podr_slave :comp):boolean;
end; 

VipInterface GP_PodrFilterDef Implements ObjGP_PodrFilterDef
#ifdef ATL51
Licensed (free)
#end
parameters
(tp_spr :word ;
 marker :tptr ;
 namefilter :string 
 )
;
#end
