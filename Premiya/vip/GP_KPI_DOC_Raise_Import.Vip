/*************************************************************************************************\
* Наименование: Импорт сумм фондов из КИС                                                         *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |03/12/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include GP_Status.vih
#include GP_KPI_RaiseEdit.Vih


VipInterface GP_KPI_DOC_Raise_Import Licensed(free);
#doc
Импорт сумм/процентов по премиям из КИС
#end
Interface GP_KPI_DOC_Raise_Import 'Импорт сумм/процентов по премиям из КИС' , EscClose;
//---------------------------------------
Function ChkErr(_B_DEPARTCODE:string;_B_FIO_TXTFIELD:string) : boolean; forward;
//----------------------------------
Table Struct tmp_Raise
(  cDoc         :comp
  ,cDocSP       :Array[1..10] of comp
  ,cGP_KPI_RAISE:Array[1..10] of comp
  //-----------
  ,B_DOCNUMBER   :string[50]
  ,B_CITEZENID   :string[50] //Persons.Nrec
  ,B_FIO_TXTFIELD:string[50]
  ,B_JOBTITLE_TXTFIELD :string[150]
  ,B_TAB_NO            :string[50]
  ,B_TAB_NEW           :string[50]
  ,B_KATNAME           :string[50]//	Кат. перс.
  ,B_KATTYPE           :string[50]//:string[50]//Категория (РСС/Рабочие/Руководители)
  ,B_WORKHOURSPLAN     :double//Отработанное время план
  ,B_WORKHOURSFACT     :double//Отработанное время факт
  ,B_OVERTIME          :double//Сверхурочно
  ,B_HOLIDAY           :double//Выходные/праздничные
  ,B_CODE001           :double//Сдельно
  ,B_CODE003           :double//Повременно
  ,B_CODE009           :double//Оплата сверхурочной работы (одинарный размер)
  ,B_CODE010           :double//Опл. труда в выходн. и празднич. дни (одинарн. размер)
  ,B_QUALITYPROCPLAN   :double//Процент премии за качество и дисциплину труда плановый
  ,B_HEADFUNDBONUSVAL  :double//Премия из фонда руководителя
  ,B_PROFIT            :double//Итого доход
  ,B_QUALITYPROCFACT   :double//Процент премии за качество и дисциплину труда фактический
  ,B_QUALITYPROCVAL    :double//Премия за качество и дисциплину труда
  ,B_PERFOMANCEKOEFPLAN:double//Коэффициент выполнения показателей премирования
  ,B_PERFOMANCEPROCPLAN:double//Нормативный % для формирования фонда премирования за результаты работы подразделения и результаты работы работника
  ,B_PERFOMANCEFUNDPLAN:double//Сумма для формирования фонда премирования за результаты работы подразделения и результаты работы работника, руб.
  ,B_PERFOMANCEKOEFFACT:string[50]//Оценка личной результативности работника
  ,B_PERFOMANCEBONUSFAC:double//Коэффициент оценки личной результативности работника
  ,B_HEADFUNDPROCPLAN  :double//Нормативный % для формирования премиального фонда руководителя
  ,B_HEADFUNDPROCFACT  :double//Процент премии фонда руководителя
  ,B_HEADFUNDVAL       :double//Премия фонда руководителя факт
  ,B_BONUSALL          :double//Премия всего
  ,B_PROFITALL         :double//Доход всего
  ,B_BONUSPROC         :double//Процент премии итоговый
  ,B_TIMECARDID        :string[50]//Табель
  ,B_PERFOMANCEVAL     :double//Премирование результативности работника
  ,B_HEADFUNDVALPLAN   :double//Премия фонда руководителя план
  ,B_PERFOMANCEDIFFER  :double//Разница по результативности работника
  ,B_HEADFUNDDIFFER    :double//Разница премии фонда руководителя
  ,B_HEADFUNDBONUSSUMM :double//Итого ио фонда руководителя
  ,B_PERFOMANCEPROCEND :double//Итоговый процент премии за результативность
  ,B_HEADFUNDPROCEND   :double//Итоговый процент из фодна руководителя
  ,B_WORKDAYSPLAN      :double//
  ,B_WORKDAYSFACT      :double//
  ,B_DEPARTMENTID      :string[50]//Подразделение
  ,B_DEPARTCODE        :string[50]//Подразделение код
  ,B_IND_COMPLETE_PROC :double//Нормативный % выполнения показателей премирования основного производства
  ,B_IND_COMPLETE_KOEFF:double//Коэффициент выполнения показателей премирования основного производства
  ,B_IND_COMPLETE_SUMM :double//Премия за  выполнение показателей премирования основного производства
  ,B_IND_COMPLETE_PROCF:double//Фактический % выполнения показателей премирования основного производства
  ,B_IND_COMPLETE_PROCC:double//Фактический % выполнения показателей премирования ОП * на показатель
  ,B_PERFOMANCEPROCENDC:double//Итоговый процент премии за результативность * на показатель
  //-------------------------------------- Импорт
  ,DOCPREF     :string[50]
  ,DOCNUMBER   :string[50]
  ,DCODE       :string[50]
  ,STATUSNAME  :string[50]
  ,ID          :string[50]
  ,CITEZENID   :string[50]
  ,EMPLOYEEID  :string[50]
  ,STRUCTUREID :string[50]
  ,BONUSID     :string[50]
  ,FIO_TXTFIELD:string[50]
  ,JOBTITLE_TXTFIELD :string[150]
  ,TAB_NO            :string[50]
  ,KATNAME           :string[50]//	Кат. перс.
  ,KATTYPE           :string[50]//:string[50]//Категория (РСС/Рабочие/Руководители)
  //----------------------------------------------
  ,WORKHOURSPLAN     :double//Отработанное время план
  ,WORKHOURSFACT     :double//Отработанное время факт
  ,OVERTIME          :double//Сверхурочно
  ,HOLIDAY           :double//Выходные/праздничные
  ,CODE001           :double//Сдельно
  ,CODE003           :double//Повременно
  ,CODE009           :double//Оплата сверхурочной работы (одинарный размер)
  ,CODE010           :double//Опл. труда в выходн. и празднич. дни (одинарн. размер)
  ,QUALITYPROCPLAN   :double//Процент премии за качество и дисциплину труда плановый
  ,HEADFUNDBONUSVAL  :double//Премия из фонда руководителя
  ,PROFIT            :double//Итого доход
  ,QUALITYPROCFACT   :double//Процент премии за качество и дисциплину труда фактический
  ,QUALITYPROCVAL    :double//Премия за качество и дисциплину труда
  ,PERFOMANCEKOEFPLAN:double//Коэффициент выполнения показателей премирования
  ,PERFOMANCEPROCPLAN:double//Нормативный % для формирования фонда премирования за результаты работы подразделения и результаты работы работника
  ,PERFOMANCEFUNDPLAN:double//Сумма для формирования фонда премирования за результаты работы подразделения и результаты работы работника, руб.
  ,PERFOMANCEKOEFFACT:string[50]//Оценка личной результативности работника
  ,PERFOMANCEBONUSFAC:double//Коэффициент оценки личной результативности работника
  ,HEADFUNDPROCPLAN  :double//Нормативный % для формирования премиального фонда руководителя
  ,HEADFUNDPROCFACT  :double//Процент премии фонда руководителя
  ,HEADFUNDVAL       :double//Премия фонда руководителя факт
  ,BONUSALL          :double//Премия всего
  ,PROFITALL         :double//Доход всего
  ,BONUSPROC         :double//Процент премии итоговый
  ,TIMECARDID        :string[50]//Табель
  ,PERFOMANCEVAL     :double//Премирование результативности работника
  ,HEADFUNDVALPLAN   :double//Премия фонда руководителя план
  ,PERFOMANCEDIFFER  :double//Разница по результативности работника
  ,HEADFUNDDIFFER    :double//Разница премии фонда руководителя
  ,HEADFUNDBONUSSUMM :double//Итого ио фонда руководителя
  ,PERFOMANCEPROCEND :double//Итоговый процент премии за результативность
  ,HEADFUNDPROCEND   :double//Итоговый процент из фодна руководителя
  ,WORKDAYSPLAN      :double//
  ,WORKDAYSFACT      :double//
  ,DEPARTMENTID      :string[50]//Подразделение
  ,DEPARTCODE        :string[50]//Подразделение код
  ,IND_COMPLETE_PROC :double//Нормативный % выполнения показателей премирования основного производства
  ,IND_COMPLETE_KOEFF:double//Коэффициент выполнения показателей премирования основного производства
  ,IND_COMPLETE_SUMM :double//Премия за  выполнение показателей премирования основного производства
  ,IND_COMPLETE_PROCF:double//Фактический % выполнения показателей премирования основного производства
  ,IND_COMPLETE_PROCC:double//Фактический % выполнения показателей премирования ОП * на показатель
  ,PERFOMANCEPROCENDC:double//Итоговый процент премии за результативность * на показатель

)
with index
( tmp_Raise01 = B_DEPARTCODE+B_FIO_TXTFIELD//Подразделение код
 ,tmp_Raise02 = B_CITEZENID+B_DEPARTCODE
);
//----------------------------------
var
  nm_file:string;
  logfilenm:string;
  logfilekl:boolean;
  wYear_Flt,wMonth_Flt:word;
  Status              : GP_Status NoAuto;
  wOption:word;
  wFlt:word;
  pGP_KPI_DOC_SP :comp;
  //-----------------------------------------
  // Фильтры - базовые
  //-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
   isFilterRun  :boolean;////признак работы ограничений
   wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :longint;
   #mrkfld_(KatPodr)

//----------------------------------
Create view
var
  Podr_kod:string;
as select GP_KPI_DOC.Nrec
From GP_KPI_DOC,GP_KPI_DOC_SP
 ,tmp_Raise(tmp_Raise01)
 ,GP_KPI_RAISe
 ,KatPodr
 ,KatPodr KatPodr_SP
 ,GP_TypeDocs
 ,Persons,Lschet,KlKatego
 ,Catalogs CatPost
 //,StaffStruct
 //,Appointments
 //---------------------------------
 , tmp_kpi_sum(tmp_kpi_sum01)
 //----------------------------
 , KatPodr KatPodr_Flt
 , KatPodr KatPodr_Find
where ((
//-------------------------
    pGP_KPI_DOC_SP == GP_KPI_DOC_SP.Nrec
and GP_KPI_DOC_SP.cGP_KPI_Doc ==GP_KPI_Doc.Nrec
and GP_KPI_DOC.cKatPodr    == KatPodr.nrec
//-------------------------
and GP_KPI_DOC_SP.cGP_KPI_Raise == GP_KPI_RAISE.Nrec
and GP_KPI_DOC_SP.cKatPodr == Katpodr_Sp.Nrec
and GP_KPI_DOC_SP.cPersons == Persons.Nrec
and GP_KPI_DOC_SP.cLschet  == Lschet.Nrec
and GP_KPI_Doc_SP.cKlKatego== KlKatego.Nrec
and GP_KPI_Doc_SP.cPost    == CatPost.Nrec
//and GP_KPI_Doc_SP.cAppointments == Appointments.Nrec
//and Appointments.StaffStr       == StaffStruct.nrec
//-----------------------------
and 101 == GP_TypeDocs.wType
and wc_nrec ==  KatPodr_Flt.Nrec
and Podr_kod == KatPodr_Find.Kod
))
bounds byErr root == tmp_Raise.B_DEPARTCODE(noindex)
 and (ChkErr(tmp_Raise.B_DEPARTCODE,tmp_Raise.B_FIO_TXTFIELD) )
 ordered by TableOrder

;
//------------------------------------
Create view vSpKau
var
  pSpKau:comp;
as select SpKau.name
From SpKau
where ((
   pSpKau == Spkau.nrec
)); //Create view vSpKau


#include Excel_Imp.Vpp


//------------------------------------------------
Function ChkErr(_B_DEPARTCODE:string;_B_FIO_TXTFIELD:string) : boolean;
{ #__UNUSED__(_B_DEPARTCODE,_B_FIO_TXTFIELD)
  Result:=True;
//      tmp_Raise.Su01 <>tmp_Raise.Su01o or tmp_Raise.Su02 <>tmp_Raise.Su02o
#UNDEF GP_KPI_DOC_Raise_Import_CHK
#DECLARE GP_KPI_DOC_Raise_Import_CHK (FLD)
  if tmp_Raise.#(FLD)<>tmp_Raise.B_#(FLD) exit;
#END
  if not IsBitCTW(wOption,1)
  { #GP_KPI_DOC_Raise_Import_CHK(WORKHOURSPLAN     )//Отработанное время план
    #GP_KPI_DOC_Raise_Import_CHK(WORKHOURSFACT     )//Отработанное время факт
    #GP_KPI_DOC_Raise_Import_CHK(OVERTIME          )//Сверхурочно
    #GP_KPI_DOC_Raise_Import_CHK(HOLIDAY           )//Выходные/праздничные
  }
  if not IsBitCTW(wOption,2)
  {
    #GP_KPI_DOC_Raise_Import_CHK(CODE001           )//Сдельно
    #GP_KPI_DOC_Raise_Import_CHK(CODE003           )//Повременно
    #GP_KPI_DOC_Raise_Import_CHK(CODE009           )//Оплата сверхурочной работы (одинарный размер)
    #GP_KPI_DOC_Raise_Import_CHK(CODE010           )//Опл. труда в выходн. и празднич. дни (одинарн. размер)
  }
  if not IsBitCTW(wOption,3)
  { #GP_KPI_DOC_Raise_Import_CHK(QUALITYPROCPLAN   )//Процент премии за качество и дисциплину труда плановый
    #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDPROCPLAN  )//Нормативный % для формирования премиального фонда руководителя
    #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEPROCPLAN)//Нормативный % для формирования фонда премирования за результаты работы подразделения и результаты работы работника
    #GP_KPI_DOC_Raise_Import_CHK(IND_COMPLETE_PROC )//Нормативный % выполнения показателей премирования основного производства
  }
  if not IsBitCTW(wOption,4)
  {
    #GP_KPI_DOC_Raise_Import_CHK(QUALITYPROCVAL    )//Премия за качество и дисциплину труда
    #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEFUNDPLAN)//Сумма для формирования фонда премирования за результаты работы подразделения и результаты работы работника, руб.
    #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDVAL       )//Премия фонда руководителя факт
    #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEVAL     )//Премирование результативности работника
    #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDVALPLAN   )//Премия фонда руководителя план
    #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEDIFFER  )//Разница по результативности работника
    #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDDIFFER    )//Разница премии фонда руководителя
    #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDBONUSSUMM )//Итого ио фонда руководителя
    //#GP_KPI_DOC_Raise_Import_CHK(HEADFUNDPROCEND   )//Итоговый процент из фодна руководителя
    #GP_KPI_DOC_Raise_Import_CHK(IND_COMPLETE_SUMM )//Премия за  выполнение показателей премирования основного производства
  } //if IsBitCT(wOption,1)
  //------------------------
  #GP_KPI_DOC_Raise_Import_CHK(KATTYPE)// КАТЕГОРИЯ
  //------------------------
  #GP_KPI_DOC_Raise_Import_CHK(QUALITYPROCFACT   )//Процент премии за качество и дисциплину труда фактический
  #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEKOEFPLAN)//Коэффициент выполнения показателей премирования
  #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEKOEFFACT)//Оценка личной результативности работника
  #GP_KPI_DOC_Raise_Import_CHK(PERFOMANCEBONUSFAC)//Коэффициент оценки личной результативности работника

  #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDBONUSVAL  )//Премия из фонда руководителя
  #GP_KPI_DOC_Raise_Import_CHK(HEADFUNDPROCFACT  )//Процент премии фонда руководителя

  #GP_KPI_DOC_Raise_Import_CHK(IND_COMPLETE_KOEFF)//Коэффициент выполнения показателей премирования основного производства
  #GP_KPI_DOC_Raise_Import_CHK(IND_COMPLETE_PROCF)//Фактический % выполнения показателей премирования основного производства
//GP_KPI_DOC_Raise_Import_CHK(IND_COMPLETE_PROCC)//Фактический % выполнения показателей премирования ОП * на показатель
  Result:=False;

} //Function ChkErr(_podr_kod:string;_sFio:string) : boolean; Cacheable;

#include ShowKau.Vpp
//------------------------------------------------
// Получить значение аналитики
//------------------------------------------------
Function GetAnaliticName(_KodGroup:word;_cKau:comp):string; Cacheable;
{ Result:='';
  if _KodGroup>10000
  { vSpkau.pSpKau:=_cKau;
    if vSpKau.getfirst spkau=tsok
      Result:=vSpKau.Spkau.name;
  }
  else
  { Result:=#ShowKau(_KodGroup,_cKau);
  }
} //Function GetAnaliticName(_KodGroup:word;_cKau:comp):string; Cacheable;

//------------------------------------------------
// Получить значение аналитики
//------------------------------------------------
Function GetAnaliticNrec(_KodGroup:word;_sKau:string):comp; Cacheable;
{ Result:=0;
  if _KodGroup>10000
  {
    if vSpKau.getfirst spkau where (( _KodGroup == spKau.KodGrKau and _sKau== SpKau.name)) =tsok
      Result:=vSpKau.Spkau.nrec;
  }
  else
  { Result:=0;
  }
} //Function GetAnaliticName(_KodGroup:word;_cKau:comp):string; Cacheable;



Function Fill_Tmp_Table:boolean;
{   Result:=False;
    Timelog('GP_KPI_DOC_Raise_Import->Fill_Tmp_Table:START');
    MTRetrieve(#tmp_kpi_sum,mfFilters + mfClear);//+mfClearFilters
    delete all tmp_kpi_sum;
    SQL select
     GP_KPI_GROUPPERS.Name as sortkey
    ,GP_KPI_DOC.Nrec             cRec_1
    ,GP_KPI_DOC_SP.Nrec          cRec_2
    ,GP_KPI_DOC_SP.cGP_KPI_Raise cRec_3
    ,CASE WHEN BITAND(:(wFlt),1)>0 THEN GP_KPI_DOC.cKatPodr ELSE GP_KPI_DOC_SP.cKatPodr END   cRec_4 //GP_KPI_FOND.Nrec
    ,GP_KPI_DOC_SP.cPersons  cRec_5
    #GP_KPI_DOC_SP_VAL(01)
    #GP_KPI_DOC_SP_VAL(02)
    #GP_KPI_DOC_SP_VAL(03)
    #GP_KPI_DOC_SP_VAL(04)
    #GP_KPI_DOC_SP_VAL(05)
    #GP_KPI_DOC_SP_VAL(06)
    #GP_KPI_DOC_SP_VAL(07)
    #GP_KPI_DOC_SP_VAL(08)
    #GP_KPI_DOC_SP_VAL(09)
    #GP_KPI_DOC_SP_VAL(10)
    #GP_KPI_DOC_SP_VAL(11)
    #GP_KPI_DOC_SP_VAL(12)
    #GP_KPI_DOC_SP_VAL(13)
    #GP_KPI_DOC_SP_VAL(14)
    #GP_KPI_DOC_SP_VAL(15)
    #GP_KPI_DOC_SP_VAL(16)
    #GP_KPI_DOC_SP_VAL(17)
    #GP_KPI_DOC_SP_VAL(18)
    #GP_KPI_DOC_SP_VAL(19)
    #GP_KPI_DOC_SP_VAL(20)
    From GP_KPI_DOC
    inner join GP_KPI_DOC_SP on GP_KPI_DOC_SP.cGP_KPI_DOC = GP_KPI_DOC.Nrec
         and #comp(0)<GP_KPI_DOC_SP.cGP_KPI_Raise
    inner join Persons on Persons.Nrec = GP_KPI_DOC_SP.cPersons
    inner join GP_KPI_GROUPPERS_SP on GP_KPI_GROUPPERS_SP.cKlKatego = GP_KPI_DOC_SP.cKlKatego
    inner join GP_KPI_GROUPPERS    on GP_KPI_GROUPPERS.Nrec         = GP_KPI_GROUPPERS_SP.cGroupPers
    where GP_KPI_DOC.wMonth =:(wMonth_Flt) and GP_KPI_DOC.wYear=:(wYear_Flt)
      and GP_KPI_DOC.wType=101
    into tmp_kpi_sum;
  ReReadRecord(#tmp_kpi_sum);
  if GetMarkerCount(Marker_Katpodr)>0
  { delete from tmp_kpi_sum where (( root == tmp_kpi_sum.sortname
      and ( not FoundMarker(Marker_KatPodr,tmp_kpi_sum.cRec[4]) )
     ))

  }

  _Loop tmp_kpi_sum
  { if not NextVisual then exit;
    var _sPodr:string='';
    var _sPers:string='';
    pGP_KPI_DOC_SP:=tmp_kpi_sum.cRec[2];
    if getfirst GP_KPI_DOC_SP<>tsok continue;
    if getfirst Katpodr_Sp<>tsok continue;
    _sPodr:=Katpodr_Sp.Kod;
    _sPers:=string(tmp_kpi_sum.cRec[5]);
    if getfirst tmp_Raise where ((
             _sPers == tmp_Raise.B_CITEZENID
         and _sPodr == tmp_Raise.B_DEPARTCODE
     )) <>tsok
    { clearbuffer(#tmp_Raise);
      tmp_Raise.B_CITEZENID         :=_sPers;
      tmp_Raise.B_DEPARTCODE        :=_sPodr;
      tmp_Raise.cDoc                :=tmp_kpi_sum.cRec[1];
      tmp_Raise.B_DOCNUMBER         :=GP_KPI_DOC.DOCNUMBER;
      tmp_Raise.B_FIO_TXTFIELD      :=Replace(MyGetInitial(Persons.Fio,true),'  ',' ');
      tmp_Raise.B_JOBTITLE_TXTFIELD :=CatPost.Name;
      tmp_Raise.B_TAB_NEW           :=GP_KPI_DOC_SP.StrTabn;
      var _sTabn:string=string(Persons.Tabnmb);
      tmp_Raise.B_TAB_NO            :=Substr(_sTabn,1,Length(_sTabn)-3);
      tmp_Raise.B_KATNAME           :=KlKatego.KOD;//	Кат. перс.
      tmp_Raise.B_KATTYPE          :=Tmp_Kpi_sum.sortname;//:string[50]//Категория (РСС/Рабочие/Руководители)
      insert current tmp_Raise;
    }
    if getfirst GP_KPI_RAISE=tsok {}
//-------------------
      /*
      tmp_Raise.PROFIT            :=0;//Итого доход
      tmp_Raise.BONUSALL          :=0;//Премия всего
      tmp_Raise.PROFITALL         :=0;//Доход всего
      tmp_Raise.BONUSPROC         :=0;//Процент премии итоговый
      tmp_Raise.TIMECARDID        :=0;//Табель
      tmp_Raise.WORKDAYSPLAN      :=0;//
      tmp_Raise.WORKDAYSFACT      :=0;//
      tmp_Raise.DEPARTMENTID      :=0;//Подразделение
      tmp_Raise.DEPARTCODE        :=0;//Подразделение код
      */

    CASE GP_KPI_RAISE.Name of
    'Премия за результаты работы':
    { tmp_Raise.cDocSP[1]         :=tmp_kpi_sum.cRec[2];
      tmp_Raise.cGP_KPI_RAISE[1]  :=tmp_kpi_sum.cRec[3];
      //------------------------------
      tmp_Raise.B_WORKHOURSPLAN     :=tmp_kpi_sum.dmSu[10];//Отработанное время план
      tmp_Raise.B_WORKHOURSFACT     :=tmp_kpi_sum.dmSu[11];//Отработанное время факт
      tmp_Raise.B_OVERTIME          :=tmp_kpi_sum.dmSu[12];//Сверхурочно
      tmp_Raise.B_HOLIDAY           :=tmp_kpi_sum.dmSu[13];//Выходные/праздничные
      tmp_Raise.B_CODE001           :=tmp_kpi_sum.dmSu[15];//Сдельно
      tmp_Raise.B_CODE003           :=tmp_kpi_sum.dmSu[16];//Повременно
      tmp_Raise.B_CODE009           :=tmp_kpi_sum.dmSu[17];//Оплата сверхурочной работы (одинарный размер)
      tmp_Raise.B_CODE010           :=tmp_kpi_sum.dmSu[18];//Опл. труда в выходн. и празднич. дни (одинарн. размер)
      //------------------------------


      tmp_Raise.B_PERFOMANCEKOEFPLAN:=tmp_kpi_sum.dmSu[02];//Коэффициент выполнения показателей премирования
      tmp_Raise.B_PERFOMANCEPROCPLAN:=tmp_kpi_sum.dmSu[03];//Нормативный % для формирования фонда премирования за результаты работы подразделения и результаты работы работника
      tmp_Raise.B_PERFOMANCEFUNDPLAN:=tmp_kpi_sum.dmSu[04];//Сумма для формирования фонда премирования за результаты работы подразделения и результаты работы работника, руб.
      tmp_Raise.B_PERFOMANCEKOEFFACT:=GetAnaliticName(10022,GP_KPI_DOC_SP.FARRVALUE[05]);//Оценка личной результативности работника
      tmp_Raise.B_PERFOMANCEBONUSFAC:=tmp_kpi_sum.dmSu[06];//Коэффициент оценки личной результативности работника
      tmp_Raise.B_PERFOMANCEVAL     :=tmp_kpi_sum.dmSu[07];//Премирование результативности работника
      tmp_Raise.B_PERFOMANCEPROCEND :=tmp_kpi_sum.dmSu[09];//Итоговый процент премии за результативность
      tmp_Raise.B_PERFOMANCEDIFFER  :=-tmp_kpi_sum.dmSu[08];//Разница по результативности работника
      //tmp_Raise.B_PERFOMANCEPROCENDC:=tmp_kpi_sum.dmSu[10];//Итоговый процент премии за результативность * на показатель




    } //'Премия за результаты работы':
    'Премия за качество и дисциплину труда':
    { tmp_Raise.cDocSP[2]       :=tmp_kpi_sum.cRec[2];
      tmp_Raise.cGP_KPI_RAISE[2]:=tmp_kpi_sum.cRec[3];
      //------------------------------
      tmp_Raise.B_WORKHOURSPLAN     :=tmp_kpi_sum.dmSu[05];//Отработанное время план
      tmp_Raise.B_WORKHOURSFACT     :=tmp_kpi_sum.dmSu[06];//Отработанное время факт
      tmp_Raise.B_OVERTIME          :=tmp_kpi_sum.dmSu[07];//Сверхурочно
      tmp_Raise.B_HOLIDAY           :=tmp_kpi_sum.dmSu[08];//Выходные/праздничные
      tmp_Raise.B_CODE001           :=tmp_kpi_sum.dmSu[10];//Сдельно
      tmp_Raise.B_CODE003           :=tmp_kpi_sum.dmSu[11];//Повременно
      tmp_Raise.B_CODE009           :=tmp_kpi_sum.dmSu[12];//Оплата сверхурочной работы (одинарный размер)
      tmp_Raise.B_CODE010           :=tmp_kpi_sum.dmSu[13];//Опл. труда в выходн. и празднич. дни (одинарн. размер)
      //------------------------------

      tmp_Raise.B_QUALITYPROCPLAN   :=tmp_kpi_sum.dmSu[02];//Процент премии за качество и дисциплину труда плановый
      tmp_Raise.B_QUALITYPROCFACT   :=tmp_kpi_sum.dmSu[03];//Процент премии за качество и дисциплину труда фактический
      tmp_Raise.B_QUALITYPROCVAL    :=tmp_kpi_sum.dmSu[04];//Премия за качество и дисциплину труда

    } //'Премия за качество и дисциплину труда':
    'Премия из премиального фонда руководителя':
    { tmp_Raise.cDocSP[3]       :=tmp_kpi_sum.cRec[2];
      tmp_Raise.cGP_KPI_RAISE[3]:=tmp_kpi_sum.cRec[3];
      //------------------------------
      tmp_Raise.B_WORKHOURSPLAN     :=tmp_kpi_sum.dmSu[10];//Отработанное время план
      tmp_Raise.B_WORKHOURSFACT     :=tmp_kpi_sum.dmSu[11];//Отработанное время факт
      tmp_Raise.B_OVERTIME          :=tmp_kpi_sum.dmSu[12];//Сверхурочно
      tmp_Raise.B_HOLIDAY           :=tmp_kpi_sum.dmSu[13];//Выходные/праздничные
      tmp_Raise.B_CODE001           :=tmp_kpi_sum.dmSu[15];//Сдельно
      tmp_Raise.B_CODE003           :=tmp_kpi_sum.dmSu[16];//Повременно
      tmp_Raise.B_CODE009           :=tmp_kpi_sum.dmSu[17];//Оплата сверхурочной работы (одинарный размер)
      tmp_Raise.B_CODE010           :=tmp_kpi_sum.dmSu[18];//Опл. труда в выходн. и празднич. дни (одинарн. размер)
      //------------------------------

      tmp_Raise.B_HEADFUNDBONUSVAL  :=tmp_kpi_sum.dmSu[07];//Премия из фонда руководителя
      tmp_Raise.B_HEADFUNDPROCPLAN  :=tmp_kpi_sum.dmSu[01];//Нормативный % для формирования премиального фонда руководителя
      tmp_Raise.B_HEADFUNDPROCFACT  :=tmp_kpi_sum.dmSu[04];//Процент премии фонда руководителя
      tmp_Raise.B_HEADFUNDVAL       :=tmp_kpi_sum.dmSu[05];//Премия фонда руководителя факт
      tmp_Raise.B_HEADFUNDVALPLAN   :=tmp_kpi_sum.dmSu[03];//Премия фонда руководителя план
      tmp_Raise.B_HEADFUNDDIFFER    :=-tmp_kpi_sum.dmSu[06];//Разница премии фонда руководителя
      tmp_Raise.B_HEADFUNDBONUSSUMM :=tmp_kpi_sum.dmSu[08];//Итого ио фонда руководителя
      tmp_Raise.B_HEADFUNDPROCEND   :=tmp_kpi_sum.dmSu[09];//Итоговый процент из фодна руководителя

    } //'Премия из премиального фонда руководителя':
    'Премия за выполнение показателей':
    { tmp_Raise.cDocSP[4]       :=tmp_kpi_sum.cRec[2];
      tmp_Raise.cGP_KPI_RAISE[4]:=tmp_kpi_sum.cRec[3];
      //------------------------------
      tmp_Raise.B_WORKHOURSPLAN     :=tmp_kpi_sum.dmSu[06];//Отработанное время план
      tmp_Raise.B_WORKHOURSFACT     :=tmp_kpi_sum.dmSu[07];//Отработанное время факт
      tmp_Raise.B_OVERTIME          :=tmp_kpi_sum.dmSu[08];//Сверхурочно
      tmp_Raise.B_HOLIDAY           :=tmp_kpi_sum.dmSu[09];//Выходные/праздничные
      tmp_Raise.B_CODE001           :=tmp_kpi_sum.dmSu[11];//Сдельно
      tmp_Raise.B_CODE003           :=tmp_kpi_sum.dmSu[12];//Повременно
      tmp_Raise.B_CODE009           :=tmp_kpi_sum.dmSu[13];//Оплата сверхурочной работы (одинарный размер)
      tmp_Raise.B_CODE010           :=tmp_kpi_sum.dmSu[14];//Опл. труда в выходн. и празднич. дни (одинарн. размер)
      //------------------------------

      tmp_Raise.B_IND_COMPLETE_PROC :=tmp_kpi_sum.dmSu[01];//Нормативный % выполнения показателей премирования основного производства
      tmp_Raise.B_IND_COMPLETE_KOEFF:=tmp_kpi_sum.dmSu[03];//Коэффициент выполнения показателей премирования основного производства
      tmp_Raise.B_IND_COMPLETE_SUMM :=tmp_kpi_sum.dmSu[05];//Премия за  выполнение показателей премирования основного производства
      tmp_Raise.B_IND_COMPLETE_PROCF:=tmp_kpi_sum.dmSu[02];//Фактический % выполнения показателей премирования основного производства
      tmp_Raise.B_IND_COMPLETE_PROCC:=tmp_kpi_sum.dmSu[03]*tmp_kpi_sum.dmSu[02];//Фактический % выполнения показателей премирования ОП * на показатель
    } //'Премия за выполнение показателей':
    else continue;
    end;
    update current tmp_Raise;
  } //_Loop tmp_kpi_sum
  ReReadRecord(#tmp_Raise);
  Result:=True;
  Timelog('GP_KPI_DOC_Raise_Import->Fill_Tmp_Table:Finish');

} //Procedure Fill_Tmp_Table;

Function FormDoc:boolean;
var ii:word;
{ Result:=False;
  logfilenm:=GetStringParameter('Files','OutputFilesDirectory',0);
  if not FileExist(nm_file)
  { message('Не нашли файл '
     +chr(13)+nm_file );
    Exit;
  }
  if BoundActive(tbbyErr)  SubBounds(tbbyErr);
  ReReadRecord(#tmp_Raise);
  ReScanPanel(#GP_KPI_DOC);
  Delete all tmp_Raise;
  //------------------------------
  Fill_Tmp_Table;
  logfilekl:=true;
  //------------------------------
  var isAllOk:boolean=true;
  //====================================
  v_Imp.num_col:=60;// иначе первые 50
  Timelog('GP_KPI_DOC_Raise_Import->ReadDataFromExcel:Start');
  XlKillExcel;
  if not ReadDataFromExcel(0,nm_file,'Лист1',False,true)
  { message('Ошибка импорта из'+chr(13)+nm_file);
      exit ;
  }
  Timelog('GP_KPI_DOC_Raise_Import->ReadDataFromExcel:Finish');
  //====================================
  var wexrow_:longint;
  wexrow_:=0;
  var wkl_err:boolean;
  wkl_err:=false;
  Count_Katpodr:=GetMarkerCount(Marker_Katpodr);
  Timelog('GP_KPI_DOC_Raise_Import->Import:Start');
  XlKillExcel;
  v_imp._loop tmp_excel
  { if not nextvisual then
    { isAllOk:=false;
        break;
    }
    wexrow_++ ;
    if wexrow_=1
    { continue;
    }
    var _sFio:string;
    var _sPost:string;
    Podr_kod:=LpadCh(v_imp.tmp_excel.dmcell[50],'0',3);
    if IsBitCTW(wFlt,1)
    { Podr_kod:=LpadCh(v_imp.tmp_excel.dmcell[03],'0',3);
    }
    if Count_Katpodr>0
    {
      if getfirst KatPodr_Find<>tsok continue;
      if not FoundMarker(Marker_KatPodr,KatPodr_Find.Nrec) continue;
    }
    Podr_kod:=LpadCh(v_imp.tmp_excel.dmcell[50],'0',3);
    ii:=Pos(' ',Podr_kod);
    if ii>0 Podr_kod:=SubStr(Podr_kod,1,ii-1);
    _sFio    :=Replace(v_imp.tmp_excel.dmcell[10],'. .','.');
    _sPost   :=Upcase(v_imp.tmp_excel.dmcell[11]);
    if _sFio='' then continue;
    if getfirst tmp_Raise where ((
           Podr_kod == tmp_Raise.B_DEPARTCODE
      and  _sFio     == tmp_Raise.B_FIO_TXTFIELD
      and (pos(_sPost, Upcase(tmp_Raise.B_JOBTITLE_TXTFIELD))>0)
      ))<>tsok
    if getfirst tmp_Raise where ((
           Podr_kod == tmp_Raise.B_DEPARTCODE
      and  _sFio     == tmp_Raise.B_FIO_TXTFIELD
      ))<>tsok
    { clearbuffer(#tmp_Raise);
      tmp_Raise.B_DEPARTCODE:=Podr_kod;
      tmp_Raise.B_FIO_TXTFIELD:=_sFio;
      tmp_Raise.B_JOBTITLE_TXTFIELD:=_sPost;
      insert current tmp_Raise;
    }
    var wColumn:longint;
    wColumn:=1;
    tmp_Raise.DOCPREF     :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//1
    tmp_Raise.DOCNUMBER   :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//2
    tmp_Raise.DCODE       :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//3
    tmp_Raise.STATUSNAME  :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//4
    tmp_Raise.ID          :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//5
    tmp_Raise.CITEZENID   :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//6
    tmp_Raise.EMPLOYEEID  :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//7
    tmp_Raise.STRUCTUREID :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//8
    tmp_Raise.BONUSID     :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//9
    //------------------------
    tmp_Raise.FIO_TXTFIELD:=v_imp.tmp_excel.dmcell[wColumn];wColumn++; //10
    tmp_Raise.JOBTITLE_TXTFIELD :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//11
    tmp_Raise.TAB_NO            :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//12
    tmp_Raise.KATNAME           :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//13	Кат. перс.
    tmp_Raise.KATTYPE           :=Case(v_imp.tmp_excel.dmcell[wColumn];'1':'Рабочие','2':'РСС';'Руководители');//14
    wColumn++;//:=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//15 Категория (РСС/Рабочие/Руководители)
    //------------------------------------
    tmp_Raise.WORKHOURSPLAN     :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Отработанное время план
    tmp_Raise.WORKHOURSFACT     :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Отработанное время факт
    tmp_Raise.OVERTIME          :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Сверхурочно
    tmp_Raise.HOLIDAY           :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Выходные/праздничные
    tmp_Raise.CODE001           :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Сдельно
    tmp_Raise.CODE003           :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Повременно
    tmp_Raise.CODE009           :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Оплата сверхурочной работы (одинарный размер)
    tmp_Raise.CODE010           :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Опл. труда в выходн. и празднич. дни (одинарн. размер)
    tmp_Raise.QUALITYPROCPLAN   :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Процент премии за качество и дисциплину труда плановый
    tmp_Raise.HEADFUNDBONUSVAL  :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия из фонда руководителя
    tmp_Raise.PROFIT            :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Итого доход
    tmp_Raise.QUALITYPROCFACT   :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Процент премии за качество и дисциплину труда фактический
    tmp_Raise.QUALITYPROCVAL    :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия за качество и дисциплину труда
    tmp_Raise.PERFOMANCEKOEFPLAN:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Коэффициент выполнения показателей премирования
    tmp_Raise.PERFOMANCEPROCPLAN:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Нормативный % для формирования фонда премирования за результаты работы подразделения и результаты работы работника
    tmp_Raise.PERFOMANCEFUNDPLAN:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Сумма для формирования фонда премирования за результаты работы подразделения и результаты работы работника, руб.
    tmp_Raise.PERFOMANCEKOEFFACT:=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//Оценка личной результативности работника
    tmp_Raise.PERFOMANCEBONUSFAC:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Коэффициент оценки личной результативности работника
    tmp_Raise.HEADFUNDPROCPLAN  :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Нормативный % для формирования премиального фонда руководителя
    tmp_Raise.HEADFUNDPROCFACT  :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Процент премии фонда руководителя
    tmp_Raise.HEADFUNDVAL       :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия фонда руководителя факт
    tmp_Raise.BONUSALL          :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия всего
    tmp_Raise.PROFITALL         :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Доход всего
    tmp_Raise.BONUSPROC         :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Процент премии итоговый
    tmp_Raise.TIMECARDID        :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//Табель
    tmp_Raise.PERFOMANCEVAL     :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премирование результативности работника
    tmp_Raise.HEADFUNDVALPLAN   :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия фонда руководителя план
    tmp_Raise.PERFOMANCEDIFFER  :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Разница по результативности работника
    tmp_Raise.HEADFUNDDIFFER    :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Разница премии фонда руководителя
    tmp_Raise.HEADFUNDBONUSSUMM :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Итого ио фонда руководителя
    tmp_Raise.PERFOMANCEPROCEND :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Итоговый процент премии за результативность
    tmp_Raise.HEADFUNDPROCEND   :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Итоговый процент из фодна руководителя
    tmp_Raise.WORKDAYSPLAN      :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//
    tmp_Raise.WORKDAYSFACT      :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//
    tmp_Raise.DEPARTMENTID      :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//Подразделение
    tmp_Raise.DEPARTCODE        :=v_imp.tmp_excel.dmcell[wColumn];wColumn++;//Подразделение код
    tmp_Raise.IND_COMPLETE_PROC :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Нормативный % выполнения показателей премирования основного производства
    tmp_Raise.IND_COMPLETE_KOEFF:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Коэффициент выполнения показателей премирования основного производства
    tmp_Raise.IND_COMPLETE_SUMM :=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Премия за  выполнение показателей премирования основного производства
    tmp_Raise.IND_COMPLETE_PROCF:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Фактический % выполнения показателей премирования основного производства
    tmp_Raise.IND_COMPLETE_PROCC:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Фактический % выполнения показателей премирования ОП * на показатель
    tmp_Raise.PERFOMANCEPROCENDC:=MyDouble(v_imp.tmp_excel.dmcell[wColumn]);wColumn++;//Итоговый процент премии за результативность * на показатель
    //Если премия не положена, то и коэф. 0
    if tmp_Raise.IND_COMPLETE_PROC=0      tmp_Raise.IND_COMPLETE_KOEFF:=0;
    if TMP_RAISE.B_PERFOMANCEPROCPLAN=0 and TMP_RAISE.PERFOMANCEPROCPLAN=0
    { TMP_RAISE.PERFOMANCEKOEFFACT:='';
      TMP_RAISE.PERFOMANCEBONUSFAC:=0;
      TMP_RAISE.PERFOMANCEKOEFPLAN:=0;
    }
    update current tmp_Raise;
  } //v_imp._loop tmp_excel
  Timelog('GP_KPI_DOC_Raise_Import->Import:Finish');
  if getfirst tmp_Raise=tsok {}
  ReScanPanel(#tmp_Raise);
  ClearFuncCache;
  Result:=true;
} //FomdDoc


Function InsDoc:boolean;
var _cPodr:comp;
{ Result:=true;
  _cPodr:=0;
  if tmp_Raise.TAB_NO='' Exit;// если нет данных по кису, то разошлись
  //----------------------------
  //Exit;
  //'Премия за результаты работы':
  Timelog('InsDoc  '+tmp_Raise.B_FIO_TXTFIELD );
  if tmp_Raise.B_PERFOMANCEKOEFPLAN<>tmp_Raise.PERFOMANCEKOEFPLAN
  or tmp_Raise.B_PERFOMANCEKOEFFACT<>tmp_Raise.PERFOMANCEKOEFFACT
  or tmp_Raise.B_PERFOMANCEBONUSFAC<>tmp_Raise.PERFOMANCEBONUSFAC
  {
    pGP_KPI_DOC_SP:=tmp_Raise.cDocSP[1];
    Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,0 )+',Премия за результаты работы');

    if pGP_KPI_DOC_SP>0
    if Getfirst GP_KPI_DOC_SP=tsok
    {
      Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,0 )+',update ');

      if FALSE // не изменяемое поле tmp_Raise.B_PERFOMANCEKOEFPLAN<>tmp_Raise.PERFOMANCEKOEFPLAN
      { GP_KPI_DOC_SP.FARRVALUE[02]:=string(tmp_Raise.PERFOMANCEKOEFPLAN, 0,2);
        BitOnW(GP_KPI_DOC_SP.Option[02],3);
      }
      if tmp_Raise.B_PERFOMANCEKOEFFACT<>tmp_Raise.PERFOMANCEKOEFFACT
      {  GP_KPI_DOC_SP.FARRVALUE[05]:=string(GetAnaliticNrec(10022,tmp_Raise.PERFOMANCEKOEFFACT));
        BitOnW(GP_KPI_DOC_SP.Option[05],3);
      }
      if tmp_Raise.B_PERFOMANCEBONUSFAC<>tmp_Raise.PERFOMANCEBONUSFAC
      {  GP_KPI_DOC_SP.FARRVALUE[06]:=string(tmp_Raise.PERFOMANCEBONUSFAC, 0,2);
        BitOnW(GP_KPI_DOC_SP.Option[06],3);
      }
      update current GP_KPI_DOC_SP;
    } //if Getfirst GP_KPI_DOC_SP=tsok
  } //'Премия за результаты работы':

  //'Премия за качество и дисциплину труда':
  if tmp_Raise.QUALITYPROCFACT<>tmp_Raise.B_QUALITYPROCFACT
  {
    pGP_KPI_DOC_SP:=tmp_Raise.cDocSP[2];
    Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,0 )+',Премия за качество и дисциплину труда');
    if pGP_KPI_DOC_SP>0
    if Getfirst GP_KPI_DOC_SP=tsok
    {
      Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,00 )+',update ');
      if tmp_Raise.B_QUALITYPROCFACT<>tmp_Raise.QUALITYPROCFACT
      {  GP_KPI_DOC_SP.FARRVALUE[03]:=string(tmp_Raise.QUALITYPROCFACT, 0,2);
         BitOnW(GP_KPI_DOC_SP.Option[03],3);
      }
      update current GP_KPI_DOC_SP;
    } //if Getfirst GP_KPI_DOC_SP=tsok

  } //'Премия за качество и дисциплину труда':
  //'Премия из премиального фонда руководителя':
  if tmp_Raise.HEADFUNDPROCFACT<>tmp_Raise.B_HEADFUNDPROCFACT
  or tmp_Raise.HEADFUNDBONUSVAL<>tmp_Raise.B_HEADFUNDBONUSVAL
  {
    pGP_KPI_DOC_SP:=tmp_Raise.cDocSP[3];
    Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,0 )+',Премия из премиального фонда руководителя');
    if pGP_KPI_DOC_SP>0
    if Getfirst GP_KPI_DOC_SP=tsok
    {
      Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,00 )+',update ');
      //tmp_Raise.B_HEADFUNDPROCFACT  :=tmp_kpi_sum.dmSu[04];//Процент премии фонда руководителя
      //tmp_Raise.B_HEADFUNDBONUSVAL  :=tmp_kpi_sum.dmSu[07];//Премия из фонда руководителя

      if tmp_Raise.B_HEADFUNDPROCFACT<>tmp_Raise.HEADFUNDPROCFACT
      {  GP_KPI_DOC_SP.FARRVALUE[04]:=string(tmp_Raise.HEADFUNDPROCFACT, 0,2);
         BitOnW(GP_KPI_DOC_SP.Option[04],3);
      }
      if tmp_Raise.B_HEADFUNDBONUSVAL<>tmp_Raise.HEADFUNDBONUSVAL
      {  GP_KPI_DOC_SP.FARRVALUE[07]:=string(tmp_Raise.HEADFUNDBONUSVAL, 0,2);
         BitOnW(GP_KPI_DOC_SP.Option[07],3);
      }
      update current GP_KPI_DOC_SP;
    } //if Getfirst GP_KPI_DOC_SP=tsok

  } //'Премия из премиального фонда руководителя':
  //'Премия за выполнение показателей':
  if tmp_Raise.IND_COMPLETE_PROCF<>tmp_Raise.B_IND_COMPLETE_PROCF
  { pGP_KPI_DOC_SP:=tmp_Raise.cDocSP[4];
    Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,0 )+',Премия за выполнение показателей');

    if pGP_KPI_DOC_SP>0
    if Getfirst GP_KPI_DOC_SP=tsok
    {
      Timelog('InsDoc pGP_KPI_DOC_SP='+string(pGP_KPI_DOC_SP,0,00 )+',update ');
      //tmp_Raise.B_IND_COMPLETE_PROCF:=tmp_kpi_sum.dmSu[02];//Фактический % выполнения показателей премирования основного производства
      if tmp_Raise.B_IND_COMPLETE_PROCF<>tmp_Raise.IND_COMPLETE_PROCF
      {  GP_KPI_DOC_SP.FARRVALUE[02]:=string(tmp_Raise.IND_COMPLETE_PROCF, 0,2);
         BitOnW(GP_KPI_DOC_SP.Option[02],3);
      }
      update current GP_KPI_DOC_SP;
    } //if Getfirst GP_KPI_DOC_SP=tsok
  } //'Премия за выполнение показателей':
} //Function InsDoc(_wType:word; _sum:double):boolean;

Procedure MakeDoc;
{ if not BoundActive(tbbyErr) AddBounds(tbbyErr);
   StartNewVisual(vtNumericVisual, vfTimer, 'Ждите, идет формирование премий', 0);
   ReReadRecord(#tmp_Raise);
   Timelog('GP_KPI_DOC_Raise_Import->MakeDoc:Start');
   _Loop tmp_Raise
   { if not NextVisual break;
     if not ChkErr(tmp_Raise.B_DEPARTCODE,tmp_Raise.B_FIO_TXTFIELD) continue;
     InsDoc;
   } //_Loop tmp_prem
   Timelog('GP_KPI_DOC_Raise_Import->MakeDoc:Finish');
   if getfirst tmp_Raise=tsok {}
   ReScanPanel(#tmp_Raise);
   ReScanPanel(#GP_KPI_DOC);
   StopVisual('',0);

} //Procedure MakeDoc;


//====================================================
Window wnGetFond 'Результаты' (,,sci1ESC);
//====================================================
Screen scrRes;
Show at (,,,4);
Table GP_KPI_DOC;

Fields
 [Err]  if(BoundActive(tbbyErr),'Только отклонения','') : Protect, NoDel;
 wOption: NoProtect;
Buttons
  cmValue1    ,,, 'Установить фильтр', hcAllBOk, scGalDial;
  cmValue2    ,,, 'Только ошибки', hcAllBOk, scGalDial;
//  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
 <.Сформировать разницу.>   <.Только ошибки/Все .> .@@@@@@@@@@@@@@@@@@@ [.] Не проверять отработанное время`
                                                                        [.] Не проверять начисления`
                                                                        [.] Не проверять плановые проценты`
                                                                        [.] Не проверять итоговые суммы премий`
>>
end;
#UNDEF GP_KPI_DOC_RAISE_IMP_FLD
#DECLARE GP_KPI_DOC_RAISE_IMP_FLD (FLD, Title, Format)
  tmp_Raise.B_#(FLD) #(Title)  : #(Format) , Protect,NoDel,
  {Font={Color=if(tmp_Raise.B_#(FLD)<>tmp_Raise.#(FLD),ColorsysRed,ColorSysBlack)}};
  tmp_Raise.#(FLD) 'КИС'  : #(Format) , Protect,NoDel,
  {Font={Color=if(tmp_Raise.B_#(FLD)<>tmp_Raise.#(FLD),ColorsysRed,ColorSysBlack)}};
  [D_#(FLD)] if(tmp_Raise.B_#(FLD)<>tmp_Raise.#(FLD),1,0) 'Д':[6],Protect;
#END
Browse brRes (,,sci1ESC);
Show at (,5,,);
Table tmp_Raise;
fixedLeft (tmp_Raise.B_FIO_TXTFIELD,tmp_Raise.FIO_TXTFIELD,tmp_Raise.B_DEPARTCODE,tmp_Raise.DEPARTCODE) ;
Fields
//  {Font={Color=if(ChkErr(tmp_Raise.B_DEPARTCODE,tmp_Raise.B_FIO_TXTFIELD),ColorsysRed,ColorSysBlack)}};
  tmp_Raise.B_FIO_TXTFIELD 'ФИО'  : [20] , Protect,NoDel,
  {Font={Color=if(ChkErr(tmp_Raise.B_DEPARTCODE,tmp_Raise.B_FIO_TXTFIELD),ColorsysRed,ColorSysBlack)}};
  tmp_Raise.FIO_TXTFIELD 'КИС'  : [20] , Protect,NoDel,
  {Font={Color=if(ChkErr(tmp_Raise.B_DEPARTCODE,tmp_Raise.B_FIO_TXTFIELD),ColorsysRed,ColorSysBlack)}};
  #GP_KPI_DOC_RAISE_IMP_FLD(DEPARTCODE        ,'Подр'#13'код',[7])
  #GP_KPI_DOC_RAISE_IMP_FLD(JOBTITLE_TXTFIELD,'Должность',[20])
  #GP_KPI_DOC_RAISE_IMP_FLD(TAB_NO            ,'Таб.Номер',[10])
  #GP_KPI_DOC_RAISE_IMP_FLD(KATNAME           ,'Кат.'#13'перс.',[5])
  #GP_KPI_DOC_RAISE_IMP_FLD(KATTYPE           ,'Кате'#13'гория',[10])

  //----------------------------------------------
  #GP_KPI_DOC_RAISE_IMP_FLD(WORKHOURSPLAN     ,'Отработанное'#13'время'#13'план',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(WORKHOURSFACT     ,'Отработанное'#13'время'#13'факт',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(OVERTIME          ,'Сверхурочно',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HOLIDAY           ,'Выходные'#13'праздничные',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(CODE001           ,'Сдельно',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(CODE003           ,'Повре'#13'менно',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(CODE009           ,'Оплата'#13'сверхурочной работы '#13'(одинарный размер)',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(CODE010           ,'Опл. труда '#13'в выходн. и празднич. дни'#13'(одинарн. размер)',[14.2])
  //-------------------------------------
  #GP_KPI_DOC_RAISE_IMP_FLD(QUALITYPROCPLAN   ,'Процент премии'#13'за качество и дисциплину'#13'труда плановый',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(QUALITYPROCFACT   ,'Процент премии'#13'за качество и дисциплину'#13'труда фактический',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(QUALITYPROCVAL    ,'Премия за'#13'качество и'#13'дисциплину труда',[14.2])
  //-------------------------------------
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEKOEFPLAN,'Коэффициент'#13'выполнения'#13'показателей'#13'премирования',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEPROCPLAN,'Нормативный'#13'% для формирования'#13'фонда премирования'#13'за результаты работы'#13'подразделения',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEFUNDPLAN,'Сумма для формирования'#13'фонда премирования за'#13'результаты работы подразделения, руб.',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEKOEFFACT,'Оценка личной'#13'результативности'#13'работника',[10])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEBONUSFAC,'Коэффициент'#13'оценки личной'#13'результативности работника',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEVAL     ,'Премирование'#13'результативности'#13'работника',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEDIFFER  ,'Разница по'#13'результативности работника',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEPROCEND ,'Итоговый процент'#13'премии за '#13'результативность',[14.2])
  //GP_KPI_DOC_RAISE_IMP_FLD(PERFOMANCEPROCENDC,'Итоговый процент'#13'премии за '#13'результативность'#13'* на показатель',[14.2])
  //-------------------------------------
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDBONUSVAL  ,'Премия из '#13'фонда руководителя',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDPROCPLAN  ,'Нормативный'#13'% для формирования'#13'премиального фонда'#13'руководителя',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDPROCFACT  ,'Процент'#13'премии фонда'#13'руководителя',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDVAL       ,'Премия '#13'фонда руководителя'#13'факт',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDDIFFER    ,'Разница премии'#13'фонда руководителя',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDBONUSSUMM ,'Итого иp'#13'фонда руководителя',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDVALPLAN   ,'Премия '#13'фонда руководителя'#13'план',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(HEADFUNDPROCEND   ,'Итоговый'#13'процент из'#13'фонда руководителя',[14.2])
  //-------------------------------------
  #GP_KPI_DOC_RAISE_IMP_FLD(IND_COMPLETE_PROC ,'Нормативный'#13'% выполнения показателей'#13'премирования'#13'основного производства',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(IND_COMPLETE_KOEFF,'Коэффициент'#13'выполнения показателей'#13'премирования'#13'основного производства',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(IND_COMPLETE_SUMM ,'Премия за  '#13'выполнение показателей'#13'премирования'#13'основного производства',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(IND_COMPLETE_PROCF,'Фактический'#13'% выполнения показателей'#13'премирования'#13'основного производства',[14.2])
  #GP_KPI_DOC_RAISE_IMP_FLD(IND_COMPLETE_PROCC,'Фактический %'#13'выполнения'#13'показателей'#13'премирования ОП'#13' * на показатель',[14.2])
  //-------------------------------------


  /*
  GP_KPI_DOC_RAISE_IMP_FLD(PROFIT            :double//Итого доход
  GP_KPI_DOC_RAISE_IMP_FLD(BONUSALL          :double//Премия всего
  GP_KPI_DOC_RAISE_IMP_FLD(PROFITALL         :double//Доход всего


  ,BONUSPROC         :double//Процент премии итоговый
  ,TIMECARDID        :string[50]//Табель
  ,WORKDAYSPLAN      :double//
  ,WORKDAYSFACT      :double//
  ,DEPARTMENTID      :string[50]//Подразделение
  */

end;
HandleEvent
cmValue1:
{ MakeDoc;

}
cmValue2:
{ if BoundActive(tbbyErr)  SubBounds(tbbyErr)
  else                     AddBounds(tbbyErr);
  ReReadRecord(#tmp_Raise);
  ReScanPanel(#tmp_Raise);
  ReScanPanel(#GP_KPI_DOC);

}
end;
end;//Window wnGetFond

//---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_KatPodr
    { #mrkfiltr_(KatPodr_Flt,KatPodr,Nrec,wc_nrec,KatPodr_Flt.Name)
    }
    ReScanPanel(#KatPodr_Flt);
  } //Procedure SetFilterNM(_Field:longint)


Screen scrParam;
Table KatPodr_Flt;
Fields
  wYear_flt:NoProtect;
  wMonth_Flt:NoProtect;
  nm_file:NoProtect, PickButton;
  Filtr_Katpodr : Protect, PickButton;
  wFlt :NoProtect;
Buttons
  cmOk    ,,, 'Установить фильтр', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;

<<
  Год    .@@@@@@@@@@@@@@@@@@
  Месяц  .@@@@@@@@@@@@@@@@@@
  Файл   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  Только подразделения
  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  [.] Фильтровать по подразделению ведомости`
 <. Продолжить .>  <.   Отмена   .>
>>
end;


HandleEvent
  cmInit:
  { nm_file:='';
    if not ReadMyDsk(nm_file,'GP_KPI_DOC_Raise_Import_nm_file',False)
      nm_file:='d:\Galaxy\RedMine\_GP\KPI\Sverka\Ведомости премирования 11 месяц (без ОПР).xlsx' ;
    if not ReadMyDsk(wFlt,'GP_KPI_DOC_Raise_Import_wFlt',False)  wFlt:=0;
    logfilenm:=GetStringParameter('Files','OutputFilesDirectory',0)
                               +'!TimeLog.log';
    timelog_init;
    if getfirst GP_TypeDocs=tsok {}
    Status:=New(GP_Status,InitForTypeDoc(GP_TypeDocs.Name));
    wMonth_Flt:=MonthRas;
    wYear_Flt :=YearRas;
    wOption:=1;
    Marker_KatPodr   :=InitMarker('GP_KPI_DOC_Raise_Import_KatPodr'  , 8, 50, 10, True);
    SetFilterNm(0);
  }
  cmDone:
  { DoneMarker(Marker_Katpodr , 'GP_KPI_DOC_Raise_Import_Katpodr'  );
    SaveMyDsk(wFlt,'GP_KPI_DOC_Raise_Import_wFlt');

  }
  cmOk:
  { SaveMyDsk(nm_file,'GP_KPI_DOC_Raise_Import_nm_file');

    StartNewVisual(vtNumericVisual, vfTimer, 'Ждите, идет сбор данных', 0);
    FormDoc;
    StopVisual('',0);
    RunWindow(wnGetFond);
  }
  cmCheckField:
  { case curField of
    #wOption:
    { ClearFuncCache;
      ReReadRecord(#tmp_raise);
    }
    #nm_file:
    { if not FileExist(nm_file) message('Файл не найден!');

    }
    end;
  }
  cmPick:
  { case CurField of
    #nm_file:
    { var ww_str:string=GetFileName('*.xlsx','Выберите файл процентами премий из КИС');
      if ww_str<>'' set nm_file:=ww_str;
    }
    #Filtr_Katpodr:
    { if RunInterface('GetPodaLN',12, Marker_KatPodr, 1)=cmDefault
      { SetFilterNm(#Filtr_Katpodr);
        BitOnW(wFilter,5);
      }
    }
    end;
  }
  cmDelOnProtect:
  {   case CurField of
      //------------------------------
      #Filtr_Katpodr:
      { ClearMarker(Marker_Katpodr);
        SetFilterNm(#Filtr_Katpodr);
      }
      end;
  }
  end;

end.
