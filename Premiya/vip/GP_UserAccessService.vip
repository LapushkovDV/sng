/* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |23/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_RoleGroups.vih

#include GP_UserAccessService.vih
interface GP_UserAccessService;

var cCurRoleGroup:comp;
    RoleGroups:GP_RoleGroups;
    mPermittedStatusMarker:tptr;
    wTypedoc:word;
    pUserID :comp;
create view
as select GP_Roles.Nrec
from
  GP_Roles,GP_UserRoles,
  GP_StatusRoles,GP_Status,
  X$Users,Persons
where
((  wTypeDoc == GP_TypeDocs.wType
and cCurRoleGroup == GP_UserRoles.cRoleGroup
and pUserID==GP_UserRoles.cUser
and GP_UserRoles.cRole==GP_Roles.NRec
and GP_UserRoles.cRole==GP_StatusRoles.cRole
and GP_StatusRoles.cStatus==GP_Status.NRec
))
;

Function InitGlobal:boolean;
{ pUserID:=UserID();
  Result:=true
}

constructor Init;
{
  result:=false;
  InitGlobal;
}

constructor InitForRoleGroup(RoleGroupName:string);
{
  result:=false;
  InitGlobal;
  cCurRoleGroup:=RoleGroups.GetGroupByName(RoleGroupName);
  result:=cCurRoleGroup<>0;

  mPermittedStatusMarker:=0;
}

destructor Done;
{
  if (mPermittedStatusMarker<>0)
    DoneMarker(mPermittedStatusMarker,'');
}

function IsAdmin:boolean;
{
  result:=false;

  _loop GP_UserRoles
  /*where((
    cCurRoleGroup==GP_UserRoles.cRoleGroup and UserID==GP_UserRoles.cUser
    and GP_UserRoles.cRole==GP_Roles.NRec
  ))*/
   if getfirst GP_Roles=tsok
    if (GP_Roles.IsAdmin) {
      result:=true;
      break;
    }
}

function CanIns(_wTypeDoc:word=0):boolean; cacheable;
{
  result:=false;
  if _wTypeDoc<>0
  { set wTypeDoc:=_wTypeDoc;
    if getfirst GP_TypeDocs<>tsok
      _wTypeDoc:=0;


  }
  _loop GP_UserRoles
  //where(( cCurRoleGroup==GP_UserRoles.cRoleGroup and UserID==GP_UserRoles.cUser))
  {
    _loop GP_StatusRoles
   // where((  GP_UserRoles.cRole==GP_StatusRoles.cRole and GP_StatusRoles.cStatus/==GP_Status.NRec    ))
    {
      if getfirst GP_Status=tsok
      {
        var boNeed:boolean=true;
        if _wTypeDoc<>0
        { boNeed:= GP_Status.cTypeDoc=GP_TypeDocs.Nrec;
        }
        if boNeed
        {
          if ((GP_StatusRoles.Access and 100b)<>0 and GP_Status.IsDefault)
          {
            result:=true;
            exit;
          }
        }
      } //if getfirst GP_Status=tsok
    } //_loop GP_StatusRoles
  } //_loop GP_UserRoles
} //function CanIns(_wTypeDoc:word=0):boolean;



function CanEdit(_cStatus:comp):boolean; cacheable;
{
  result:=false;
  if (cStatus=0) exit;

  _loop GP_UserRoles
  where((
    cCurRoleGroup==GP_UserRoles.cRoleGroup and pUserID==GP_UserRoles.cUser and
    GP_UserRoles.cRole==GP_StatusRoles.cRole and _cStatus==GP_StatusRoles.cStatus
  ))
    if (IsValidAll(tnGP_StatusRoles))
      if ((GP_StatusRoles.Access and 10b)<>0) {
        result:=true;
        exit;
      }
}

function CanDel(_cStatus:comp):boolean; cacheable;
{
  result:=false;
  if (cStatus=0) exit;

  _loop GP_UserRoles
  where((
    cCurRoleGroup==GP_UserRoles.cRoleGroup and pUserID==GP_UserRoles.cUser and
    GP_UserRoles.cRole==GP_StatusRoles.cRole and _cStatus==GP_StatusRoles.cStatus
  ))
    if (IsValidAll(tnGP_StatusRoles))
      if ((GP_StatusRoles.Access and 1000b)<>0) {
        result:=true;
        exit;
      }
}

function OnlyUserDoc(_wTypeDoc:word=0):boolean; cacheable;
{
  result:=false;
  if _wTypeDoc<>0
  { set wTypeDoc:=_wTypeDoc;
    if getfirst GP_TypeDocs<>tsok
      _wTypeDoc:=0;


  }
  _loop GP_UserRoles
  //where(( cCurRoleGroup==GP_UserRoles.cRoleGroup and UserID==GP_UserRoles.cUser))
  {
    _loop GP_StatusRoles
   // where((  GP_UserRoles.cRole==GP_StatusRoles.cRole and GP_StatusRoles.cStatus/==GP_Status.NRec    ))
    {
      if getfirst GP_Status=tsok
      {
        var boNeed:boolean=false;
        if _wTypeDoc<>0
        { boNeed:= GP_Status.cTypeDoc=GP_TypeDocs.Nrec;
        }
        if boNeed
        {
          if ((GP_StatusRoles.Access and 10000b)<>0
             //and GP_Status.IsDefault
             )
          {
            result:=true;
            exit;
          }
        }
      } //if getfirst GP_Status=tsok
    } //_loop GP_StatusRoles
  } //_loop GP_UserRoles
} //function CanIns(_wTypeDoc:word=0):boolean;


procedure FillPermittedStatusMarker;
{
  _loop GP_UserRoles
  where((
    cCurRoleGroup==GP_UserRoles.cRoleGroup and UserID==GP_UserRoles.cUser
  ))
    _loop GP_StatusRoles where((GP_UserRoles.cRole==GP_StatusRoles.cRole))
      if (GP_StatusRoles.Access>0)
        InsertMarker(mPermittedStatusMarker,GP_StatusRoles.cStatus);
}

function PermittedStatusMarker:tptr;
{
  if (mPermittedStatusMarker=0) {
    mPermittedStatusMarker:=InitMarker('',8,0,1);
    FillPermittedStatusMarker;
  }
  result:=mPermittedStatusMarker;
}

function UserPersonsNRec(_boSilent:boolean=false):comp;
{ //GP_Static_Function.Vih
  result:=GetPersonsByUser(pUserID);
  if Result<>0 then exit;
  if (getfirst fastfirstrow X$Users where((pUserID==X$Users.ATL_NREC))<>tsok) exit;

  if (getfirst fastfirstrow Persons where(('С'==Persons.IsEmployee and X$Users.XU$FULLNAME==Persons.FIO))<>tsok) {
    if not _boSilent
      message('Не найден сотрудник с ФИО "'+X$Users.XU$FULLNAME+'" в картотеке сотрудников.',error);
    exit;
  }

  result:=Persons.NRec;
}

property RoleGroup:comp absolute cCurRoleGroup read;

end.
