/*************************************************************************************************\
* Наименование: Настройки доступа к документам                                                    *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |01/09/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_UserAccessService.vih
#include GP_TypeDocs.vih
#include GP_StatusAccessEdit.vih
#include GP_RoleAccessEdit.vih

interface GP_StatusAndRolesAccessEdit 'Настройки доступа к документам', Gray, EscClose;
show(20,5,120,30);

var UserAccessService:GP_UserAccessService NoAuto;
    TypeDocs:GP_TypeDocs;
    StatusAccessEdit:GP_StatusAccessEdit NoAuto;
    RoleAccessEdit:GP_RoleAccessEdit NoAuto;
    RoleGroupName,TypeDocName:string;
parameters RoleGroupName,TypeDocName;

screen scRoleGroup (,,sci13Esc);
show(,,,2) Fixed_Y;
fields
  TypeDocName:Protect,PickButton;
<<
 `Группа документов`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

tabbedSheet top tabStatusAndRoles;
show(,3,,);
embedded brStatus 'Статусы' interface;
end;
embedded brRoles 'Роли' interface;
end;
end;

procedure GoToRole(cRole:comp);
{
  SetFormat(brRoles);
  RoleAccessEdit.SelectRole(cRole);
}

procedure GoToStatus(cStatus:comp);
{
  SetFormat(brStatus);
  StatusAccessEdit.SelectStatus(cStatus);
}


function GetTypeDocByName(tdName:string;_wType:word=0;_wTable:word=0):boolean;
{ Result:=TypeDocs.GetTypeDocByName(tdName,_wType,_wTable)<>0;
}
function InitForTypeDocName(tdName:string;_wType:word=0;_wTable:word=0):boolean;
var cCurTypeDoc:comp;
{
  result:=false;

  cCurTypeDoc:=TypeDocs.GetTypeDocByName(tdName,_wType,_wTable);
  if (cCurTypeDoc=0) exit;

  if (StatusAccessEdit<>NullRef) {
    UnbindEmbeddedInterface(brStatus);
    UnbindEvent(GoToRole,StatusAccessEdit.GoToRole);
    StatusAccessEdit:=NullRef;
  }
  StatusAccessEdit:=New(GP_StatusAccessEdit,InitForRoleGroupAndTypeDoc(UserAccessService.RoleGroup,cCurTypeDoc));
  BindEmbeddedInterface(brStatus,StatusAccessEdit);
  BindEvent(GoToRole,StatusAccessEdit.GoToRole);

  if (RoleAccessEdit<>NullRef) {
    UnbindEmbeddedInterface(brRoles);
    UnbindEvent(GoToStatus,RoleAccessEdit.GoToStatus);
    RoleAccessEdit:=NullRef;
  }
  RoleAccessEdit:=New(GP_RoleAccessEdit,InitForRoleGroupAndTypeDoc(UserAccessService.RoleGroup,cCurTypeDoc));
  BindEmbeddedInterface(brRoles,RoleAccessEdit);
  BindEvent(GoToStatus,RoleAccessEdit.GoToStatus);

  result:=true;
}

HandleEvent
cmInit:{
  if (RoleGroupName='')
    RoleGroupName:='Мотивация персонала';

  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
  if (UserAccessService=NullRef) {
    abort;
    exit;
  }

  if (not UserAccessService.IsAdmin) {
    message('Вы не обладаете ролью Администратор.'#13'Доступ запрещен.');
    abort;
    exit;
  }


  if (TypeDocName='') //проинициализируем все типы
  { TypeDocName:=GP_DN_StockStatements;// 'Фондовые ведомости';
    if (not GetTypeDocByName(TypeDocName,2,31545/*coGP_KPI_Doc*/)) {};
    TypeDocName:=GP_DN_DisStatements;// 'Ведомости исполнительской дисциплины';
    if (not GetTypeDocByName(TypeDocName,3,31545/*coGP_KPI_Doc*/)) {};

    TypeDocName:=GP_DN_StatementBonusUnits    ;//'Ведомость премирования подразделений';
    if (not GetTypeDocByName(TypeDocName,101,31545/*coGP_KPI_Doc*/)) {};
    TypeDocName:=GP_DN_StatementBonusesMiddle ;//'Ведомость премирования среднего звена';
    if (not GetTypeDocByName(TypeDocName,102,31545/*coGP_KPI_Doc*/)) {};
    TypeDocName:=GP_DN_StatementBonusesSenior ;//'Ведомость премирования высшего звена';
    if (not GetTypeDocByName(TypeDocName,103,31545/*coGP_KPI_Doc*/)) {};
    TypeDocName:=GP_DN_StatementBonusesOther  ;//'Ведомость премирования прочие';
    if (not GetTypeDocByName(TypeDocName,104,31545/*coGP_KPI_Doc*/)) {};
    TypeDocName:='Оценка по показателям премирования';
  }
  if (RoleGroupName='СКУД') //проинициализируем все типы
  { TypeDocName:=GP_SC_Category_of_Employees;
    if (not GetTypeDocByName(TypeDocName,1001,31549/*coGP_SCUD_KATEG*/ )) {};// 'Категории сотрудников';
    TypeDocName:=GP_SC_Group_Employees;
    if (not GetTypeDocByName(TypeDocName,GP_iSC_Group_Employees,31550/*coGP_SCUD_GRUP8*/ )) {};//'Группы сотрудников';
    TypeDocName:=GP_SC_list_Of_Employees;
    if (not GetTypeDocByName(TypeDocName,1003,31557/*coGP_SCUD_PERS*/ )) {};//'Список людей в СКУД';
    TypeDocName:=GP_SC_Types_of_misconduct;
    if (not GetTypeDocByName(TypeDocName,1004,31561/*coGP_SCUD_MISCONDUCT*/ )) {};//'Типы нарушений дисциплины';
    TypeDocName:=GP_SC_Reasons_for_withdrawal;
    if (not GetTypeDocByName(TypeDocName,1005,31556/*coREASON*/)) {};//'Причины выхода';
    TypeDocName:=GP_SC_DepartMents_SCUD;
    if (not GetTypeDocByName(TypeDocName,1006,31555/*coGP_SCUD_PODR */)) {};//'Подразделения СКУД';
    TypeDocName:=GP_SC_Pass_Employees;
    if (not GetTypeDocByName(TypeDocName,1007,31563/*coGP_SCUD_Pass_Employees*/)) {};//'Пропуска сотрудников';
    TypeDocName:=GP_SC_list_of_devices;
    if (not GetTypeDocByName(TypeDocName,1008,31562 /*GP_SCUD_CONTROLER*/)) {};//'Список  устройств';
    TypeDocName:=GP_SC_Events_From_Scud;
    if (not GetTypeDocByName(TypeDocName,1009,31565/*coGP_SCUD_Events*/)) {};//'События из СКУД';
    TypeDocName:=GP_SC_statement_on_absence;
    if (not GetTypeDocByName(TypeDocName,1010,31558/*coGP_SCUD_DOC*/)) {};//'Заявление на отсутствие';
    TypeDocName:=GP_SC_exception_of_periods;
    if (not GetTypeDocByName(TypeDocName,1011,31558/*coGP_SCUD_DOC */)) {};//'Исключение периодов из нарушений';
    TypeDocName:=GP_SC_Head_View;
    if (not GetTypeDocByName(TypeDocName,1012,31565/*cocoGP_SCUD_Events*/)) {};//'Интерфейс руководителя';
    TypeDocName:=GP_SC_Areas;
    if (not GetTypeDocByName(TypeDocName,1013,31564/*cocoGP_SCUD_Events*/)) {};//'Ареалы';
    TypeDocName:=GP_SC_OrderOver;
    if (not GetTypeDocByName(TypeDocName,1014,31558/*coGP_SCUD_DOC */)) {};//'Приказ на сверхурочные';
    TypeDocName:=GP_SC_OrderOver2;
    if (not GetTypeDocByName(TypeDocName,1015,31558/*coGP_SCUD_DOC */)) {};//'Приказ на переработку';
    TypeDocName:=GP_SC_OrderHoliday;
    if (not GetTypeDocByName(TypeDocName,1016,31558/*coGP_SCUD_DOC */)) {};//'Приказ на работу в выходной день';
    TypeDocName:=GP_SC_Saldo;
    if (not GetTypeDocByName(TypeDocName,1017,31558/*coGP_SCUD_DOC */)) {};//'Сальдо';


    TypeDocName:=GP_SC_Category_of_Employees;
    if (not InitForTypeDocName(TypeDocName,1001,31549/*coGP_SCUD_KATEG*/)) abort;
  }
  else
  if (RoleGroupName='IIKO') //проинициализируем все типы
  { TypeDocName:=  GP_IIKO_ZayavPitanie ;// 'Заявления на питание';
    if (not GetTypeDocByName(TypeDocName,3001,31558/*coGP_SCUD_DOC */)) {};
    TypeDocName:=  GP_IIKO_ZayavPitanieEnd;//   = 'Заявления на прекращение питания';
    if (not GetTypeDocByName(TypeDocName,3002,31558/*coGP_SCUD_DOC */)) {};
    TypeDocName:=  GP_IIKO_ListSumPitanie;//    = 'Суммы питания сотрудников';
    if (not GetTypeDocByName(TypeDocName,3003,31558/*coGP_SCUD_DOC */)) {};

    //------------------------------
    TypeDocName:=GP_IIKO_ZayavPitanie;
    if (not InitForTypeDocName(TypeDocName,3001,31549/*coGP_SCUD_KATEG*/)) abort;
  }
  else
  {
   if (RoleGroupName='LOTTERY') //проинициализируем все типы
    {TypeDocName:=  GP_LOTTERY_VedNachBally ;// 'Заявления на питание';
      if (not GetTypeDocByName(TypeDocName,4001,31558/*coGP_SCUD_DOC */)) {};

      TypeDocName:=GP_LOTTERY_VedNachBally;
      if (not InitForTypeDocName(TypeDocName,4001,31549/*coGP_SCUD_KATEG*/)) abort;

    }
    else
    if (not InitForTypeDocName(TypeDocName,1,31533/*coGP_KPI_Statements*/)) abort;
  }
}
cmPick:{
  var sTmp:string;
  var cTmp:comp=0;
  var wTmp:word=0;
  sTmp:=TypeDocName;
  if RoleGroupName='СКУД' wTmp:=1000;
  else
   if RoleGroupName='IIKO' wTmp:=3000;
     else
      if RoleGroupName='LOTTERY' wTmp:=4000;


  if (RunInterface(GP_PickTypeDocs,cgiPick,sTmp,cTmp,wTmp) = cmDefault)
    if (TypeDocName<>sTmp)
      if (InitForTypeDocName(sTmp))
        set TypeDocName:=sTmp;
}
end;
end.
