/*************************************************************************************************\
* Наименование:  КПИ Настройка премий по штатному расписанию                                      *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#1205         |02/10/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
/****************************\
Исправить после подкачки
SQL update GP_KPI_Raise_Sts set GP_KPI_Raise_Sts.Name = Catalogs.Name
From GP_KPI_Raise_Sts inner join Catalogs on Catalogs.Nrec =GP_KPI_Raise_Sts.Department;
\*****************************/
#include marker.vih // описание объекта и объявление интерфейса
                    // marker c реализацией по умолчанию
#include FRRecordDefinition.vih
#include CatFunc.Vih
#include GetKau.Vih
//---------------------------------
#include CLSFUNCS.VIH // ф-ии пересканирования текущих л/с
//---------------------------------

#include GP_Protector.Vih
#include GP_UserAccessService.vih

#include GP_KPI_Raise_StsEdit.Vih
#doc
КПИ Настройка премий по штатному расписанию
#end
//------------------------------------
Interface GP_KPI_Raise_StsEdit 'Премии по штатному расписанию' , EscClose;
//------------------------------------
Show At (,,100,20) ;
//------------------------------------
// декларация сложного фильтра
//------------------------------------
function isFilterAnCorrect(ww_nrec:comp): boolean; forward;
//------------------------------------
#include GetKau.var
var
//------------------------------------
  wIntMode:word; //тип запуска
  pTopRec    :Comp   ; // ссылка на группу
  pRaiseSts  :Comp  ; // тип документа
  isOpenSearch:boolean; //признак запуска быстрого выбора
  isProtect,isProtect2 :boolean; //защищенный выбор
  DataProtector : IGP_Protector2;//защита полей от модификации
  UserAccessService:GP_UserAccessService NoAuto;
  pMarker:IMarker(Marker) new;
  iCatFunc            : CatalogsFunctions;   // Переменная типа интерфейс CatalogsFunctions
  //-- пометка подразделения
  CLSF: CurLSFunctions;
  DA: IDepartmentAvailability(CurLSFunctions);
  _PodrMArkerPointer        : Longint; // сам маркер по подразделениям
  isPodrShare               : boolean;
  //-------------------------------------
  RoleGroupName    :string;
  MarkerTmp        :Longint;
  pTmp             :comp;
  DTB,DTE          :date;//для фильтра по сроку действия
  sUserName        :string;//= UserName()
//-----------------------------------------
// Фильтры
//-----------------------------------------
   wFilter:word;
   Marker_Count :longint;
   isFilterRun  :boolean;
   wc_nrec : comp;//  - var_name, тип должен совпадать с типом маркера
   KauMarkerName:string;
   Marker_Tmp :tptr;

   #mrkfld_(CatRaise)
   #mrkfld_(CatDep)
   #mrkfld_(CatPost)

Create View
var
 pCatRaise:comp;//для фильтра по типу доплаты
 pCatDep:comp;//для проверки прав по зарплате
 pCatPost:comp;//для проверки прав по зарплате
as select GP_KPI_Raise_Sts.Nrec
//  , sGetAttr(coCatalogs,GP_KPI_Raise_Sts.Department,'Вид производства') (Fieldname=VidProizv)
  , coGetAttr(coCatalogs,GP_KPI_Raise_Sts.Department,'Вид производства') (Fieldname=pVidProizv)
From
  GP_KPI_Raise_Sts(GP_KPI_RAise_StS02)
, GP_KPI_Raise_Sts_SP(GP_KPI_R_StS_SPP2)
, GP_KPI_Raise_Sts_SP GP_KPI_Raise_Sts_SP_F
//, GP_KPI_Raise_Sts_Raise GP_KPI_Raise_Sts_Raise_F//для поисков
, Catalogs CatRaise
, Catalogs CatPost
, Catalogs CatDep
, GP_TarStavExt
, Spkau
//------- фильтры
 , Catalogs     Catalogs_Flt
where
((  GP_KPI_Raise_Sts.cStaffStruct == GP_KPI_Raise_Sts_SP.cStaffStruct
and GP_KPI_Raise_Sts.cStaffStruct == GP_KPI_Raise_Sts_SP_f.cStaffStruct
and GP_KPI_Raise_Sts_SP.cDoplata  == CatRaise.Nrec
and GP_KPI_Raise_Sts.Department   == CatDep.Nrec
and GP_KPI_Raise_Sts.Post         == CatPost.Nrec
and GP_KPI_Raise_Sts.cStaffStruct == StaffStruct.Nrec
and GP_KPI_Raise_Sts.cKategoty    == Klkatego.nrec
and StaffStruct.TARIFF            == GP_TarStavExt.cTarStav
and pVidProizv == Spkau.Nrec
//------- фильтры
and wc_nrec == Catalogs_Flt.Nrec
//--------------
and sUserName          ==  Zar_User.OwnName

))
Bounds byCatDep   pCatDep   == GP_KPI_Raise_Sts.Department(noindex) ordered by TableOrder
Bounds byCatPost  pCatPost  == GP_KPI_Raise_Sts.Post(noindex) ordered by TableOrder
condition FilterAn = // использование сложного фильтра
  (isFilterAnCorrect(GP_KPI_Raise_Sts.Nrec))

;
Parameters
  wIntMode
#doc
#end
, pTopRec
#doc
, возвращаемый параметр
#end
, pRaiseSts
#doc
 фильтрация по человеку
#end
;



//******************************************************************************
// Функции
//******************************************************************************
  //------------------------------------
  // Наименование интерфейса
  //------------------------------------
  Function GetInterfaceName:string;
  { Result:=#(__InterfaceName__);
  }
  //------------------------------------
  // сохранить параметры
  //------------------------------------
  Procedure SaveParam;
  { SaveMyDsk(wFilter  ,GetInterfaceName+'_wFilter');
    SaveMyDsk(DTB      ,GetInterfaceName+'_DTB');
    SaveMyDsk(DTE      ,GetInterfaceName+'_DTE');
    //-----------------------
    DoneMarker(Marker_CatRaise_A, '' );
    DoneMarker(Marker_CatDep_A, '' );
    DoneMarker(Marker_CatPost_A, '' );
    //-----------------------
    DoneMarker(Marker_CatRaise, GetInterfaceName+'_CatRaise');
    DoneMarker(Marker_CatDep  , GetInterfaceName+'_CatDep' );
    DoneMarker(Marker_CatPost , GetInterfaceName+'_CatPost' );
  } //Procedure SaveParam;

  //------------------------------------
  // восстановить параметры
  //------------------------------------
  Procedure ReadParam;
  { if not ReadMyDsk(wFilter,GetInterfaceName+'_wFilter',false) wFilter:=0;
    if not ReadMyDsk(DTB    ,GetInterfaceName+'_DTB'    ,false) DTB:=ZeroDate;
    if not ReadMyDsk(DTE    ,GetInterfaceName+'_DTE'    ,false) DTE:=ZeroDate;

    Marker_CatRaise  :=InitMarker(GetInterfaceName+'_CatRaise' , 8, 50, 10, True);
    Marker_CatDep    :=InitMarker(GetInterfaceName+'_CatDep' , 8, 50, 10, True);
    Marker_CatPost   :=InitMarker(GetInterfaceName+'_CatPost' , 8, 50, 10, True);

    Marker_CatRaise_A :=InitMarker('' , 8, 50, 10, True);
    Marker_CatDep_A   :=InitMarker('' , 8, 50, 10, True);
    Marker_CatPost_A  :=InitMarker('' , 8, 50, 10, True);

  } //  Procedure ReadParam;

//------------------------------------
// Включено разграничение доступа
//------------------------------------
Function GetPodrShare :boolean;
{ Result:= ZAR_USER.PODRSHARE = '+'
}//Function PodrShare :boolean;


//------------------------------------
// Доступность подразделения по зарплатным правам.
//------------------------------------
Function EnablePodr(_pDepartment:comp) :boolean; cacheable;
var _cPodr:comp;
{ Result:=true;
  _cPodr:=GetKatPodrByCatalogs(_pDepartment);
  Result:=DA.IsAvailable(_cPodr);
} //Function AVaiblePodr(_cPodr:comp) :comp; cacheable;


  //------------------------------------
  // декларация сложного фильтра
  //------------------------------------
  function isFilterAnCorrect(ww_nrec:comp): boolean; cacheable;
  { Result:=true;
    if ww_nrec=0 then exit;
    if isPodrShare
    { if not EnablePodr(GP_KPI_Raise_Sts.Department) then
        { Result:=false;
          exit;
        }
    }
    if IsBitCTW(wFilter,1)
    { If not FoundMarker(Marker_CatDep_A,GP_KPI_Raise_Sts.Department)
        { Result:=false;
          Exit;
        }
    }
    if IsBitCTW(wFilter,2)
    { if Count_CatPost>1
      { If not FoundMarker(Marker_CatPost_A,GP_KPI_Raise_Sts.Post)
        { Result:=false;
          Exit;
        }
      }
    }
    //последний
    if IsBitCTW(wFilter,3)
    { if Count_CatRaise>0
      { var isAllOk:boolean=false;
        _Loop GP_KPI_Raise_Sts_SP_F
        If FoundMarker(Marker_CatRaise_A,GP_KPI_Raise_Sts_SP_F.cDoplata)
        { isAllOk:=True;
          break;
        }
        if not isAllOk
        { Result:=false ;
          exit;
        }
      }
    }

  }//function isFilterAnCorrect(ww_nrec:comp): boolean;

    //-------------------------------------------
  // скопировать фильтры в данные для отборв
  //-------------------------------------------
  Procedure CopyToA;
  { CopyMarker(Marker_CatDep_A   ,Marker_CatDep);
    CopyMarker(Marker_CatRaise_A ,Marker_CatRaise);
    CopyMarker(Marker_CatPost_A  ,Marker_CatPost);
  } //Procedure CopyToA;

  //-------------------------------------------
  // восстановить данные для задания фильтрации
  // из данных для отбора
  //-------------------------------------------
  Procedure RestFromA;
  { CopyMarker(Marker_CatDep   ,Marker_CatDep_A );
    CopyMarker(Marker_CatRaise ,Marker_CatRaise_A);
    CopyMarker(Marker_CatPost  ,Marker_CatPost_A);
  } //Procedure RestFromA;

  //-------------------------------------------
  #doc
    Установить ограничения
  #end
  Function SetFilterBounds(_IsArch:word) : boolean;
  { Result:=false;
    isFilterRun:=True;
    _IsArch:=_IsArch;
    if ConditionActiveInLeave(tcFilterAn, #GP_KPI_Raise_Sts)
    { PopConditionForLeave(tcFilterAn, #GP_KPI_Raise_Sts);
    }
    If BoundActive(tbByCatDep)   SubBounds(tbByCatDep);
    If BoundActive(tbByCatPost) SubBounds(tbByCatPost);
    //-----------------------
    CopyToA;
    //-----------------------
    ClearFuncCache; // очистим кэш функций
    var need_FilterAn:boolean=false;
    if IsBitCTW(wFilter,1)
    {  Count_CatDep:=GetMarkerCount(Marker_CatDep);
       GetMarker(Marker_CatDep,0,pCatDep);
       if Count_CatDep=1
       { AddBounds(tbByCatDep);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,2)
    {  Count_CatPost:=GetMarkerCount(Marker_CatPost);
       GetMarker(Marker_CatPost,0,pCatPost);
       if Count_CatPost=1
       { AddBounds(tbByCatPost);
       }
       else need_FilterAn:=true;
    }
    if IsBitCTW(wFilter,3)
    {  Count_CatRaise:=GetMarkerCount(Marker_CatRaise);
       GetMarker(Marker_CatRaise,0,pCatRaise);
       if Count_CatRaise>0 need_FilterAn:=true;
    }
    if isPodrShare need_FilterAn:=true;

    // использование сложного фильтра
    if need_FilterAn
    { PushConditionForLeave(tcFilterAn, #GP_KPI_Raise_Sts);
    }
    ReReadRecord(#GP_KPI_Raise_Sts);
    Result:=true;
    isFilterRun:=False;

  } //Function SetFilterBounds : boolean;

  //---------------------------------------
  // Установка наименований фильтров
  //---------------------------------------
  Procedure SetFilterNM(_Field:longint=0);
  { if _Field=0 or _Field=#Filtr_CatDep
    { #mrkfiltr_(Catalogs_Flt,CatDep,Nrec,wc_nrec,Catalogs_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_CatRaise
    { #mrkfiltr_(Catalogs_Flt,CatRaise,Nrec,wc_nrec,Catalogs_Flt.Name)
    }
    if _Field=0 or _Field=#Filtr_CatPost
    { #mrkfiltr_(Catalogs_Flt,CatPost,Nrec,wc_nrec,Catalogs_Flt.Name)
    }
    ReScanPanel(#Catalogs_Flt);
  } //Procedure SetFilterNM(_Field:longint)


  //---------------------------------------
  // Установка режима редактирования
  //---------------------------------------
procedure SetEditMode(Value: boolean);
{
  DataProtector.SetProtected(not Value);

  if Value
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpBlueWindow);
  else
  { cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpCyanWindow);
    cfsSetProp('cb_SCRFILTER_wFilter',cfpProtect,False);
    cfsSetProp('cb_SCRFILTER_Filtr_CatDep'      ,cfpButtonType,inPickButton);
    cfsSetProp('cb_SCRFILTER_Filtr_CatRaise'     ,cfpButtonType,inPickButton);
    cfsSetProp('cb_SCRFILTER_Filtr_CatPost'      ,cfpButtonType,inPickButton);
  }
  isProtect:=not Value;

} //Procedure SetEditMode(_isEdit:boolean);


Function MakeBufferRaiseStaffSP(_pDoplata:comp;_dProcent:tSumma):boolean;
{ ClearBuffer(#GP_KPI_Raise_Sts_SP);
  GP_KPI_Raise_Sts_SP.Datan:=Staffstruct.DInput;
  GP_KPI_Raise_Sts_SP.Datok:=Staffstruct.DClose;
  GP_KPI_Raise_Sts_SP.cDoplata:=_PDoplata;
  GP_KPI_Raise_Sts_SP.Procent :=_DProcent;
  insert current GP_KPI_Raise_Sts_SP;
  Result:=true;
} //Function MakeBufferRaiseStaffSP(_pDoplata):boolean;


Function MakeBufferRaiseStaff:boolean;
{ var _StaffStr,_cPodr,_cRec:comp=0;
  Result:=false;
  if (RunInterface(GP_PickStaffStruct, cgiPick, _StaffStr, '', _cPodr, _cRec) <> cmDefault) exit;
  if getfirst GP_KPI_Raise_Sts where (( _StaffStr == GP_KPI_Raise_Sts.cStaffStruct ))=tsok
  { Message('Выбранная должность уже существует в привязке премий!');
    ReScanPanel(#GP_KPI_Raise_Sts);
    Exit;
  }
  ClearBuffer(#GP_KPI_Raise_Sts);
  GP_KPI_Raise_Sts.cStaffStruct:=_StaffStr;
  GP_KPI_Raise_Sts.Department:=_cPodr;
  if getfirst CatDep=tsok
  { GP_KPI_Raise_Sts.Code:=CatDep.Code;
    GP_KPI_Raise_Sts.Name:=CatDep.Name;
  }
  GP_KPI_Raise_Sts.Post      :=_cRec;
  if getfirst Staffstruct=tsok
  { GP_KPI_Raise_Sts.cKategoty :=Staffstruct.EmpCategory
  }
  if insert current GP_KPI_Raise_Sts<>tsok
  { Message('Ошибка создания записи');
    exit;
  }
  Result:=true;
  if getfirst GP_TarStavExt<>tsok exit;
  var jj:word;

  For(jj :=1;jj<=3;jj++)
  { if GP_TarStavExt.MonthlyBonus[jj]>0
    { if GP_TarStavExt.cMonthlyBonusType[jj]>0
      {  MakeBufferRaiseStaffSP(GP_TarStavExt.cMonthlyBonusType[jj],GP_TarStavExt.MonthlyBonus[jj])
      }
    }
  } //for(jj:=1;jj<=3;jj++)
  if GP_TarStavExt.QuarterlyBonus>0
  { if GP_TarStavExt.cQuarterlyBonusType>0
    { MakeBufferRaiseStaffSP(GP_TarStavExt.cQuarterlyBonusType,GP_TarStavExt.QuarterlyBonus)
    }
  } //if GP_TarStavExt.QuarterlyBonus>0
  if GP_TarStavExt.AnnualBonus>0
  { if GP_TarStavExt.cAnnualBonusType>0
    { MakeBufferRaiseStaffSP(GP_TarStavExt.cAnnualBonusType,GP_TarStavExt.AnnualBonus)
    }
  } //if GP_TarStavExt.QuarterlyBonus>0
  ReScanPanel(#GP_KPI_Raise_Sts);
  ReScanPanel(#GP_KPI_Raise_Sts_SP);
} //Function MakeBufferRaiseStaff:boolean;


//========================================================
// Визуальная часть
//========================================================
Window wnFilter 'Установите фильтры'  Cyan, EscClose;
  Show at (,,50,10);
Screen scrFilter 'Фильтры' ('Фильтры',,sci13Esc);
Table Catalogs_Flt;
Fields
  wFilter :NoProtect;
  Filtr_CatDep  : PickButton,Protect;
  Filtr_CatPost  : PickButton,Protect;
  Filtr_CatRaise : PickButton,Protect;
Buttons
  cmOk    ,,, 'продолжить выполнение', hcAllBOk, scGalDial;
  cmCancel,,, 'Отмена', hcAllBCancel, scGalDial;
<<
  `Фильтр по`
 [.] Подразделению` .@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Должности`     .@@@@@@@@@@@@@@@@@@@@@@@@@@@
 [.] Типу доплаты  `.@@@@@@@@@@@@@@@@@@@@@@@@@@@

 <. Продолжить .>  <.   Отмена   .>
>>
end; //Screen scrFilter (,,sci13Esс);
HandleEvent
cmInit:
{ isProtect2:=isProtect;
  if isProtect
  { SetEditMode(True)
  }

}
cmDone:
{ if isProtect2
    SetEditMode(false);
}
cmOk:
{ CloseWindowEx(wnFilter,cmDefault)

}
end;// HandleEvent
end; //Windows wnFilter 'Установите фильтры' , Cyan, EscClose;




//****************************************************
Browse brRaiseSts '' (,,sci178Esc);
show at (,,,10);
Table GP_KPI_Raise_Sts;
Fields
  GP_KPI_Raise_Sts.Code 'Код подр.' ('Код подразделения'):[5],Protect,NoDel;
  GP_KPI_Raise_Sts.Name 'Подразделение' :[25],Protect,NoDel;
  CatPost.Name           'Должность' :[20],Protect,NoDel;
  SpKau.Code //] sGetAttr(coCatalogs,GP_KPI_Raise_Sts.Department,'Вид производства')
    'Код в/п' ('Вид производства'):[5],Protect,NoDel ;
  SpKau.Name //] sGetAttr(coCatalogs,GP_KPI_Raise_Sts.Department,'Вид производства')
    'Вид производства':[20],Protect,NoDel ;
  Klkatego.Kod    'Код кат.' ('Категория') :[10],Protect,NoDel;
  Klkatego.NaiKat 'Категория' :[10],Protect,NoDel;
  StaffStruct.SeqNMB 'п/п' ('порядковый номер в штатном расписании') :[5],Protect,NoDel;
  StaffStruct.DInPut 'Дата ввода'  :[11] , Protect,NoDel;
  StaffStruct.DClose 'Дата закрытия'  :[11] , Protect,NoDel;
  ' '    :[11] , Protect,NoDel,NoAutoSize;
end;

Browse brRaiseStsSP '' (,,sci178Esc);
show at (,11,,);
Table GP_KPI_Raise_Sts_SP;
Fields
  CatRaise.Name 'Премия' ('Вид премии',,sci1378Esc) :[30], Protect,PickButton,NoDel;
  CatRaise.Code 'Код' ('код вида премии',,sci1378Esc) :[6], Protect,PickButton,NoDel;
  GP_KPI_Raise_Sts_SP.DataN 'c' :[10],NoProtect;
  GP_KPI_Raise_Sts_SP.DatOK  'По' :[10], NoProtect;
  GP_KPI_Raise_Sts_SP.Procent '%'  :[10.2],NoProtect;
  GP_KPI_Raise_Sts_SP.Summa   'Сумма'  :[10.2,'\2p[|-]366`666`666`666`666.88'],NoProtect;

end;//Browse brGroupRaiseSts



//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table GP_KPI_Raise_Sts ;
cmSetDefault:
{ //Abort;
  exit;
}
cmInsert:
{ MakeBufferRaiseStaff;

  abort
}
cmInsertRecord:
{
  //Insert Current GP_KPI_Raise_Sts;
}
cmUpdateRecord:
{ Update Current GP_KPI_Raise_Sts;
}
cmDeleteRecord:
{ if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }
  if delete GP_KPI_Raise_Sts_SP where (( GP_KPI_Raise_Sts.cStaffStruct == GP_KPI_Raise_Sts_SP.cStaffStruct ))=tsok
  { delete Current GP_KPI_Raise_Sts;
  }
  else
  { message('Ошибка при удалении спецификации должности');
  }
}
end; //TableEvent table GP_KPI_Raise_Sts
//----------------------
TableEvent table GP_KPI_Raise_Sts_SP;
cmSetDefault:
{ //Abort;
  exit;
}
cmInsert:
{
  MakeBufferRaiseStaffSP(0,0);
  ReScanPanel(#GP_KPI_Raise_Sts_SP);
  abort;
}
cmInsertRecord:
{
  Insert Current GP_KPI_Raise_Sts_SP;
}
cmUpdateRecord:
{ Update Current GP_KPI_Raise_Sts_SP;
}
cmDeleteRecord:
{ if message('Удалить запись?',YesNo)<>cmYes
  { abort; exit;
  }

  delete Current GP_KPI_Raise_Sts_SP;
}
end; //TableEvent table GP_KPI_Raise_Sts


//------------------------------------------------------------------------------
#doc
   Инициализация параметров интерфейса
#end
Function InitParam(
  _wIntMode  : word;  // режим запуска (cgiNo, cgiPick, ...) см.GLOCONST.INC
  _pTopRec   : comp;  // ссылка на "Ведомость"
  _pRaiseSts   : comp=0;   // выбранная запись
  _Format    : longint=0; // включить определенные форматы
  _NoVisual  : boolean=false //не перерисовывать экраны
) : boolean;
{
  Result:=false;
  wIntMode:=_wIntMode;
  pTopRec:=_pTopRec;
  if not _NoVisual
  { if wIntMode<>0
    { SetEditMode(false)
    }
    else
    { SetEditMode(True)
    }
    if _pRaiseSts>0
    {
    }
  }
  if _Format<>0
  {

  }
  SetFilterBounds(0);
  Result:=true;
} //Function InitParam(

//--------------------------------------
// Загрузчик интерфейса
//--------------------------------------
Function LoadInterFace(_wType:word):boolean;
{ sUserName :=UserName();
  Result:=True;
  _wType:=_wType;
  if getfirst Zar_user=tsok {}
  isPodrShare:=GetPodrShare;
  isFilterRun:=false;
  LoadVipRef(DataProtector, 'GP_Protector');

  DataProtector.LinkToExt(cfsGetCurrentContainerSelf, '', true);
  DataProtector.ProtectedStatusCtx := sci1Esc;
  DataProtector.AutoPalette := true;
  //===========================
  RoleGroupName:='Мотивация персонала';

  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
  if (UserAccessService=NullRef) {
        exit;
  }
  Result:=True;
}

//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    cmInit:
    {
      LoadInterface(0);
      //----------------------------
      ReadParam;
      InitParam(wIntMode,0,0);
      SetFilterNM;
    } //cmInit
    cmOnVipLoad:
    { LoadInterface(1);

    }
    //----------------------
    cmDone:
    { if DataProtector<>NullRef
      { FreeVipInterface(DataProtector);

      }
      SaveParam;
    }
    //----------------------
    cmCheckField:
    { case CurField of
      #GP_KPI_Raise_Sts_SP.DataN:
      { if GP_KPI_Raise_Sts_SP.DatOk<>Date(0,0,0)
        { if GP_KPI_Raise_Sts_SP.DatOk<GP_KPI_Raise_Sts_SP.DataN
          { Message('Дата окончания меньше даты начала');
            set GP_KPI_Raise_Sts_SP.DatOk:=GP_KPI_Raise_Sts_SP.DataN
          }
        }
      }
      #GP_KPI_Raise_Sts_SP.DatOk:
      { if GP_KPI_Raise_Sts_SP.DatOk<>ZeroDate
        { if GP_KPI_Raise_Sts_SP.DatOk<GP_KPI_Raise_Sts_SP.DataN
          { Message('Дата окончания меньше даты начала');
            set GP_KPI_Raise_Sts_SP.DatOk:=GP_KPI_Raise_Sts_SP.DataN;
          }
          else
          { set GP_KPI_Raise_Sts_SP.DatOk:=GP_KPI_Raise_Sts_SP.DatOk;
          }
        } //GP_KPI_Raise_Sts.ToDate
      }
      end;
    }
    //----------------------
    cmPick:
    { if IsProtect
      { Abort;
        Exit;

      }
      case CurField of
      //--------------------------
      #CatRaise.Name,#CatRaise.Code:
      { var cTmp: comp;
        cTmp:=GP_KPI_Raise_Sts_SP.cDoplata;
        if ( RunInterface('PickCatalog2', integer(-17), cTmp, 0) <> cmCancel )
        { set GP_KPI_Raise_Sts_SP.cDoplata:=cTmp;
          if GetFirst CatRaise=tsok {}
          if GP_KPI_Raise_Sts_SP.Procent=0
          { GP_KPI_Raise_Sts_SP.Procent:=Longint(CatRaise.LastUser);
          }
        }
      }
      //------------------------------
      #Filtr_CatDep:
      { KauMarkerName:='CatalogsMarker';
        StoreMarker(Marker_CatDep,KauMarkerName);
        wc_nrec:=0;
        if ( RunInterface('PickCatalog2', integer(-11), wc_nrec, 100) <> cmCancel )
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_CatDep,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_CatDep);
          BitOnW(wFilter,3);
        }
      }
      //------------------------------
      #Filtr_CatPost:
      { KauMarkerName:='CatalogsMarker';
        StoreMarker(Marker_CatPost,KauMarkerName);
        wc_nrec:=0;
        if ( RunInterface('PickCatalog2', integer(-11), wc_nrec, 100) <> cmCancel )
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_CatPost,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_CatPost);
          BitOnW(wFilter,3);
        }
      }
      //------------------------------
      #Filtr_CatRaise:
      { KauMarkerName:='CatalogsMarker';
        StoreMarker(Marker_CatRaise,KauMarkerName);
        wc_nrec:=0;
        if ( RunInterface('PickCatalog2', integer(-17), wc_nrec, 100) <> cmCancel )
        { Marker_Tmp  :=InitMarker(KauMarkerName, 8, 50, 10, True);
          CopyMarker(Marker_CatRaise,Marker_Tmp);
          DoneMarker(Marker_Tmp,'');
          SetFilterNm(#Filtr_CatRaise);
          BitOnW(wFilter,3);
        }
      }
      end;
      ReScanPanel(#GP_KPI_Raise_Sts);
    } //cmPick
    //----------------------
    cmDelOnProtect:
    { Case Curfield of
      //------------------------------
      //------------------------------
      #Filtr_CatRaise:
      { ClearMarker(Marker_CatRaise);
        BitOffW(wFilter,3);
        SetFilterNm(#Filtr_CatRaise);
      }
      //------------------------------
      #Filtr_CatPost:
      { ClearMarker(Marker_CatPost);
        BitOffW(wFilter,2);
        SetFilterNm(#Filtr_CatPost);
      }
      //------------------------------
      #Filtr_CatDep:
      { ClearMarker(Marker_CatDep);
        BitOffW(wFilter,1);
        SetFilterNm(#Filtr_CatDep);
      }
      end;
    }
    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Raise_Sts: RunInterface('ExClassifier', coGP_KPI_Raise_Sts, GP_KPI_Raise_Sts.nRec);
      end;
    }
    //--------------------------
    cmFilterSave:
    { UpdateTable;
      if RunWindowModal(wnFilter)=cmDefault
      { SetFilterBounds(0);
      }
      else RestFromA
    }

    cmValue3:
    { GP_KPI_Raise_Sts.Nrec:=0;
      Insert current GP_KPI_Raise_Sts;
      ReScanPanel(#GP_KPI_Raise_Sts);

    }
    //--------------------------
    cmPickAttr:// внешние аттрибуты
    {
      if UpdateTable
      case CurTable of
      #GP_KPI_Raise_Sts: RunInterface('Attribute', coGP_KPI_Raise_Sts, GP_KPI_Raise_Sts.nRec);
      end;
    }
    //--------------------------
    cmHotKeys:
    {
      case CurTable of
      #GP_KPI_Raise_Sts:
      { ProcessCommand(RunMenu('GP_KPI_Raise_StsEdit_Main_HotKey'));
      }
      end;
    }

  end;
end.

GP_KPI_Raise_StsEdit_Main_HotKey Menu
{
- 'Копирование записи', cmValue3, 'Копирование записи',  ,'',,sci1Esc;
 -----------;
- 'Фильтр на данные'     , cmFilterSave, 'Фильтр на данные', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;

}
