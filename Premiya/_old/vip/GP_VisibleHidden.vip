/** Контур/Модуль: Утилиты                                                                          *
* Примечание:    Пример использования в Z_LSCHET##BASKET.Vip                                      *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#775          |07/09/17|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
#include GP_VisibleHidden.vih // Показать/скрыть поля
#component "GP_Common"
#doc
Показать/скрыть поля
#end
//------------------------------------------------------------------------------
Interface GP_VisibleHidden 'Показать/скрыть поля'    ('',hcNoContext, sci1Esc), EscClose, Gray;
  Show at (1,,55,18);

//------------------------------------------------------------------------------
// Константы
//------------------------------------------------------------------------------
Const
  cs_Field   = 'Поле';       // cfcPanelInputLine
  cs_Collumn = 'Колонка';    // cfcColumn
  cs_Title   = 'Надпись';    // cfcLabel, cfcStaticText
End;
//------------------------------------------------------------------------------
// Временная таблица
//------------------------------------------------------------------------------
Table Struct tmpTblField
(
  NRec            : comp
, wIns            : word        // включено/выключено
, sFieldName      : string      // идентификатор поля
, sFieldTitle     : string      // название поля
, sFieldHelp      : string      // Help поля
, sFieldTitleSort : string[20]  // название поля - для сортировки
, lFieldType      : longInt     // тип элемента (поля)
)
with index
(
  tmpTblField01 = NRec
, tmpTblField02 = sFieldTitleSort
, tmpTblField03 = lFieldType
);

//------------------------------------------------------------------------------
Create view vGB_VisibleHidden
Var
  cUserId        : comp;
  ContainerId    : tptr; // указатель корневого контейнера
  sModulName     : string;  // Имя модуля
  sInterfaceName : string;  // Имя интерфейса
  sSubContName   : string;  // наименование субконтейнера: брауз, скрин и др.

  i              : integer;
  j              : integer;
  wTmpCollumn    : word;
  wBit           : word;

As select
  if (tmpTblField.wIns = 1, '+', '-')   ( FieldName =  FldIns )  // показать/скрыть
  //------------
, if (tmpTblField.lFieldType = cfcPanelInputLine, cs_Field,
      if ( (tmpTblField.lFieldType = cfcColumn) or (tmpTblField.lFieldType = cfcTreeColumn), cs_Collumn,
          if (tmpTblField.lFieldType = cfcLabel or tmpTblField.lFieldType = cfcStaticText,
              cs_Title, '')))           ( FieldName =  FldType ) // тип элемента
  //------------
, UserDeskRep.Nrec
From
  UserDeskRep
, tmpTblField
Where
((
/*
      UserId          == UserDeskRep.cUserID
  and sModulName      == UserDeskRep.sModulName
  and sInterfaceName  == UserDeskRep.sInterfaceName
  and sSubContName    == UserDeskRep.sSubContName
  */
      UserId()          == UserDeskRep.cGrRepPl
  and 65000           == UserDeskRep.NREP
  and sModulName      == UserDeskRep.REPNAME(noindex)
  and sInterfaceName  == UserDeskRep.REPOPI(noindex)
  and sSubContName    == UserDeskRep.RESNAME[1](noindex)

))
Order byTitleSort       by tmpTblField.sFieldTitleSort
Order byTitleSortDesc   by tmpTblField.sFieldTitleSort(Desc)     // обратная сортировка

Order byFieldType       by tmpTblField.lFieldType
Order byFieldTypeDesc   by tmpTblField.lFieldType(Desc)          // обратная сортировка
;
Parameters
  ContainerId       // указатель корневого контейнера
, sModulName        // Имя модуля
, sInterfaceName    // Имя интерфейса
, sSubContName      // Имя субконтейнера
;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// ПРОЦЕДУРА BitOff - сбрасывает бит
//------------------------------------------------------------------------------
Procedure BitOff (var field: word; n: word);
{
  set field := field and (not (word(1) shl (n-1)));
}
//------------------------------------------------------------------------------
// ПРОЦЕДУРА BitOn - устанавливает бит(правильная процедура! :) )
//------------------------------------------------------------------------------
Procedure BitOn (var field: word; n: word);
{
  set field := field or (word(1) shl (n-1));
}
//------------------------------------------------------------------------------
// ФУНКЦИЯ IsBit - установлен ли бит
//------------------------------------------------------------------------------
Function IsBit (field: word; n: word): boolean;
{
  IsBit := (((field shr (n-1)) and word(1)) = 1);
} // function IsBit
//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
Procedure SetVisibleHidden(_ContainerId: tptr; _SubContainerStr: string);
{
  var ObjFullName      : string;
  var ObjSelf          : longint;
  var ObjContainer     : longint;
  var ObjContainerName : string;
  var ObjType          : longint;
  var Res              : integer;

  var ObjList : array [1] of string;

  Res := cfsSetCurrentContainer(_ContainerId);
  if Res <> 0 {
    Message('Текущий контейнер не установлен '+    '(' + string(Res) + ')', Error + OkButton);
    exit;
  }

  _SubContainerStr := Upcase(Trim(_SubContainerStr));

  Res := cfsGetObjInfo(_SubContainerStr, ObjFullName, ObjSelf, ObjContainerName, ObjType);

  SetLimit(ObjList, 0);

  if cfsEnumObjects(_SubContainerStr, ObjList, false) <> cfOk
    Exit;

  var sCollumnTitle : string;
  var sFieldName    : string;
  var sFieldHelp    : string;

  Delete all tmpTblField;

  j    := 0;
  wBit := 0;

  for(i := 1; i <= Count(ObjList); Inc(i))
  {
    if cfsGetObjInfo(ObjList[i], ObjFullName, ObjSelf, ObjContainer, ObjType) <> cfOk
      continue;

    Case ObjType of
      cfcPanelInputLine, // поле ввода на скрине
      cfcColumn,         // колонка в браузе
      cfcTreeColumn,     // колонка дерева
      cfcLabel,          // Надпись
      cfcStaticText:     // Статический текст
      {
        j := j + 1;

        // заполняем временную таблицу
        ClearBuffer(#tmpTblField);
        Case j of
        //-------
         1..16 :
         {
           wBit := wBit + 1;
           if IsBit (UserDeskRep.ResWord[1], wBit)
             tmpTblField.wIns := 1
           else
             tmpTblField.wIns := 0;
         }
        //-------
         17..32:
         {
           wBit := wBit + 1;

           if ( wBit = 17 )
             wBit := 1;

           if IsBit (UserDeskRep.ResWord[2], wBit)
             tmpTblField.wIns := 1
           else
             tmpTblField.wIns := 0;
         }
        //-------
         33..48:
         {
           wBit := wBit + 1;

           if ( wBit = 17 )
             wBit := 1;

           if IsBit (UserDeskRep.ResWord[3], wBit)
             tmpTblField.wIns := 1
           else
             tmpTblField.wIns := 0;
         }
        //-------
         49..64:
         {
           wBit := wBit + 1;

           if ( wBit = 17 )
             wBit := 1;

           if IsBit (UserDeskRep.ResWord[4], wBit)
             tmpTblField.wIns := 1
           else
             tmpTblField.wIns := 0;
         } //49..64:
        //-------
         65..80:
         {
           wBit := wBit + 1;

           if ( wBit = 17 )
             wBit := 1;


           if IsBit (UserDeskRep.ResWord[5], wBit)
             tmpTblField.wIns := 1
           else
             tmpTblField.wIns := 0;
         } //65..80:
        //-------
        End; //Case j

        // если нет наименования поля
        if ( ObjType = cfcPanelInputLine )
        {
          cfsGetProp(ObjList[i], cfpHelpLine, sCollumnTitle);     // подсказка
          if ( sCollumnTitle = '' )
          {
            cfsGetProp(ObjList[i], cfpName, sCollumnTitle);       // имя поля
          }
        }
        else
        {
          cfsGetProp(ObjList[i], cfpTitle, sCollumnTitle);       // название поля
          if ( sCollumnTitle = '' )
            cfsGetProp(ObjList[i], cfpHelpLine, sCollumnTitle);   // подсказка
        }

        cfsGetProp(ObjList[i], cfpName    , sFieldName);
        cfsGetProp(ObjList[i], cfpHelpLine, sFieldHelp);         // подсказка

        tmpTblField.sFieldTitle     := sCollumnTitle;            // название поля
        tmpTblField.sFieldTitleSort := sCollumnTitle;            // название поля - для сортировки
        tmpTblField.sFieldName      := sFieldName;               // имя поля
        tmpTblField.sFieldHelp      := sFieldHelp;               // подсказка
        tmpTblField.lFieldType      := ObjType;                  // тип поля
        If ( Insert current tmpTblField )<> tsOk {};
     } // cfcPanelInputLine, cfcColumn:
    End; //Case ObjType
  }// for(i := 1
  SetLimit(ObjList, 0);
  if ( GetFirst tmpTblField <> tsOk ){};
} // Procedure

//------------------------------------------------------------------------------
// ПРОЦЕДУРА MakeBuferNastr
//------------------------------------------------------------------------------
Procedure MakeBuferNastr;
{
    UserDeskRep.cGrRepPl       := UserId();
    UserDeskRep.OWNNAME        :=UserName();
    UserDeskRep.NREP           :=65000;
    //UserDeskRep.sModulName
    UserDeskRep.REPNAME   := sModulName;
    UserDeskRep.REPOPI    := sInterfaceName;
    UserDeskRep.RESNAME[1]:= sSubContName;

}//Procedure MakeBuferNastr;

//------------------------------------------------------------------------------
// ПРОЦЕДУРА SetVisibleForField
//------------------------------------------------------------------------------
Procedure SetVisibleForField(_ContainerId: tptr; _sModulName: string; _sInterfaceName: string; _sSubContName: string);
{
  var ObjFullName      : string;
  var ObjSelf          : longint;
  var ObjContainer     : longint;
  var ObjContainerName : string;
  var ObjType          : longint;
  var Res              : integer;
  //timelog('SetVisibleForField:'+_sModulName+'/'+_sInterfaceName+'/'+_sSubContName)
  var ObjList : array [1] of string;

  var sTitle : string;

  set sModulName     := _sModulName;
  set sInterfaceName := _sInterfaceName;
  set sSubContName   := _sSubContName;


  Res := cfsSetCurrentContainer(_ContainerId);

  if Res <> 0 {
    Message('Текущий контейнер не установлен (' + string(Res) + ')    ', Error + OkButton);
    exit;
  }

  _sSubContName := Upcase(Trim(_sSubContName));

  SetLimit(ObjList, 0);

  // загрузить список объектов, вставленных в данный контейнер
  if cfsEnumObjects(_sSubContName, ObjList, false) <> cfOk
    Exit;

  var sObjType : string;

  j           := 0;
  wTmpCollumn := 0;
  wBit        := 0;

  if ( GetFirst UserDeskRep = tsOk )
  {
    // если количество элементов субконтейнера <> значению в базе
    // Не настраивали видимость и не будем
    if UserDeskRep.ResWord[40] =1 then exit;
    if ( Count(ObjList) <> UserDeskRep.ResWord[39] )
    {
      /* Не будем пугать - ну подумаешь другое поле увидят
      if (   UserDeskRep.ResWord[1 <> 65535
          or UserDeskRep.ResWord[2 <> 65535
          or UserDeskRep.ResWord[3 <> 65535
          or UserDeskRep.ResWord[4 <> 65535
          or UserDeskRep.ResWord[5 <> 65535
         )
      {
        U_Displ('Для визуальной области ' + _sSubContName + ' изменилось количество элементов.');
        U_Displ('Все элементы будут отображены!');
        U_Displ('-----------------------------------------------------------------------------');
      }

      UserDeskRep.ResWord[1]   := not word(0);
      UserDeskRep.ResWord[2]   := not word(0);
      UserDeskRep.ResWord[3]   := not word(0);
      UserDeskRep.ResWord[4]   := not word(0);
      UserDeskRep.ResWord[5]   := not word(0);
      */
      UserDeskRep.ResWord[39] := Count(ObjList);
      If ( Update current UserDeskRep <> tsOk ) {};
    } //if ( Count(ObjList)

    for(i := 1; i <= Count(ObjList); Inc(i))
    {
      if cfsGetObjInfo(ObjList[i], ObjFullName, ObjSelf, ObjContainer, ObjType) <> cfOk
        continue;
      //timelog('  ObjFullName='+ObjFullName+', ObjType='+string(ObjType))
      Case ObjType of
        cfcPanelInputLine, // поле ввода на скрине
        cfcColumn,         // колонка в браузе
        cfcTreeColumn,     // колонка дерева
        cfcLabel,          // Надпись
        cfcStaticText:     // Статический текст
        {
          j := j + 1;
          sFieldName:='';
          cfsGetProp(ObjList[i], cfpName, sFieldName);

          Case j of
          //-------
           1..16 :
           {
             wTmpCollumn := UserDeskRep.ResWord[1];
             wBit := wBit + 1;
           } // 1..16 :
          //-------
           17..32:
           {
             wBit := wBit + 1;
             if ( wBit = 17 )
               wBit := 1;
             wTmpCollumn := UserDeskRep.ResWord[2];
           } //17..32:
          //-------
           33..48:
           {
             wBit := wBit + 1;
             if ( wBit = 17 )
               wBit := 1;
             wTmpCollumn := UserDeskRep.ResWord[3];
           } //33..48:
          //-------
           49..64:
           {
             wBit := wBit + 1;
             if ( wBit = 17 )
               wBit := 1;
             wTmpCollumn := UserDeskRep.ResWord[4];
           } //49..64:
          //-------
           65..80:
           {
             wBit := wBit + 1;
             if ( wBit = 17 )
               wBit := 1;
             wTmpCollumn := UserDeskRep.ResWord[5];
           } //65..80:
          //-------
          End; //Case j

          if IsBit(wTmpCollumn, wBit)
          { //timelog('  sFieldName='+sFieldName+', отображаем')

            // показываем
            Case ObjType of
            cfcColumn,         // колонка в браузе
            cfcTreeColumn :    // колонка дерева
               cfsSetProp(sFieldName, cfpHidden, False);
            else
              cfsSetProp(sFieldName, cfpVisible, True);

            end;
          } //if IsBit
          else
          { // скрываем
            Case ObjType of
            cfcColumn,         // колонка в браузе
            cfcTreeColumn  :   // колонка дерева
               cfsSetProp(sFieldName, cfpHidden, True);
            else
               cfsSetProp(sFieldName, cfpVisible, False);
            end;
            //timelog('  sFieldName='+sFieldName+', скрываем')

          }
        }
      End; //Case ObjType
    } //for
  } //if ( GetFirst UserDeskRep
  else
  {
    ClearBuffer(#UserDeskRep);
    MakeBuferNastr;
    UserDeskRep.ResWord[1]      := not word(0);
    UserDeskRep.ResWord[2]      := not word(0);
    UserDeskRep.ResWord[3]      := not word(0);
    UserDeskRep.ResWord[4]      := not word(0);
    UserDeskRep.ResWord[5]      := not word(0);
    UserDeskRep.ResWord[40]        :=1;

    UserDeskRep.ResWord[39]    := Count(ObjList);
    if ( Insert current UserDeskRep <> tsOk ){};
    if False // не будем показывать если еще нет записей
    for(i := 1; i <= Count(ObjList); Inc(i))
    {
      if cfsGetObjInfo(ObjList[i], ObjFullName, ObjSelf, ObjContainer, ObjType) <> cfOk
        continue;

      Case ObjType of
        cfcPanelInputLine, // поле ввода на скрине
        cfcColumn,         // колонка в браузе
        cfcTreeColumn,     // колонка дерева
        cfcLabel,          // Надпись
        cfcStaticText:     // Статический текст
        {
          cfsGetProp(ObjList[i], cfpName, sFieldName);
          // показываем
          cfsSetProp(sFieldName, cfpVisible, True);
        }
      End;
    } //for
  } //else
  SetLimit(ObjList, 0);
} //SetVisibleForField

//------------------------------------------------------------------------------
// ПРОЦЕДУРА GetArrSubContName - формирует строковый массив из названий видимых областей
//------------------------------------------------------------------------------
Procedure GetArrSubContName(_ContainerId: tptr; var _ArrSubContName: TArrSubContName);
{
  var ObjFullName   : string;
  var ObjSelf       : longint;
  var ObjContainer  : longint;
  var ObjType       : longint;

  var Res           : integer;

  var sCollumnTitle : string;
  var sFieldName    : string;

//  var ObjList       : array [1] of string;
  var ObjList       : array [1] of LongInt;

!!! - коментим - это не нужно!!!  - падало по RunTime
//  Res := cfsSetCurrentContainer(_ContainerId);

//  if Res <> 0 {
//    Message('Текущий контейнер не установлен (' + string(Res) + ')', Error + OkButton);
//    exit;
//  }

  SetLimit(ObjList, 0);

  // загрузить список объектов, вставленных в данный контейнер
  if cfsEnumObjects(_ContainerId, ObjList, false) <> cfOk
    Exit;

  j := 0;
  for(i := 1; i <= Count(ObjList); Inc(i))
  {
    if cfsGetObjInfo(ObjList[i], ObjFullName, ObjSelf, ObjContainer, ObjType) <> cfOk
      continue;

    cfsGetProp(ObjList[i], cfpName, sFieldName);

    // обрабатываем только browse, screen и tree
    case ObjType of
      cfcScreen, cfcBrowser, cfcTreeBrowser:
      {
        j:= j + 1;
        _ArrSubContName[j] := sFieldName;
      }
    End; //case ObjType
  } // for
  SetLimit(ObjList, 0);
} //Procedure GetArrSubContName

//******************************************************************************
Browse brVisibleHidden 'Элементы субконтейнера'    ('',,);
  Show at (,,,14);
Table tmpTblField;
Fields
  FldIns                  '+/-'          ('Показать +, Спрятать -',,sci13Esc) : [ 3], PickButton, Protect, NoAutoSize;
  tmpTblField.sFieldTitle 'Наименование' ('Наименование элемента' ,,) : [13], Protect;
  tmpTblField.sFieldHelp  'Описание'     ('Описание элемента    ' ,,) : [13], Protect;
  FldType                 'Тип'          ('Тип элемента'          ,,) : [ 9], Protect, NoAutoSize;
end; // Browse
//-----------------
Screen scButtons;
  Show At (,15,,);
Buttons
  cmOk     ,,, 'Применить настройки'  ,, sci1Esc;
  cmVisAll ,,, 'Показать все элементы',, sci1Esc;
  cmCancel ,,, 'Закрыть окно'         ,, sci1Esc;
<<

  <. Применить .> <.Показать все.> <.   Отмена   .>
>>
End; //Screen scButtons
//******************************************************************************
//==============================================================================
HandleEvent //interface
//..............................................................................
cmInit:
{
  if ( GetFirst UserDeskRep <> tsOk )
  {
    MakeBuferNastr;

    UserDeskRep.ResWord[1]      := not word(0);
    UserDeskRep.ResWord[2]      := not word(0);
    UserDeskRep.ResWord[3]      := not word(0);
    UserDeskRep.ResWord[4]      := not word(0);
    UserDeskRep.ResWord[5]      := not word(0);
    UserDeskRep.ResWord[40]        := 1 ; // пока ничего не меняем показываем
    if ( Insert current UserDeskRep <> tsOk ){};
  }
  SetVisibleHidden(ContainerId, sSubContName);
} //cmInit
//..............................................................................
cmPick:
{
  Case CurField of
    #FldIns:
    {
      if ( tmpTblField.wIns = 0 )
        Set tmpTblField.wIns := 1
      else
        Set tmpTblField.wIns := 0;
      UserDeskRep.ResWord[40]:=0;
      If ( Update current tmpTblField  <> tsOk ) {};
    } // #FldIns
  End; // Case
} // cmPick
//..............................................................................
cmOk:
{
  j    := 0;
  wBit := 0;

  _Loop tmpTblField
  {
    j := j + 1;
    Case j of
    //-------
     1..16 :
     {
       wBit := wBit + 1;
       if ( tmpTblField.wIns = 1 )
       {
         BitOn(UserDeskRep.ResWord[1], wBit);
       }
       else
       {
         BitOff(UserDeskRep.ResWord[1], wBit);
       }
     } //1..16 :
    //-------
     17..32:
     {
       wBit := wBit + 1;

       if ( wBit = 17 )
         wBit := 1;

       if ( tmpTblField.wIns = 1 )
       {
         BitOn(UserDeskRep.ResWord[2], wBit);
       }
       else
       {
         BitOff(UserDeskRep.ResWord[2], wBit);
       }
     } //17..32:
    //-------
     33..48:
     {
       wBit := wBit + 1;

       if ( wBit = 17 )
         wBit := 1;

       if ( tmpTblField.wIns = 1 )
       {
         BitOn(UserDeskRep.ResWord[3], wBit);
       }
       else
       {
         BitOff(UserDeskRep.ResWord[3], wBit);
       }
     } //33..48:
    //-------
     49..64:
     {
       wBit := wBit + 1;

       if ( wBit = 17 )
         wBit := 1;

       if ( tmpTblField.wIns = 1 )
       {
         BitOn(UserDeskRep.ResWord[4], wBit);
       }
       else
       {
         BitOff(UserDeskRep.ResWord[4], wBit);
       }
     } //49..64:
    //-------
     65..80:
     {
       wBit := wBit + 1;

       if ( wBit = 17 )
         wBit := 1;

       if ( tmpTblField.wIns = 1 )
       {
         BitOn(UserDeskRep.ResWord[5], wBit);
       }
       else
       {
         BitOff(UserDeskRep.ResWord[5], wBit);
       }
     } //65..80:
    //-------
    End; //Case j
  } // _Loop tmpTblField

  if ( Update current UserDeskRep <> tsOk ){};

  // устанавливаем видимость элемента
  SetVisibleForField( ContainerId
                    , sModulName
                    , sInterfaceName
                    , sSubContName);

  CloseInterface(cmDefault);
} // cmOk
//..............................................................................
cmVisAll: // Показать все
{
  _Loop tmpTblField
  {
    tmpTblField.wIns := 1;
    Update current tmpTblField;
  } //_Loop tmpTblField

  set UserDeskRep.ResWord[1] := not word(0);
      UserDeskRep.ResWord[2] := not word(0);
      UserDeskRep.ResWord[3] := not word(0);
      UserDeskRep.ResWord[4] := not word(0);
      UserDeskRep.ResWord[5] := not word(0);
      UserDeskRep.ResWord[40]   := 0 ; // пока ничего не меняем показываем

  if ( Update current UserDeskRep <> tsOk ){};

  // устанавливаем видимость элемента
  SetVisibleForField( ContainerId
                    , sModulName
                    , sInterfaceName
                    , sSubContName);

  CloseInterface(cmDefault);
} //cmVisAll
//..............................................................................
cmCancel:
{
  CloseInterface(cmCancel);
} // cmCancel
//..............................................................................
cmColumnClicked:                //     byFieldType       by tmpTblField.lFieldType
{
  case GetColumnSorting(brVisibleHidden, Target) of
  //-----------------------------------------
    0:  // если нет сортировки, то
       { // сортируем сверху вниз
         SetColumnSorting(brVisibleHidden, Target, - 1); // сверху вниз

         case Target of
           #tmpTblField.sFieldTitle : SetOrder(tibyTitleSort);
           #FldType                 : SetOrder(tibyFieldType);
         end;

         RescanPanel(#tmpTblField);
       }
    //-----------------------------------------
    1:  // если поле отсортировано  снизу вверх
       { // сортируем сверху вниз
          SetColumnSorting(brVisibleHidden, Target, -1); // сверху вниз

          case Target of
           #tmpTblField.sFieldTitle : SetOrder(tibyTitleSort);
           #FldType                 : SetOrder(tibyFieldType);
          end;

          RescanPanel(#tmpTblField);
       }
    //-----------------------------------------
   -1: // если поле отсортировано  сверху вниз
       { // то сортируем снизу вверх или сортировка отсутствует
         SetColumnSorting(brVisibleHidden, Target, 1);      // снизу вверх

         case Target of
           #tmpTblField.sFieldTitle : SetOrder(tibyTitleSortDesc);
           #FldType                 : SetOrder(tibyFieldTypeDesc);
         end;

          RescanPanel(#tmpTblField);
       }
  end;
}     // cmColumnClicked:
//..............................................................................
end; // Handlevent
END. // Interface


VisibleHidden_Fields Menu
{  - 'Показать/скрыть поля' , cmManagerId, 'Управление видимостью полей'
        , hcStud_KartotekaStud, 'Alt+M',kbAltM,sci1Esc;


}
