/*************************************************************************************************\
* Наименование: Фильтр по счетам                                                                  *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |              |23/01/19|Кузьмин П.Ю.             |НПО Энергомаш                    *
* Разработка  |#3146.#11     |10/07/19|Торохов А.П.             |НПО Энергомаш                    *
\*************************************************************************************************/
/*
================= ##3146.#11 =================
При выборе субсчетов необходим режим (cgiPickKau), когда в PikBuh добавляются только помеченные записи, без обязательной вставки счетов
т.е. требуется cgiPick+cgiMulti+cgiNotClear+cgiPickKau
Для возможности изменить режим выбора добавлен параметр в функцию PickMode
*/
#include PickBuh.vih   // Обьектный интерфес работы с таблицей PickBuh

#include GP_UserFilterBuhSchet.vih

interface GP_UserFilterBuhSchet;

var cPlansSch:comp;
    StrLen:byte;
    wIntModePick:Word;  

create view
from
  PickBuh, BuhSchet;

function PosR(subch: char; s: string):byte;
var i,l:byte;
{
  result:=0;

  l:=Length(s);
  for(i:=l;i>0;i--)
    if (s[i]=subch) {
      result:=i;
      break;
    }
}

function GetFilterStr:string;
var i,kol:longint;
    cRec:comp;
    sTmp:string;
{
  kol:=GetMarkerCount(mFilter);
  if (kol=0) result:='Не установлен'
  else {
    result:='';

    for(i:=0;i<kol;i++) {
      if (not GetMarker(mFilter, i, cRec)) continue;
      if (getfirst fastfirstrow BuhSchet where((cRec==BuhSchet.NRec))<>tsok) continue;

      sTmp:='';
      if (result<>'') sTmp+=', ';
      sTmp+=SubStr(BuhSchet.Schet,2,255);
      if (BuhSchet.SubSch<>'') sTmp+='.'+BuhSchet.SubSch;

      if (Length(result)+Length(sTmp)<=StrLen or result='')
        result+=sTmp
      else {
        sTmp:='... (всего '+string(kol)+')';

        if (StrLen>Length(sTmp) and Pos(',', result)>0)
          while(Length(result)+Length(sTmp)>StrLen)
            result:=SubStr(result, 1, PosR(',', result)-1);

        result+=sTmp;
        break;
      }
    }
  }
}

constructor UserFilterBuhSchet(NoField:longint;SaveName:string;PlansSch:comp;StrLen:byte=80);
{
  private::cPlansSch:=PlansSch;
  private::StrLen:=StrLen;

  result:=inherited::UserFilter(NoField, SaveName);
}

procedure Pick;
var i,kol:longint;
    cRec:comp;
{
  if (cPlansSch=0) {
    message('Вначале необходимо выбрать план счетов.');
    exit;
  }

  var sGetSch:tSchet3 = '';
  var sGetSub:tSubSch = '';

  delete PickBuh where((cgPick_Schet==PickBuh.KodTable));
  delete PickBuh where((cgPick_SubSch==PickBuh.KodTable));

  kol:=GetMarkerCount(mFilter);
  for(i:=0;i<kol;i++) {
    if (not GetMarker(mFilter, i, cRec)) continue;
    if (getfirst fastfirstrow BuhSchet where((cRec==BuhSchet.NRec))<>tsok) continue;

    insert PickBuh set
      PickBuh.KodTable:=if(BuhSchet.cNode = 0,word(cgPick_Schet),word(cgPick_SubSch)),
      PickBuh.PickRec:=BuhSchet.NRec,
      PickBuh.PickKod:=BuhSchet.LevelCode,
      PickBuh.Schet:=BuhSchet.Schet,
      PickBuh.SubKau:=if(BuhSchet.cNode <> 0, BuhSchet.SubSch /*выбор субсчета*/, cgDefSub /*выбор счета*/),
      PickBuh.Name:=BuhSchet.Name,
      PickBuh.Pick:=i + 1,
      PickBuh.PickKol:=0;

    if (sGetSch='') {
      sGetSch:=BuhSchet.Schet;
      sGetSub:=BuhSchet.SubSch;
    }
  }

  StoreMarker(mFilter, 'gt' + string(cgPick_Schet) + 'buhschet');

  if (RunInterface('GetBuhSchet', If(wIntModePick<>0, wIntModePick, word(cgiPick+cgiMulti+cgiNotClear)), cPlansSch, sGetSch, sGetSub)=cmDefault) {
    DoneMarker(mFilter, '');
    mFilter:=InitMarker('gt' + string(cgPick_Schet) + 'buhschet',8,0,1);

    private::FilterStr:=GetFilterStr;
  }
}

procedure PickMode(_wIntMode : Word);
{
  wIntModePick := _wIntMode;
  Pick;
  wIntModePick := 0;
}

procedure SetPlansSch(Val:comp);
{
  if (Val=cPlansSch) exit;

  Del;

  cPlansSch:=Val;
}

property PlansSch:comp read cPlansSch write SetPlansSch(result);

end.
