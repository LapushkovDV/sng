/*************************************************************************************************\
* Наименование: Справочник алгоритмов KPI                                                         *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#191          |28/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include Marker.vih
#include GP_UserAccessService.vih

//-----------------------------
#include GP_KPI_Alg.vih
//-----------------------------
#doc
Справочник алгоритмов KPI
#end
interface GP_KPI_AlgPickAndEdit  'Справочник алгоритмов KPI' (,,sci1Esc), Cyan;
show(20,5,120,25);
//-----------------------------
var cKPI_Alg:comp;
    hMarker:longint;
    Mode:word;
    wType_ALg:word;//0 - показатели, 1 премия
    pMarker:IMarker(Marker) new;
    iGP_KPI_Alg:GP_KPI_Alg_Calc New;
    UserAccessService:GP_UserAccessService NoAuto;
    RoleGroupName    :string;
    cKPI_ALG_LAST:comp;
//-----------------------------
create view
as select GP_KPI_Alg.Code
from
  GP_KPI_Alg(KPI_Alg02),
  GP_KPI_Alg GP_KPI_Alg2(KPI_Alg02),
  GP_KPI_ALG_SPEC(GP_KPI_ALG_SPEC02),
  GP_KPI_ALG_SPEC GP_KPI_ALG_SPEC_F(GP_KPI_ALG_SPEC02),
  GP_KPI,
  //для контроля
  GP_KPI_FIELDS, GP_KPI_FIELDS GP_KPI_FIELDS_CHK,
  GP_KPI_Raise GP_KPI_Raise1,GP_KPI_Raise GP_KPI_Raise2,GP_KPI_Raise GP_KPI_Raise3,
  //========================
  Tmp_Kpi_Alg

where ((
     wType_ALg == GP_KPI_Alg.Type_Alg
and  wType_ALg == GP_KPI_Alg2.Type_Alg
and  GP_KPI_Alg.Nrec == GP_KPI_ALG_SPEC.cGP_KPI_Alg
and  GP_KPI_Alg.Nrec == GP_KPI_ALG_SPEC_F.cGP_KPI_Alg
and  GP_KPI_Alg.Nrec == GP_KPI_FIELDS.cGP_KPI_ALG(Noindex)
and  GP_KPI_Alg.Nrec == GP_KPI_FIELDS_CHK.cGP_KPI_ALG_CHK(Noindex)
and  GP_KPI_Alg.Nrec == GP_KPI_Raise1.cAlg_Summa(noindex)
and  GP_KPI_Alg.Nrec == GP_KPI_Raise2.cAlg_CRP(noindex)
and  GP_KPI_Alg.Nrec == GP_KPI_Raise3.cAlg_KoefKorr(noindex)


));
parameters
 wType_ALg
#doc
  тип алгоритма 0 - КПИ, 1 - премии
#end
,Mode
#doc
 Ражим выбора
#end
,cKPI_Alg
#doc
 ссылка на алгоритм
#end
,hMarker
#doc
 маркер для выбора
#end
;

create view vFields
var
    pNrec_Fields : comp;
select GP_KPI_FIELDS.Name
from
  GP_KPI_FIELDS
 ,GP_KPI_Raise
 ,GP_KPI_Fond
 ,GP_KPI_TypeVed
 ,GP_TypeDocs
where
((  pNrec_Fields == GP_KPI_FIELDS.Nrec
and GP_KPI_FIELDS.cDoc == GP_KPI_Raise.Nrec
and GP_KPI_FIELDS.cDoc == GP_KPI_Fond.Nrec
and GP_KPI_FIELDS.cDoc == GP_KPI_TypeVed.Nrec
and GP_KPI_FIELDS.cDoc == GP_TypeDocs.Nrec
));

//==============================================
// функции
//==============================================
//----------------------------------------
// Сохранить параметры
//----------------------------------------
Procedure SaveParam;
{ SaveMyDsk(cKPI_ALG_LAST,'GP_KPI_AlgPickAndEdit'+string(wType_ALg)+'_cKPI_ALG_LAST');
}
//----------------------------------------
// Восстановить параметры
//----------------------------------------
Procedure ReadParam;
{ if not ReadMyDsk(cKPI_ALG_LAST,'GP_KPI_AlgPickAndEdit'+string(wType_ALg)+'_cKPI_ALG_LAST',false) cKPI_ALG_LAST:=0;
}

//----------------------------------------
// Получить наименование типа документа по полю
//----------------------------------------
Function GetFieldNameDoc(_PField:comp):string;
{ Result:='';
  vFields.pNrec_Fields:=_PField;
  if vFields.Getfirst GP_KPI_FIELDS=tsok
  { case vFields.GP_KPI_FIELDS.wType of
    0:
    { Result:='Премия:';
      if vFields.Getfirst GP_KPI_Raise=tsok
        Result:=Result+vFields.GP_KPI_Raise.Name;
    }
    1:
    { Result:='Фонд:';
      if vFields.Getfirst GP_KPI_Fond=tsok
        Result:=Result+vFields.GP_KPI_Fond.Name;
    }
    2:
    { Result:='Вед.исп.дисциплины:';
      if vFields.Getfirst GP_KPI_TypeVed=tsok
        Result:=Result+vFields.GP_KPI_TypeVed.Name;
    }
    100..120:
    { Result:='Тип документа:';
      if vFields.Getfirst GP_TypeDocs=tsok
        Result:=Result+vFields.GP_TypeDocs.Name;
    }
    end;
  }

} //Function GetFieldNameDoc(_PField:comp):string;
//----------------------------------------
// Заголовок интерфейса
//----------------------------------------
Function GetTitleInterface:string;
{ var _Title:string;
  _Title:='Справочник алгоритмов KPI';
  case wType_Alg of
  1: _Title:='Справочник алгоритмов расчета премии';
  end;
  Result:=_Title;
}//Procedure SetTitleInterface;

//----------------
// Заполнить таблицу алгоритмов
//-----------------
Procedure Fill_Tmp_alg;
{ iGP_KPI_Alg.Fill_Tmp_alg(wType_Alg);
  ReReadRecord(#Tmp_Kpi_Alg);

} //Procedure Fill_Tmp_alg;


//****************************** DataStream ************************************
DataStream dtsKPI_ALG
//****************************** DataStream ************************************
(
  Table GP_KPI_Alg
  (
    [CODE     ]  GP_KPI_Alg.CODE     ;//Код
    [NAME     ]  GP_KPI_Alg.NAME     ;//Наименование
    [FORMULA  ]  GP_KPI_Alg.FORMULA  ;//Формула расчета
    [TYPE_ALG ]  GP_KPI_Alg.TYPE_ALG ;//Тип Алгоритма
    [TYPE_CALC]  GP_KPI_Alg.TYPE_CALC;//Тип Расчета 1 - текст
    [OPTION   ]  GP_KPI_Alg.OPTION   ;//Опции расчета алгоритма    )
  );//Table GP_KPI_Alg
  Table GP_KPI_Alg_Spec
  ( [KEY     ] GP_KPI_Alg_Spec.KEY       ;//Ключ
    [NUMBER  ] GP_KPI_Alg_Spec.NUMBER    ;//Порядковый номер
    [FORMULA ] GP_KPI_Alg_Spec.FORMULA   ;//Формула
    [PRIM    ] GP_KPI_Alg_Spec.PRIM      ;//Примечание
  );//Table GP_KPI_Alg_Spec
) //  Table GP_KPI_Alg
end; //DataStream dtsKPI_ALG

//==============================================
// Основной экран
//==============================================
browse brKPI_Alg (,,sci14Esc);
table GP_KPI_Alg;
recMarker=pMarker;
fields
  GP_KPI_Alg.Code 'Код':[10], Protect,NoAutoSize;
  GP_KPI_Alg.Name 'Наименование':[40], Protect;
  GP_KPI_Alg.Formula 'Формула расчета':[50], Protect;
end;

//==============================================
// Окно выбора ключей
//==============================================
window wnVibKey 'Выбор ключа для расчета' ,Cyan,DoAccept;
show(25,8,70,23);
browse brVibKPI_Alg (,,sci1Esc);
Table Tmp_KPI_ALG;
Fields
 Tmp_KPI_ALG.Key  'Формула' :[20], Protect;
 Tmp_KPI_ALG.Prim 'Назначение' :[50], Protect;
end;
HandleEvent
cmInit:
{ Fill_Tmp_alg;
}
end;
end;//window wnVibKey




//==============================================
// Окно редактирования
//==============================================
window WinEdit 'Редактирование алгоритмов KPI' (,,sci178Esc) Blue;
show(,,120,25);
//----------------------------------------------
browse brEditKPI_Alg (,,sci178Esc);
show(,,90,10);
table GP_KPI_Alg;
fields
  GP_KPI_Alg.Code 'Код':[10], NoProtect,NoAutoSize;
  GP_KPI_Alg.Name 'Наименование':[40], NoProtect,
    {font={BackColor=if(GP_KPI_Alg.Name='',ColorNeed,0)}};
  GP_KPI_Alg.Formula 'Формула расчета' (,,sci1378Esc):[50], NoProtect,PickButton;
  GP_KPI_Alg.Type_Calc  'Тип' ('Тип Расчета 0 - формула, 1 - текст(пока нет)') : [6],[List 0 'Формула','Процедура'],Protect;
end;
//----------------------------------------------
Screen scEditKPI_Alg (,,sci178Esc);
show(91,,,10);
table GP_KPI_Alg;
fields
  GP_KPI_Alg.Option ('Использование Алгоритмов расчета ЗП медлено') : NoProtect;
<<
 Опции расчета
 [.] Алгоритмы расчета ЗП`
 [.] Расчеты по табелю`
>>
end;
//----------------------------------------------
TabbedSheet bottom tabKPI_Alg;
show(,11,,);
browse brEditKPI_Alg_Spec  'Формулы' (,,sci178Esc);
table GP_KPI_Alg_Spec;
fields
  GP_KPI_Alg_Spec.Number  'п/п'        ('Порядковый номер'   ) :[4],NoProtect;
  GP_KPI_Alg_Spec.Key     'Ключ'       ('Ключ для формул %%' ) :[10],NoProtect;
  GP_KPI_Alg_Spec.Formula 'Формула'    ('Формула',,sci1378Esc) :[50],NoProtect,PickButton;
  GP_KPI_Alg_Spec.Prim    'Примечание' ('Примечание'         ) :[50],NoProtect;
end;
Text GP_KPI_Alg.MAlg 'Алгоритм';
end;//TabbedSheet bottom tabKPI_Alg;
//----------------------------------------------
HandleEvent
//----------------------------------------------
cmDone:{
  if (not UpDateTable) abort;
}
cmPick:
{ case CurField of
  #GP_KPI_Alg_Spec.Formula,#GP_KPI_Alg.Formula:
  { if RunWindowModal(wnVibKey)=cmDefault
    { var _Key:string=Tmp_Kpi_Alg.Key;
      if _Key='%EM_Interface(, )%'
      { var _InterFace:string;
        _InterFace:=iGP_KPI_Alg.ChooseInterface(WType_Alg);
        if _InterFace<>''
        _Key:='%EM_Interface('+_InterFace+','''')';
      }
      case CurField of
      #GP_KPI_Alg_Spec.Formula :
      { Set GP_KPI_Alg_Spec.Formula:=GP_KPI_Alg_Spec.Formula+_Key;
      }
      #GP_KPI_Alg.Formula      :
      { Set GP_KPI_Alg.Formula:=GP_KPI_Alg.Formula+_Key;
      }
      end;
    }

  }
  end;
}
cmBuhCalculator: //Shift+f3
{
  case CurField of
  #GP_KPI_Alg_Spec.Formula,#GP_KPI_Alg.Formula:
  { var _Key:string='';
    if (runinterface('ZarFunc', _Key) <> cmcancel)
    { case CurField of
      #GP_KPI_Alg_Spec.Formula :
      { Set GP_KPI_Alg_Spec.Formula:=GP_KPI_Alg_Spec.Formula+_Key;
      }
      #GP_KPI_Alg.Formula      :
      { Set GP_KPI_Alg.Formula:=GP_KPI_Alg.Formula+_Key;
      }
      end;

    }
  }
  else
  { message('Для данного поля выбор не предусмотрен')

  }
  end;
}
cmAttrib: //проверить корректность алгоритма
{

}
cmHotKeys:
{  PutHotCommand(RunMenu('GP_KPI_AlgPickAndEdit_MENU'))
}
end;
end;//WinEdit

TableEvent table GP_KPI_Alg;
cmSetDefault:{
  if ((getlast GP_KPI_Alg2 where (( wType_ALg == GP_KPI_Alg2.Type_Alg )) ordered by index KPI_Alg02)=tsok)
    GP_KPI_Alg.Code:=NextNumStr(GP_KPI_Alg2.Code)
  else
    GP_KPI_Alg.Code:='01';
  GP_KPI_Alg.Type_Alg:=wType_ALg;
  SelectField(#GP_KPI_Alg.Name);
}
cmCheckField:{
  case CurField of
    #GP_KPI_Alg.Name:{
      if (Trim(GP_KPI_Alg.Name)='') {
        message('Пожалуйста, укажите наименование алгоритма или удалите запись.',error);
        abort;
      }
    }
  end;
}
cmInsertRecord:{
  insert current GP_KPI_Alg;
}
cmUpdateRecord:{
  update current GP_KPI_Alg;
}
cmDeleteRecord:{
  if wType_Alg=0
  { if (recordexists GP_KPI where((GP_KPI_Alg.NRec==GP_KPI.cKPI_Alg(noindex)))=tsok) {
     message('Алгоритм используется в показателях премирования'#13+
            'Удаление не возможно.',error);
     abort;
      exit;
   }
  }
  if wType_Alg=1
  {
    var _PAlg:comp=GP_KPI_Alg.NRec;
    if (recordexists GP_KPI_Fields =tsok)
    { message('Алгоритм используется в настройке полей ведомостей'
           +chr(13)+'например, в типе документа '+string(GP_KPI_Fields.wType)
           +chr(13)+GetFieldNameDoc(GP_KPI_Fields.Nrec)
           +chr(13)+'поле  '+string(GP_KPI_Fields.NPP)+' ,'+GP_KPI_Fields.Name
           +chr(13)+'Удаление не возможно.',error);
      abort;
      exit;
    }
    if (recordexists GP_KPI_Fields_Chk =tsok)
    { message('Алгоритм используется в настройке контроля полей ведомостей'
           +chr(13)+'например, в типе документа '+string(GP_KPI_Fields_Chk.wType)
           +chr(13)+GetFieldNameDoc(GP_KPI_Fields_Chk.Nrec)
           +chr(13)+'поле  '+string(GP_KPI_Fields_Chk.NPP)+' ,'+GP_KPI_Fields_Chk.Name
           +chr(13)+'Удаление не возможно.',error);
      abort;
      exit;
    }
    if (recordexists GP_KPI_Raise1 =tsok)
    { message('Алгоритм используется в настройке премии'
           +chr(13)+GP_KPI_Raise1.Code+' '+GP_KPI_Raise1.Name
           +chr(13)+'Удаление не возможно.',error);
      abort;
      exit;
    }
    if (recordexists GP_KPI_Raise2 =tsok)
    { message('Алгоритм используется в настройке премии'
           +chr(13)+GP_KPI_Raise2.Code+' '+GP_KPI_Raise2.Name
           +chr(13)+'Удаление не возможно.',error);
      abort;
      exit;
    }
    if (recordexists GP_KPI_Raise3 =tsok)
    { message('Алгоритм используется в настройке премии'
           +chr(13)+GP_KPI_Raise3.Code+' '+GP_KPI_Raise3.Name
           +chr(13)+'Удаление не возможно.',error);
      abort;
      exit;
    }


  }
  if message('Удалить алгоритм '+GP_KPI_Alg.Code+' '+GP_KPI_Alg.Name,YesNo)<>cmYes
  {   abort;
      exit;
  }
  delete GP_KPI_Alg_Spec where (( GP_KPI_Alg.Nrec == GP_KPI_Alg_Spec.cGP_KPI_Alg ));

  delete current GP_KPI_Alg;
}
end;//TableEvent table GP_KPI_Alg;

//=========================================
TableEvent table GP_KPI_Alg_Spec;
cmSetDefault:
{
  if (getlast GP_KPI_Alg_Spec_F=tsok)
    GP_KPI_Alg_Spec.Number:=GP_KPI_Alg_Spec_F.Number+1
  else
    GP_KPI_Alg_Spec.Number:=01;
  GP_KPI_Alg_Spec.Key:='%'+string(GP_KPI_Alg_Spec.Number)+'%';
  GP_KPI_Alg_Spec.cGP_KPI_Alg:=GP_KPI_Alg.Nrec;
  SelectField(#GP_KPI_Alg_Spec.Key);
}
cmInsertRecord:{
  insert current GP_KPI_Alg_Spec;
}
cmUpdateRecord:{
  update current GP_KPI_Alg_Spec;
}
cmCheckField:
{ case CurField of
  #GP_KPI_Alg_Spec.Key:
  { if substr(GP_KPI_Alg_Spec.Key,1,1)<>'%'
    or substr(GP_KPI_Alg_Spec.Key,Length(GP_KPI_Alg_Spec.Key),1)<>'%'
    { Message('Ключ должен быть заключен в %%');
      if substr(GP_KPI_Alg_Spec.Key,1,1)<>'%'
        set GP_KPI_Alg_Spec.Key:='%'+GP_KPI_Alg_Spec.Key;
      if substr(GP_KPI_Alg_Spec.Key,Length(GP_KPI_Alg_Spec.Key),1)<>'%'
        set GP_KPI_Alg_Spec.Key:=GP_KPI_Alg_Spec.Key+'%';
    }
    if GetFirst GP_KPI_Alg_Spec_F where ((
          GP_KPI_Alg.Nrec ==  GP_KPI_ALG_SPEC_F.cGP_KPI_Alg
      and GP_KPI_Alg_Spec.Key == GP_KPI_Alg_Spec_F.Key(NoIndex)
      and (GP_KPI_Alg_Spec.Nrec<>GP_KPI_Alg_Spec_f.Nrec)
       ))=tsok
    { Message('Уже есть ключ '+GP_KPI_Alg_Spec.Key);
      Abort;
    }
  }
  end;
}
cmDeleteRecord:{
  if message('Удалить строку из спецификации алгоритма?',YesNo)=cmYes
    delete current GP_KPI_Alg_Spec;
}
end;//TableEvent table GP_KPI_Alg_Spec;

//======================================
HandleEvent
cmInit:{
  SetTitle(GetTitleInterface);
  //===========================
  RoleGroupName:='Мотивация персонала';

  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
  if (UserAccessService=NullRef) {
    abort;
    exit;
  }
  ReadParam;
  if ((Mode and cgiPickMult)=cgiPickMult) {
    if (hMarker=0) {
      message('Не задан маркер для множественного выбора.',error);
      abort;
      exit;
    }
    pMarker.ImportFrom(hMarker);
    if (not UserAccessService.IsAdmin)
      SetHelpAndStatusContext(brKPI_Alg, -1, sci1EscIns, hcKeepCurrent);
    else
      SetHelpAndStatusContext(brKPI_Alg, -1, sci14EscIns, hcKeepCurrent);
  } else {
    PutCommand(cmValue1);
    if ((Mode and cgiPick)=cgiPick)
     if (not UserAccessService.IsAdmin)
       SetHelpAndStatusContext(brKPI_Alg, -1, sci1Esc, hcKeepCurrent);
     else
       SetHelpAndStatusContext(brKPI_Alg, -1, sci14Esc, hcKeepCurrent);
  }
  if cKPI_Alg=0 cKPI_Alg:=cKPI_Alg_LAST;
  if (cKPI_Alg<>0)
    if (getfirst GP_KPI_Alg where((cKPI_Alg==GP_KPI_Alg.NRec))=tsok) {};

  if ((Mode and cgiMultiEdit)=cgiMultiEdit)
    PutCommand(cmEdit);
}
cmValue1:{
  pMarker.Disable:=true;
}
cmDone: SaveParam;
cmDefault:{
  if ((Mode and cgiPick)=cgiPick) {
    if ((Mode and cgiPickMult)=cgiPickMult) {
      if (pMarker.Count=0)
        pMarker.Mark;

      pMarker.ExportTo(hMarker);
    }

    cKPI_Alg:=GP_KPI_Alg.NRec;
    CloseInterface(cmDefault);
  }
  else
    PutCommand(cmEdit);
}
cmEdit:{
  RunWindow(WinEdit);

  if ((Mode and cgiMultiEdit)=cgiMultiEdit)
    CloseInterface(cmDefault);
}
cmPrintDoc:
{ RunFReportByGroup(dtsKPI_ALG,'ALG'+LPadCh(string(wType_ALg),'0',3));

}
end;
end.

GP_KPI_AlgPickAndEdit_MENU menu
{
  - 'Выбрать алгоритм расчета премии', cmPick,
    'Выбрать алгоритм расчета премии', hcKlAlg, 'F3', kbF3, sci1Esc;
  - 'Выбрать алгоритм расчета зарплаты', cmBuhCalculator,
    'Выбрать алгоритм расчета зарплаты', hcKlAlg, 'Shift+F3', kbShiftF3, sci1Esc;
  ----------;
  - 'Проверить корректность формулы', cmAttrib,
    'Проверить корректность формулы', hcNoContext, 'Ctrl+Enter', kbCtrlEnter, sci1Esc;
  ----------;
//  - 'Печать пользовательских алгоритмов', cmPrint,
//    'Печать пользовательских алгоритмов', hcPrintKatalog, 'Ctrl+P', kbCtrlP, scenterAn;
}
