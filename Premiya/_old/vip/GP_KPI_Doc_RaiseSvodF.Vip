/*************************************************************************************************\
* Наименование: Свод по Ведомостям премирования                                                            *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#794          |26/02/18|Кириллов Э.П.            |НПО Энергомаш                    *
\*************************************************************************************************/
/*
Построение группировки на VB
Фро - интерактивные отчеты
GalRepTblFld_MainTable_TreeLevel = =Отчет_1!$C$14:$C$385
Здесь
  Sub LoadReport()
    Call GroupArea("MainTable_TreeLevel", False)
   End Sub
'-------------------------------------------------------------------------------
' сгруппировать данные на основе специального поля TreeLevel - уровень группировки
' в текущей строке
' AreaName - область со значениями этого поля.
' группироваться будут все СТРОКИ этой области
'-------------------------------------------------------------------------------
Sub GroupArea(AreaName As String, ToFooter As Boolean)
  Dim Levels As Variant
  Dim c As Variant
  Dim RangeName As String
  ' максимальное кол-во группировок в Excel - 8
  Levels = Array(0, 0, 0, 0, 0, 0, 0, 0, 0)
  For Each c In Range(AreaName).Cells
    If Not IsEmpty(c.Value) And (c.Value > 0) And (c.Value <= 8) Then
      If Levels(c.Value) = 0 Then  ' нашли начало группировки
        Levels(c.Value) = c.Row
      Else                           ' нашли конец группировки
        If ToFooter Then
          RangeName = "C" & Levels(c.Value) & ":C" & c.Row - 1   ' группируем к футеру группы
        Else
          RangeName = "C" & Levels(c.Value) + 1 & ":C" & c.Row   ' группируем к заголовку группы
        End If
        Range(RangeName).Rows.Group
        Levels(c.Value) = 0
      End If
    End If
  Next
End Sub


*/

#include aTuneIer.vih    // Функции для работы с UserDeskRep
#include GetKau.vih      // Обьектный интерфес выбора КАУ
#include CatFunc.Vih

//-------------------------
#include GP_Log.vih
//-------------------------
#include GP_GetPodalN.Vih
#include GP_KPI_Doc_RaiseSvod.Vih
#include GP_KPI_RaiseEdit.Vih
#include GP_PodrFilterDef.Vih
#doc
Свод по Ведомостям премирования
#end

//-------------------------------------
Interface GP_KPI_Doc_RaiseSvodF 'Свод по ведомостям премирования', EscClose, Cyan;
//-------------------------------------
#include ShowKau.Vpp
//-------------------------------------
Function SborData(_tp_sbor:word=0):boolean;forward;
//-------------------------------------

//----------------------------------------------
//===============================
//==== Для выбора работников на DSLQ
table struct tmp_rep_k_r_sv
(  Fio        :string
  ,PA         :word
  ,Nrec       :comp
  ,GRNrec     :comp
  ,cPersons   :comp
  ,cDoc       :comp
  ,cKatPodr   :comp
  ,Podr_Kod   :string[40]
  ,Podr_Name  :string[200]
  ,cKatPodr_V :comp
  ,Podr_Kod_V :string[40]
  ,Podr_Name_V:string[200]
  ,Podr_Kod_C :string[40]
  ,StrTabn    :string[40]
  ,Kateg      :word
  ,Post       :string
  ,cPost      :comp
  ,MesN       :word
  ,YearN      :word
  //-------------
  ,pr         :word
  ,LevCode    :string[100]
  ,LevName    :string
  ,LevKod     :string
  ,LevTitle   :string
  ,cRec       :comp
  //-------------
  ,Itogo      :double
  ,dmd        :Array [1..100] of double
  ,dms        :Array [1..100] of string[100]
)
with index
( tmp_rep_k_r_sv01 = cRec+PR+Fio
 ,tmp_rep_k_r_sv02 = Nrec(AutoInc, Unique)
 ,tmp_rep_k_r_sv03 = PR+FIO+cRec+GRNrec
 ,tmp_rep_k_r_sv04 = PR+FIO
);
//-------------------------------------
// карта полей
Table Struct tmp_Fields
( cGP_KPI_Raise :comp
 ,RazDEL_Name    :string[100]
 ,Name          :string[100]
 ,NPP     :word "Номер поля"
 ,Npp_It  :word "Номер поля в итогах"
 ,RazDEL  :word "Раздел"
 ,NPP_S   :word "Номер поля в отчете в подразделе"
 ,NPP_R   :word "Итоговый Номер поля в отчете"
 ,wTypeFld:word "Тип"
 ,Len     :word "Длина поля"
 ,Razr    :word "Дроб.часть"
 ,Itog    :word "Нужно считать итоги"
 ,Agregate:word "Агрегат"
 ,cGp_TypeDocs :comp "Тип документа"
 ,KodGr   :word
)
with index
( tmp_Fields01 = cGp_TypeDocs + NPP_IT //если уже есть, то номер поля должен совпасть.
 ,tmp_Fields02 = RazDEL+NPP_S
);
//-------------------------
table struct tmp_kpi_raise
( nrec :comp
 ,name :string
)
with index
( tmp_kpi_raise01 = nrec

);
//-------------------------------------
// шапка полей

Table Struct tmp_shap
( RazDEL_Name   :string[100]
 ,Name          :string[100]
 ,RazDEL  :word "Раздел"
 ,NPP_S   :word "Номер поля в отчете в подразделе"
 ,NPP_R   :word "Итоговый Номер поля в отчете"
 ,wTypeFld:word "Тип"
 ,Len     :word "Длина поля"
 ,Razr    :word "Дроб.часть"
 ,Itog    :word "Нужно считать итоги"
 ,Agregate:word "Агрегат"
 ,KodGr   :word
)
with index
( tmp_shap01 = RazDEL+NPP_S
 ,tmp_shap02 = NPP_R
 ,tmp_shap03 = RazDEL+Name
);
!-------------------------------------------------------------------------------
//====================
#include GetKau.Var      // Переменная типа "Интерфеса выбора КАУ"

var

 iCatFunc  : CatalogsFunctions;
 piTuneIer : iTuneIer; //objTuneIer;
 oGP_Log :GP_Log;
 pGP_PodrFilterDef:GP_PodrFilterDef;
var
 IndexNo        :Longint;
 NameGroup      :String;
 KodGroup       :String;
 nppTmp         :Word;
 kodTmp         :Word;
 wSort          :word;
 fCurrMainFormat:longint;//основной формат
 kol_fld        :word; //кол-во выводимых полей
 isPodrShare    :boolean; //включено разграничение прав
 sUserName      :string;// текущий пользователь
 wPa            :word;//номер отчета
#include Excel_Var.Vpp
//------------------
  NPOEM_OWN_Raise_Protect:word;//тип разграничения прав
//------- фильтры
  Marker_Count :longint;
  KauMarkerName:string;
  Marker_Tmp :longint;
  wFilter    :longint;

//----------------------------------------------
Create View
var
  pUserDeskRep:comp;
  pPersons    :comp;
  pNode       :comp;
  wc_Nrec     :comp;

as select tmp_rep_k_r_sv.*,tmp_kpi_raise.*
from
   GP_KPI_Raise
  ,GP_KPI_Fields(GP_KPI_Fields02)
  ,tmp_Fields
  ,tmp_shap
  ,UserDeskRep
  //==============Вывод
  ,tmp_rep_k_r_sv    (tmp_rep_k_r_sv01)
  ,tmp_rep_k_r_sv tmp_rep_k_r_sv_Sub
  ,tmp_rep_k_r_sv tmp_rep_k_r_sv_fnd
  // фильтры
  , tmp_kpi_raise
  , KatPodr KatPodr_Flt
where  ((
//------------  поля
    0                             == GP_KPI_Fields.wType
and GP_KPI_Raise.Nrec             == GP_KPI_Fields.cDoc

//--------------- для визуализации
and pNode == tmp_rep_k_r_sv.cRec
and tmp_rep_k_r_sv.Nrec == tmp_rep_k_r_sv_Sub.cRec
//--------   Настройки отчета
//and cgGP_Report_20001 == UserDeskRep.NRep
//and sUserName         == UserDeskRep.OwnName
and pUserDeskRep == UserDeskRep.Nrec
//-----------------
and UserDeskRep.ResComp[1]  == AllMemo.Nrec
//-----------------

//----------------------------
and wc_Nrec == KatPodr_Flt.Nrec
))
;
//----------------------------
create view lPMarker
var pUserDeskRep :comp;
as select PickRep.cUserDeskRep
From PickRep
where ((
  pUserDeskRep  == PickRep.cUserDeskRep
))
;

//--------------------------------
Create  view vZar_User
var
   pPodr:comp;
as select Zar_User.Nrec
From
   Zar_User
  ,GP_USERRIGHTS
  ,USERRIGHTS
  ,KatLink
where
((   sUserName  == Zar_User.OwnName
and  sUserName  == GP_USERRIGHTS.OWNNAME
//and  pPodr    == GP_USERRIGHTS.crecds
and  0          == GP_USERRIGHTS.wType
and  sUserName  == USERRIGHTS.OWNNAME
//and  pPodr    == GP_USERRIGHTS.crecds
//and  0          == USERRIGHTS.wType
//--------------------------
and  sUserName == katlink.OWNNAME
and  coGrPodr  == katlink.CODETABLE
and  0         == katlink.code

));

Parameters pUserDeskRep,wPA;

//--------------------------------
#include GP_KPI_Doc_RaiseSvod.Vpp
//--------------------------------

#include Excel_Fun.Vpp
#include SQl_Func.Vpp

//-----------------------------------------------------
// Для поиска вышестоящего подразделения
//-----------------------------------------------------
Function GetKatPodrUp(_PKatPodr:comp):comp; cacheable;
{ Result:=_PKatPodr;
  if Result=0 then exit;
  set wc_nrec:=_PKatPodr;
  if getfirst KatPodr_Flt<>tsok exit;
  if pos('-',KatPodr_flt.kod)>0
  { Result:=GetKatPodrUp(KatPodr_flt.cPodr);
  }
} //Function GetKatPodrUp(_PKatPodr:comp):comp

//------------------------------------------------------------------------------
// приходиться писать свою, иначе все с фильтром по зверю
//------------------------------------------------------------------------------
procedure  MyPickRep2Marker(_MarkerName: string; _nFilter: word;ww_One:comp=0;_pMarker:TPtr=0);
Var ww_Marker : TPtr;
{  ww_Marker:=_pMarker;
   if _pMarker=0
   { ww_Marker := InitMarker(_MarkerName, 8, 100, 10);
   }
   ClearMarker(ww_Marker);
   lPMarker.pUserDeskRep:=UserDeskRep.Nrec;
   lPMarker._Loop PickRep Where (( pUserDeskRep == PickRep.cUserDeskRep
                    and   _nFilter         == PickRep.wList
                       ))
   { InsertMarker(ww_Marker, lPMarker.PickRep.cRec )
   }
   if GetMarkerCount(ww_Marker)=0
   { if ww_One>0
       InsertMarker(ww_Marker, ww_One )
   }
   if _pMarker=0
     DoneMarker(ww_Marker,_MarkerName)
} //procedure  MyPickRep2Marker(_MarkerName: string; _nFilter: word;ww_One:comp=0);

//-------------------------------
Function ChkPickFilter(_pUserDeskRep:comp; _nFilter:word; _val:comp) :boolean;
{ Result:=true;
  if UserDeskRep.RESLNGINT[_nFilter]=0
  {
    exit;
  }
  Result:=false;
  lPMarker.pUserDeskRep:=_pUserDeskRep;
  lPMarker._Loop PickRep
   Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   _nFilter      == PickRep.wList
     and   _Val          == PickRep.cREc
   ))
   { Result:=true;
     exit;
   }
} //Function ChkPickFilter(_pUserDeskRep:comp; _nFilter:word; _val:comp) :boolean;


//------------------------------------------------------------------------------
// приходиться писать свою, иначе все с фильтром по зверю
//------------------------------------------------------------------------------
procedure MyDelPickRep(_nFilter: word);
{ lPMarker.pUserDeskRep:=UserDeskRep.Nrec;
  lPMarker.delete PickRep
   Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   _nFilter         == PickRep.wList
   )) ;
  set UserDeskRep.RESLNGINT[_nFilter]:=0;
  set UserDeskRep.RESComp  [_nFilter]:=0;
} //procedure MyDelPickRep(_nFilter: word);



// -----------------------------------------------------------------------------
// маркер с множ.выбором - в таблицу PickRep с кодом nReport
Function MyMarker2PickRep(_MarkerName: string; _nFilter: word;_pMarker:TPtr=0) : boolean;
var
  tmpWord: TNumPick;
  tmpComp: comp;
  ii : longint;
  ww_Marker : TPtr;

{
  MyMarker2PickRep := True;
  // использует тек. UserDeskRep.nRec
  // очистим PickRep
  MyDelPickRep(_nFilter);
  // скопируем
  //Marker2PickRep(_MarkerName, _nFilter, tmpComp, tmpWord);
  ww_Marker:=_pMarker;
  if _pMarker=0
  { ww_Marker := InitMarker(_MarkerName, 8, 100, 10);
  }
  tmpWord:=GetMarkerCount(ww_Marker);
  tmpComp:=0;
  For(ii:=0;ii<tmpWord;ii++)
  { if GetMarker(ww_Marker, ii, tmpComp)
    { lPMarker.ClearBuffer(lPMarker.tnPickRep);
      lPMarker.PickRep.cUser        := UserID();
      //lPMarker.PickRep.OwnName      := sUserName;
      lPMarker.PickRep.wList        := _nFilter;
      lPMarker.PickRep.cRec         := tmpComp;
      lPMarker.PickRep.PickNum      := ii;
      lPMarker.PickRep.cUserDeskRep := UserDeskRep.nRec;
      if ( lPMarker.insert current PickRep = tsOk ) {}
    } //if GetMarker(ww_Marker, ii, tmpComp)
  } //For(ii:=0;ii<tmpWord;ii++)
  if _pMarker=0
    DoneMarker(ww_Marker,_MarkerName);
  // просто чтобы обновилось поле
  set UserDeskRep.ResComp[_nFilter]   := tmpComp;
  set UserDeskRep.RESLNGINT[_nFilter] := tmpWord;
}


//====================================
Procedure Fill_Group_Array;
var ii:word;
{
  For(ii:=1;ii<=cg_s_Len_a_gr;ii++)
  { if CheckGroupMas(ii)=0 then continue;
    sReportGRName[ii]:='';
    sReportGRCode[ii]:='';
    sReportGRNrec[ii]:=-999;
    sReportGRTbl [ii]:=ii;
    case ii of  //здесь нужно вычислить
    cg_s_code_Department:// 1 'Подразделение';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.Podr_Name;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.Podr_Kod;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.cKatPodr;
    }
    cg_s_code_Depart_V: //02; //'Подразделение ведомости';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.Podr_Name_V;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.Podr_Kod_V;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.cKatPodr_V;
    }
    cg_s_code_Kateg    :// 03 'Категория сотрудников';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.Kateg;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.Kateg;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.Kateg;
    }
    cg_s_code_Post     ://04;  'Должность';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.Post;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.Post;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.cPost;
    }
    cg_s_code_Year     :// 05; 'Год';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.YearN;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.YearN;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.YearN;
    }
    cg_s_code_quarter   :// 06;'квартал';
    { sReportGRName[ii]:=string((tmp_rep_k_r_sv.MesN+2) div 3)+' кв';
      sReportGRCode[ii]:=sReportGRName[ii];
      sReportGRNrec[ii]:=sReportGRName[ii];
    }
    cg_s_code_month     :// 07;'Месяц';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.MesN;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.MesN;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.MesN;
    }
    cg_s_code_Pers   :// 08 'Сотрудник';
    { sReportGRName[ii]:=tmp_rep_k_r_sv.Fio;
      sReportGRCode[ii]:=tmp_rep_k_r_sv.StrTabn;
      sReportGRNrec[ii]:=tmp_rep_k_r_sv.cPersons;
    }
    cg_s_code_cex    :// 09;  'цех';
    { if tmp_rep_k_r_sv.cKatpodr<>0
      { GetKatPodrUp(tmp_rep_k_r_sv.cKatpodr);
        sReportGRName[ii]:=KatPodr_Flt.Name;
        sReportGRCode[ii]:=KatPodr_Flt.Kod;
        sReportGRNrec[ii]:=KatPodr_Flt.Nrec;
      }
    }
    end;
  }//For(ii:=1;ii<=cg_s_Len_a_gr;ii++)
} //Procedure Fill_Group_Array;

//-------------------------------
// Для сканирования уровней
//-------------------------------
  var iiiGR     : Integer;
  var cRec_tbl  : Comp;
  var sSort_tbl : String;
  var ii_sum    : longint;
  var pGRNrec   : comp;
//----------------------------------
// вставка уровня
//----------------------------------
Procedure InsLevel;
{
    if GetFirst fastfirstrow tmp_rep_k_r_sv_fnd where (( iiiGR       == tmp_rep_k_r_sv_fnd.pr  and
                                                   sSort_tbl == tmp_rep_k_r_sv_fnd.Fio     and
                                                   cRec_tbl  == tmp_rep_k_r_sv_fnd.cRec   and
                                                   pGrNrec   == tmp_rep_k_r_sv_fnd.GRNREC
                                                 )) <> tsOk
    { ClearBuffer(#tmp_rep_k_r_sv_fnd);
      tmp_rep_k_r_sv_fnd.pr  :=iiiGR;
      tmp_rep_k_r_sv_fnd.fio :=sSort_tbl;
      tmp_rep_k_r_sv_fnd.cRec:=cRec_tbl;
      if (iiiGR=0)
      {
         tmp_rep_k_r_sv_fnd.LevCode := iiiGR;
         tmp_rep_k_r_sv_fnd.LevName := sSort_tbl;
      }
      else
      { if a_GroupRep[iiiGR]>0 and a_GroupRep[iiiGR]<=cg_s_Len_a_gr
        { tmp_rep_k_r_sv_fnd.LevCode := a_GroupRep[iiiGR];
          tmp_rep_k_r_sv_fnd.LevName := sReportGRName[a_GroupRep[iiiGR]];
          tmp_rep_k_r_sv_fnd.LevKod  := sReportGRCode[a_GroupRep[iiiGR]];
          tmp_rep_k_r_sv_fnd.LevTitle:= GetLevelName(a_GroupRep[iiiGR]);
          tmp_rep_k_r_sv_fnd.GRNREC  := pGrNrec;
          case a_GroupRep[iiiGR] of
          cg_s_code_Department
          ,cg_s_code_Cex:
          { tmp_rep_k_r_sv_fnd.Podr_kod :=sReportGRCode[a_GroupRep[iiiGR]];
            tmp_rep_k_r_sv_fnd.Podr_name:=sReportGRName[a_GroupRep[iiiGR]];
          }
          cg_s_code_Depart_V:
          { tmp_rep_k_r_sv_fnd.Podr_kod_V :=sReportGRCode[a_GroupRep[iiiGR]];
            tmp_rep_k_r_sv_fnd.Podr_name_V:=sReportGRName[a_GroupRep[iiiGR]];
          }
          cg_s_code_Pers:
          { tmp_rep_k_r_sv_fnd.StrTabn :=sReportGRCode[a_GroupRep[iiiGR]];
          }
          end;
        }
      } //if
      for(ii_sum:=1;ii_sum<=kol_fld;ii_sum++)
       if sReportAgr[ii_sum]>0
        tmp_rep_k_r_sv_fnd.dmd[ii_sum]:=tmp_rep_k_r_sv.dmd[ii_sum];
      tmp_rep_k_r_sv_fnd.Itogo:=tmp_rep_k_r_sv.Itogo;
      Insert current tmp_rep_k_r_sv_fnd;
      if logfilekl MyLogWrite(false,'>I_shap>'+String(iiiGR)+'|'+tmp_rep_k_r_sv_fnd.fio);

    } //if
    else
    { for(ii_sum:=1;ii_sum<=kol_fld;ii_sum++)
       if sReportAgr[ii_sum]>0
         tmp_rep_k_r_sv_fnd.dmd[ii_sum]+=tmp_rep_k_r_sv.dmd[ii_sum];
      tmp_rep_k_r_sv_fnd.Itogo+=tmp_rep_k_r_sv.Itogo;
      update current tmp_rep_k_r_sv_fnd;
    }
    set cRec_tbl  :=tmp_rep_k_r_sv_fnd.Nrec; //!!!
} //Procedure InsLevel;

// формирование дерева
Function MakeIER:boolean;
{ Fill_Group_Array;
  set sSort_tbl:='';
  set cRec_tbl :=0;
  //Заполняем шапку tmp_rep_k_r_sv
  for(iiiGR:=0; iiiGR<=word(cg_s_Len_a_gr); iiiGR++)
  {

    if (iiiGR=0)
    {  pGrNrec:=0;
       sSort_tbl :='Всего';
    }
    else
    {  if a_GroupRep[iiiGR]>0 and a_GroupRep[iiiGR]<=cg_s_Len_a_gr
       {  sSort_tbl:=if(wSort=0
               ,sReportGRName[a_GroupRep[iiiGR]]
               ,sReportGRCode[a_GroupRep[iiiGR]]
             );
          set pGrNrec:=sReportGRNrec[a_GroupRep[iiiGR]];
       } else continue;
       // построим дерево
       if a_GroupIE[iiiGR]>0
       { if a_GroupIE[iiiGR]>10 a_GroupIE[iiiGR]:=10;
         var _wLev:word=0;
         //сначала вверх, потом вниз
         // получить значение на уровне
         case a_GroupRep[iiiGR] of
         cg_s_code_Department:
         {  sReportGRName[a_GroupRep[iiiGR]]:=
               pGP_PodrFilterDef.katpodrGetLevel(
                    '' //sReportGRName[a_GroupRep[iiiGR]]//  wwpodr:string
                   ,sReportGRNrec[a_GroupRep[iiiGR]]//;wcnrec : comp;
                   ,a_GroupIE[iiiGR]//wlev :word
              ) //:string ;
         }
         end;
         for (_wLev:=1;_wLev<=a_GroupIE[iiiGR];_wLev++)
         { case a_GroupRep[iiiGR] of
           cg_s_code_Department:
           { // получить значение на уровне
             sReportGRName[a_GroupRep[iiiGR]]:= pGP_PodrFilterDef.katpodrGetLevelName(_wlev);
             sReportGRCode[a_GroupRep[iiiGR]]:= trim(SubStr(sReportGRName[a_GroupRep[iiiGR]],1,20));
             sReportGRName[a_GroupRep[iiiGR]]:= trim(SubStr(sReportGRName[a_GroupRep[iiiGR]],21,250));
             // получить значение на уровне nrec
             set pGrNrec:= pGP_PodrFilterDef.katpodrGetLevelNrec(_wlev);
             if pGrNrec=0 then break;
           }
           else continue;
           end;
           sSort_tbl:=if(wSort=0
               ,sReportGRName[a_GroupRep[iiiGR]]
               ,sReportGRCode[a_GroupRep[iiiGR]]
             );
           if pGrNrec=sReportGRNrec[a_GroupRep[iiiGR]] break;
           InsLevel;
         } //for

       } //if a_GroupIE[iiiGR]>0
    } //if (iiiGR=0)

    InsLevel;
    //-------------------------------

  } //for
  Update current tmp_rep_k_r_sv
    set tmp_rep_k_r_sv.cRec:=cRec_tbl;

  Result:=true;
} //Function MakeIER:boolean;



//----------------------------------
//1754
Function GetPodrShare :boolean;
{ Result:=false;
  case NPOEM_OWN_Raise_Protect of
  0,2:  Result:= vZar_User.ZAR_USER.PODRSHARE = '+';
  end;
}//Function PodrShare :boolean;


//-----------------------------
// Сформируем карту полей
//-----------------------------
Function MakeFieldMap :boolean;
var _NPP_S:word;
    _Razdel:word;
    _Razdel_Name:string;
    _wVo   :word;
{ delete all tmp_Fields;
  delete all tmp_shap;
  //---------------
  for(kol_fld:=1;kol_fld<=100;kol_fld++)
    sReportAgr[kol_fld]:=0;
  //---------------------------
  delete all tmp_kpi_raise;
  if UserDeskRep.RESLNGINT[cgFilter_Raise]=0
  { SborData(1);

  }
  //---------------
  kol_fld:=0;
  _Loop fullcache GP_KPI_Raise
  {
    if not Nextvisual then exit;
    if UserDeskRep.RESLNGINT[cgFilter_Raise]=0
    { if getfirst tmp_kpi_raise where (( GP_KPI_Raise.Nrec == tmp_kpi_raise.nrec ))<>tsok then continue;

    }
    if not ChkPickFilter(UserDeskRep.Nrec,cgFilter_Raise,GP_KPI_Raise.Nrec) then continue;
    timelog('GP_KPI_DOC_RaiseSvod->MakeFieldMap '+string(GP_KPI_Raise.Nrec)+','+GP_KPI_Raise.Name);
    _NPP_S:=0;
    _Loop GP_KPI_Fields
    { if /*[Visib]*/    ((GP_KPI_Fields.Option and  4)>0) then continue;
      if GP_KPI_Fields.Razdel=3 then continue;  // не выводить
      _wVo:=0;
      _wVo:=word(double(trim(GP_KPI_Raise.Code)));
      if _wVo=0 then
      { oGP_Log.Write('Не удалось выделить целую часть из "'
         +GP_KPI_Raise.Code+'", '+GP_KPI_Raise.Name);

        continue;
      }
      _Razdel:=if(GP_KPI_Fields.Razdel=0,_wVo*10,GP_KPI_Fields.Razdel);
      _Razdel_Name:=trim(GP_KPI_Raise.Name);

      var _sField:string=GP_KPI_Fields.Name;
      case _Razdel of
      1:
      { _Razdel_Name:='Отработанное время';
        _sField:=Replace(_sField,'Отр.время, ','');
      }
      2:
      { _Razdel_Name:='Начисления';
        _sField:=Replace(_sField,'Начислено,ОЗ','Начислено, всего');
        _sField:=Replace(_sField,'Начислено, ','');
      }
      else
      { if pos('(',_Razdel_Name)>0
        { _Razdel_Name:=trim(Substr(_Razdel_Name,1,pos('(',_Razdel_Name)-1));
        }
      }
      end;
      _NPP_S:=0;
      if GP_KPI_Fields.Npp_It>0
      { if getfirst tmp_fields where
        ((   GP_KPI_Raise.cGp_TypeDocs == tmp_Fields.cGp_TypeDocs
         and GP_KPI_Fields.Npp_It == tmp_fields.Npp_It
        )) =tsok
         _NPP_S:=tmp_fields.Npp_S;
      }
      if _NPP_S=0
      { if getlast tmp_shap where (( _Razdel== tmp_shap.Razdel
         and _sField == tmp_shap.Name
        ))  =tsok
        {  _NPP_S:=tmp_shap.NPP_S;
        }
      }
      if _NPP_S=0
      { if getlast tmp_shap where (( _Razdel== tmp_Shap.Razdel ))
          ordered by index tmp_shap01 =tsok
        {  _NPP_S:=tmp_shap.NPP_S+1;
        }
        else
        { _NPP_S:=1;
        }
        //--- ну и здесь нужно вставить
        tmp_shap.RazDEL_Name   :=_Razdel_Name;
        tmp_shap.Name         :=_sField;
        tmp_shap.RazDEL       :=_Razdel;// "Раздел"
        tmp_shap.NPP_S        :=_NPP_S;// "Номер поля в отчете в подразделе"
        tmp_shap.NPP_R        :=0;// "Итоговый Номер поля в отчете"
        tmp_shap.wTypeFld     :=GP_KPI_Fields.wTypeFld;// "Тип"
        tmp_shap.Len          :=GP_KPI_Fields.Len;// "Длина поля"
        tmp_shap.Razr         :=GP_KPI_Fields.Razr;// "Дроб.часть"
        tmp_shap.Itog         :=((GP_KPI_Fields.Option and  2) shr 1);// "Нужно считать итоги"
        tmp_shap.Agregate     :=((GP_KPI_Fields.Option and  8) shr 3);
        tmp_shap.KodGr        :=GP_KPI_Fields.KodGroup;

        if insert current tmp_shap=tsok {};
      } //if _NPP_S=0
      tmp_Fields.cGP_KPI_Raise:=GP_KPI_Raise.Nrec;
      tmp_Fields.RazDEL_Name  :=_Razdel_Name;
      tmp_Fields.Name         :=_sField;
      tmp_Fields.NPP          :=GP_KPI_Fields.Npp;//  "Номер поля"
      tmp_Fields.Npp_It       :=GP_KPI_Fields.Npp_It;// "Номер поля в итогах"
      tmp_Fields.RazDEL       :=_Razdel;// "Раздел"
      tmp_Fields.NPP_S        :=_NPP_S;// "Номер поля в отчете в подразделе"
      tmp_Fields.NPP_R        :=0;// "Итоговый Номер поля в отчете"
      tmp_Fields.wTypeFld     :=GP_KPI_Fields.wTypeFld;// "Тип"
      tmp_Fields.Len          :=GP_KPI_Fields.Len;// "Длина поля"
      tmp_Fields.Razr         :=GP_KPI_Fields.Razr;// "Дроб.часть"
      tmp_Fields.Itog         :=((GP_KPI_Fields.Option and  2) shr 1);// "Нужно считать итоги"
      tmp_Fields.Agregate     :=((GP_KPI_Fields.Option and  8) shr 3);
      tmp_Fields.cGp_TypeDocs :=GP_KPI_Raise.cGp_TypeDocs;// "Тип документа"
      if insert current tmp_Fields=tsok {};
      timelog('GP_KPI_DOC_RaiseSvod->MakeFieldMap FLD tmp_Fields.Name '
        +string(tmp_Fields.NPP)+','+string(tmp_Fields.NPP_S)+','+string(GP_KPI_Fields.Option));

    } //_Loop GP_KPI_Fields
  } //_Loop fullcache GP_KPI_Raise
  _NPP_S:=0;
  _Loop fullcache tmp_shap ordered by index tmp_shap01
  { _NPP_S++;
    if _NPP_S>100
    { oGP_Log.Write('Кол-во полей превысило 100, поставьте фильтр по видам премий или перенастройте поле "Razdel" ');
      break
    }
    sReportAgr[_NPP_S]:=tmp_shap.Agregate;

    update current tmp_shap set NPP_R:=_NPP_S;
  }
  kol_fld:=_NPP_S;
  Result:=true;
} //Function MakeFieldMap :boolean;

//------------------
//Добавление полей в запрос
//_wtp -
// 0 - select
// 1 - group by
Procedure Add_Fields_Sql(_wtp:word);
var ii:word;
    ww_str:string;
{
  PrepareSQLQuery(' Persons.Fio'+if(_wtp=0,' as Fio','')); //       :string
  if _wtp=0
  { PrepareSQLQuery(', '+string(wPA)+if(_wtp=0,' as PA  ','')); //comp
    PrepareSQLQuery(',#comp(0)   '+if(_wtp=0,' as Nrec  ','')); //comp
    PrepareSQLQuery(',#comp(0)   '+if(_wtp=0,' as GRNrec',''));//:comp
  }
  PrepareSQLQuery(',GP_KPI_DOC_SP.cPersons'+if(_wtp=0,' as cPersons ',''));//  :comp
  PrepareSQLQuery(',GP_KPI_DOC.Nrec       '+if(_wtp=0,' as cDoc     ',''));//:comp
  PrepareSQLQuery(',GP_KPI_DOC_SP.cKatPodr'+if(_wtp=0,' as cKatPodr ',''));//:comp
  PrepareSQLQuery(',COALESCE(Katpodr_Sp.Kod ,'''')'+if(_wtp=0,' as Podr_Kod ',''));//:string[40]
  PrepareSQLQuery(',COALESCE(Katpodr_Sp.Name,'''')'+if(_wtp=0,' as Podr_Name',''));//  :string[200]
  PrepareSQLQuery(',GP_KPI_DOC.cKatPodr '+if(_wtp=0,' as cKatPodr_V ',''));//:comp
  PrepareSQLQuery(',COALESCE(Katpodr.Kod ,'''')'+if(_wtp=0,' as Podr_Kod_V ',''));//:string[40]
  PrepareSQLQuery(',COALESCE(Katpodr.Name,'''')'+if(_wtp=0,' as Podr_Name_V',''));//:string[200]
  PrepareSQLQuery(',COALESCE(SubString(Katpodr.Kod,1,3),'''')'+if(_wtp=0,' as Podr_Kod_C' ,''));//:string[40]
  PrepareSQLQuery(',GP_KPI_DOC_SP.StrTabn'+if(_wtp=0,' as StrTabn'    ,''));//:string[40]
  PrepareSQLQuery(',COALESCE(KlKatego.Kod ,0   )'+if(_wtp=0,' as Kateg'  ,''));//:word
  PrepareSQLQuery(',COALESCE(Catalogs.Name,'''')'+if(_wtp=0,' as Post '  ,''));//:string
  PrepareSQLQuery(',GP_KPI_DOC_SP.cPost'+if(_wtp=0,' as cPost' ,''));//:comp
  PrepareSQLQuery(',GP_KPI_DOC.WMONTH  '+if(_wtp=0,' as MesN ' ,''));//:word
  PrepareSQLQuery(',GP_KPI_DOC.WYear   '+if(_wtp=0,' as YearN' ,''));//:word

  //-------------
  if _wtp=0
  { PrepareSQLQuery(',1000 as pr      ');// :word
    PrepareSQLQuery(','''' as LevCode ');// :string[100]
    PrepareSQLQuery(','''' as LevName ');// :string
    PrepareSQLQuery(','''' as LevKod  ');// :string
    PrepareSQLQuery(','''' as LevTitle');// :string
    PrepareSQLQuery(',#comp(0) as cRec');// :string
  }
  //-------------
  if _wtp=0
  { PrepareSQLQuery(',Sum(CAST(CASE GP_KPI_DOC_SP.CGP_KPI_RAISE ');

    for(ii:=1;ii<=Kol_Fld;ii++)
    { If GetFirst tmp_Shap where (( ii == tmp_Shap.NPP_R ))<>tsok then continue;
      if tmp_shap.Itog=0 then continue;
      _Loop tmp_fields where (( tmp_Shap.Razdel == tmp_fields.Razdel
               and tmp_Shap.Npp_S == tmp_fields.Npp_S ))
      { PrepareSQLQuery('When #Comp('+string(tmp_fields.cGP_KPI_RAISE)
              +') THEN GP_KPI_DOC_SP.FARRVALUE['+string(tmp_fields.NPP)+']');
      }
    }//for(ii:=1;ii<=Kol_Fld;ii++)
    PrepareSQLQuery('when #comp(0) THEN ''0.00'' ');
    PrepareSQLQuery('ELSE ''0.00'' END +''0'' as Double)) as Itogo  ');//    :double
    for(ii:=1;ii<=100;ii++)
    { if ii<=Kol_Fld
      { If GetFirst tmp_Shap where (( ii == tmp_Shap.NPP_R ))=tsok
        { if tmp_shap.wTypeFld=1
          { ww_str:=','+if(tmp_shap.Razdel<3,'Max(','Sum(')+'CAST(CASE GP_KPI_DOC_SP.CGP_KPI_RAISE';
            PrepareSQLQuery(ww_str);
            _Loop tmp_fields where (( tmp_Shap.Razdel == tmp_fields.Razdel
               and tmp_Shap.Npp_S == tmp_fields.Npp_S ))
            { PrepareSQLQuery('When #Comp('+string(tmp_fields.cGP_KPI_RAISE)
              +') THEN GP_KPI_DOC_SP.FARRVALUE['+string(tmp_fields.NPP)+']');
            }
            PrepareSQLQuery(' ELSE ''0.00'' END + ''0'' as Double )  ) as dmd'+string(ii)  );
            continue;
          }
        }
      } //if ii<=Kol_Fld
      PrepareSQLQuery(' , 0.00 as dmd'+string(ii));// of double
    } //for(ii:=1;ii<=100;ii++)
    for(ii:=1;ii<=100;ii++)
    { if ii<=Kol_Fld
      { If GetFirst tmp_Shap where (( ii == tmp_Shap.NPP_R ))=tsok
        { if tmp_shap.wTypeFld<>1
          { ww_str:=',Max(CASE GP_KPI_DOC_SP.CGP_KPI_RAISE';
            PrepareSQLQuery(ww_str);
            _Loop tmp_fields where (( tmp_Shap.Razdel == tmp_fields.Razdel
               and tmp_Shap.Npp_S == tmp_fields.Npp_S ))
            { PrepareSQLQuery('When #Comp('+string(tmp_fields.cGP_KPI_RAISE)
              +') THEN '
              +if( false //tmp_shap.wTypeFld=4 - пока не придумал как сравнить
                , '(select SpKau.name from spkau where spkau.nrec=GP_KPI_DOC_SP.FARRVALUE['+string(tmp_fields.NPP)+'] )'
                , ' GP_KPI_DOC_SP.FARRVALUE['+string(tmp_fields.NPP)+']'
                )
                );
            }
            PrepareSQLQuery(' ELSE '''' END   ) as dms'+string(ii)  );
            continue;
          }
        } //If GetFirst tmp_Shap where (( ii == tmp_Shap.NPP_R ))=tsok
      } //if ii<=Kol_Fld
      PrepareSQLQuery(', '''' as dms'+string(ii));//        :Array [1..100] of string
    } //for(ii:=1;ii<=100;ii++)
  } //if _wtp=0
} //Procedure Add_Fields_Sql(_wtp:word);

//----------------------------------
// Сбор данных
// 0 - все данные
// 1 - заполнить tmp_kpi_raise
//----------------------------------
Function SborData(_tp_sbor:word=0):boolean;
var wErr:word;
    ii:longint;
{ Result:=false;
  if not NextVisual then Exit;
  //-----------------------------
  // Отберем данные
  stmt:=0;
  //==================сам запрос ===================
  CreateTempVib;
  ClearQuery(vliSQLCommand);
  //-----------------------------
  lPMarker.pUserDeskRep:=UserDeskRep.Nrec;
  //-----------------------------

  if UserDeskRep.RESLNGINT[cgFilter_Raise]>0
  { lPMarker._Loop PickRep
    Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   cgFilter_Raise   == PickRep.wList
    ))
    { InsTempVibOne(01,lPMarker.PickRep.cRec);//
    }
  }//if UserDeskRep.RESLNGINT[cgFilter_Raise]>0
  else
  if _tp_sbor=0
  { _Loop tmp_kpi_raise
    { InsTempVibOne(01,tmp_kpi_raise.nrec);//
    }
  }
  //-----------------------------
  if UserDeskRep.RESLNGINT[cgFilter_Podr]>0
  { lPMarker._Loop PickRep
    Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   cgFilter_Podr   == PickRep.wList
    ))
    { InsTempVibOne(02,lPMarker.PickRep.cRec);//
    }
  }//if UserDeskRep.RESLNGINT[cgFilter_Podr]>0
  //-----------------------------
  if UserDeskRep.RESLNGINT[cgFilter_Post]>0
  { lPMarker._Loop PickRep
    Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   cgFilter_Post   == PickRep.wList
    ))
    { InsTempVibOne(03,lPMarker.PickRep.cRec);//
    }
  }//if UserDeskRep.RESLNGINT[cgFilter_Post]>0
  //-----------------------------
  if UserDeskRep.RESLNGINT[cgFilter_Pers]>0
  { lPMarker._Loop PickRep
    Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   cgFilter_Pers   == PickRep.wList
    ))
    { InsTempVibOne(04,lPMarker.PickRep.cRec);//
    }
  }//if UserDeskRep.RESLNGINT[cgFilter_Pers]>0
  //-----------------------------
  if UserDeskRep.RESLNGINT[cgFilter_Kateg]>0
  { lPMarker._Loop PickRep
    Where (( pUserDeskRep == PickRep.cUserDeskRep
     and   cgFilter_Kateg   == PickRep.wList
    ))
    { InsTempVibOne(05,lPMarker.PickRep.cRec);//
    }
  }//if UserDeskRep.RESLNGINT[cgFilter_Kateg]>0
  //-------------------------
  //--- Права на подразделения
  if isPodrShare
  { case NPOEM_OWN_Raise_Protect of
    0: //зарплата
    { vZar_User._Loop USERRIGHTS
       InsTempVibOne(1001,vZar_User.USERRIGHTS.crecds);//
    }
    1://нет
    {

    }
    2: //свои
    { vZar_User._Loop GP_USERRIGHTS
       InsTempVibOne(1001,vZar_User.GP_USERRIGHTS.crecds);//

    }
    3://группы подразделений
    { vZar_User._Loop KatLink
       InsTempVibOne(1002,vZar_User.katlink.CREC);//

    }
    end;
  } //if isPodrShare

  //--- Права на подразделения
  //-------------------------

  PrepareSQLQuery('select ');
  if _tp_sbor=0
  { Add_Fields_Sql(0);
  }
  else
  { PrepareSQLQuery(' DISTINCT GP_KPI_Raise.Nrec');
    PrepareSQLQuery(',GP_KPI_RAISE.Name');
  }
  PrepareSQLQuery('From GP_KPI_DOC ');
  if isPodrShare
  { case NPOEM_OWN_Raise_Protect of
    0,2: //зарплата
    { PrepareSQLQuery('inner join tempvib VibPodrR on VibPodrR.wlist=1001 and VibPodrR.crec = GP_KPI_DOC.CKATPODR ');
    }
    3://группы подразделений
    {

    }
    end;
  } //if isPodrShare
  if UserDeskRep.RESLNGINT[cgFilter_Podr]>0
  { PrepareSQLQuery('inner join tempvib VibPodr on VibPodr.wlist=2 and VibPodr.crec = GP_KPI_DOC.CKATPODR ');
  }
  PrepareSQLQuery('inner join GP_KPI_DOC_SP on GP_KPI_DOC_SP.cGP_KPI_DOC = GP_KPI_DOC.Nrec');
  if UserDeskRep.RESLNGINT[cgFilter_Raise]>0
  or _tp_sbor=0
  { PrepareSQLQuery('inner join tempvib VibRaise on VibRaise.wlist=1 and VibRaise.crec = GP_KPI_DOC_SP.CGP_KPI_RAISE ');
  }
  if UserDeskRep.RESLNGINT[cgFilter_Post]>0
  { PrepareSQLQuery('inner join tempvib VibPost on VibPost.wlist=3 and VibPost.crec = GP_KPI_DOC_SP.cPost ');
  }
  if UserDeskRep.RESLNGINT[cgFilter_Pers]>0
  { PrepareSQLQuery('inner join tempvib VibPers on VibPers.wlist=4 and VibPers.crec = GP_KPI_DOC_SP.cPersons ');
  }
  if UserDeskRep.RESLNGINT[cgFilter_Kateg]>0
  { PrepareSQLQuery('inner join tempvib VibKateg on VibKateg.wlist=5 and VibKateg.crec = GP_KPI_DOC_SP.cKlKatego');
  }
  PrepareSQLQuery('inner join GP_KPI_RAISE  on GP_KPI_RAISE.Nrec = GP_KPI_DOC_SP.CGP_KPI_RAISE');

  if isPodrShare
  { PrepareSQLQuery('inner join Katpodr on Katpodr.Nrec =GP_KPI_DOC.CKatpodr');
    case NPOEM_OWN_Raise_Protect of
    3:
    { PrepareSQLQuery('inner join tempvib VibGRPodrR on VibGRPodrR.wlist=1002 and VibGRPodrR.crec = katpodr.CGRPODR ');
    }
    end;
  }
  else
  { PrepareSQLQuery('left outer join Katpodr on Katpodr.Nrec =GP_KPI_DOC.CKatpodr');
  }
  PrepareSQLQuery('left outer join Katpodr Katpodr_SP on Katpodr_SP.Nrec =GP_KPI_DOC_SP.CKatpodr');
  PrepareSQLQuery('left outer join Persons  on Persons.Nrec  =GP_KPI_DOC_SP.cPersons');
  PrepareSQLQuery('left outer join Catalogs on Catalogs.Nrec =GP_KPI_DOC_SP.cPost');
  PrepareSQLQuery('left outer join KlKatego on KlKatego.Nrec =GP_KPI_DOC_SP.cKlKatego');

  PrepareSQLQuery('where ');
  PrepareSQLQuery('      GP_KPI_DOC.wType>100 and GP_KPI_DOC.wType<110 ');
  PrepareSQLQuery(' and  (GP_KPI_DOC.WYEAR>'+string(UserDeskRep.RESLNGINT[03])
         +' or ( GP_KPI_DOC.WYEAR='+string(UserDeskRep.RESLNGINT[03])
         +'   and GP_KPI_DOC.WMONTH>='+string(UserDeskRep.RESLNGINT[01])+'))' );
  PrepareSQLQuery(' and  (GP_KPI_DOC.WYEAR<'+string(UserDeskRep.RESLNGINT[04])
          +' or (GP_KPI_DOC.WYEAR='+string(UserDeskRep.RESLNGINT[04])
          +'   and GP_KPI_DOC.WMONTH<='+string(UserDeskRep.RESLNGINT[02])+'))' );

    //-----------------------
    // подберм с доп. фильтра
  if UserDeskRep.ReSComp[1]>0
  if IsValidAll(#AllMemo)
  {  var ww_hfile : tptr;
    var ww_sMem  :string;
    var ww_first:boolean;
    ww_hfile := CreateFileHandle('');
    ww_first:=True;
    //после разделения на настройку и печать иначе затираем в настройке
    //Update current AllMemo;
    ReReadRecord(#AllMemo); // почему то сразу не применяет
    if File_OpenMemo(AllMemo.mem, ww_hfile)
    { ii:=0;
      timelog('PrepareSQLCommand Добавляем текстовый фильтр');
      File_Seek(ww_hfile,0);
      while not(File_EOF(ww_hfile))
      { ii++;
        File_Readln(ww_sMem, ww_hfile);
        timelog(' строка '+string(ii,2)+ww_sMem);
        if ww_sMem='' then continue;
        if ww_first
        { PrepareSQLQuery( '  and (' );
        }
        ww_first:=False;
        PrepareSQLQuery( ww_sMem); // ID
      } //while not(File_EOF(ww_hfile))
      File_Close(ww_hfile);
      if not ww_first
        PrepareSQLQuery( '  )'  );
    } //if File_OpenMemo(AllMemo.mem, ww_hfile)
  } //if IsValidAll(#AllMemo)
  //--------------------------
  if _tp_sbor=0
  { PrepareSQLQuery('group by ');
    Add_Fields_Sql(1);
  }
  //------------------
  stmt:=0;
  stmt := sqlAllocStmt;
  if _tp_sbor=0
  { wErr:=ExecDSQLex(tntmp_rep_k_r_sv);
  }
  else
  { wErr:=ExecDSQLex(tntmp_kpi_raise);
  }
  if wErr<>0
  { Message('Ошибка отбора данных '+string(wErr));
    //Exit; надо продолжить - хоть поля скроем.
  }
  //---------------------------
  // если заполняем только tmp_kpi_raise выходим
  //---------------------------
  if _tp_sbor<>0
  { Result:=true;
    exit;
  }
  //---------------------------
  // Отберем данные
  //-----------------------------

  if not NextVisual then Exit;
  //------------------------------------------
  //Настроим колонки для отображения
  timelog('SborData:Настроим колонки для отображения>>>>');
  var _Field_name:string='';
  var _Field_title:string='';
  _Loop tmp_shap
  { if not NextVisual then Exit;
    for(wErr:=1;wErr<=2;wErr++)
    { case wErr of
      1:
      { _Field_name  :='c_TRMAIN_tmp_rep_k_r_sv.DMS['+string(tmp_shap.NPP_R)+']_Поле_'+LpadCh(string(tmp_shap.NPP_R),'0',2);
        if tmp_shap.wTypeFld=1
        { cfsSetProp(_Field_name  ,'Visible'  ,False);
          continue;
        }
        if tmp_shap.wTypeFld=4// аналитика
        { //заполним потом в запросе
          _Loop fullcache tmp_rep_k_r_sv
          { if length(tmp_rep_k_r_sv.dms[tmp_shap.NPP_R])=0 then continue;
            update current tmp_rep_k_r_sv
             set tmp_rep_k_r_sv.dms[tmp_shap.NPP_R]:=#ShowKau(tmp_shap.kodGr,tmp_rep_k_r_sv.dms[tmp_shap.NPP_R]);
          }
        }
        cfsSetProp(_Field_name,cfpPassiveFormat,'');
      }
      2:
      { _Field_name  :='c_TRMAIN_tmp_rep_k_r_sv.DMD['+string(tmp_shap.NPP_R)+']_Поле_'+LpadCh(string(tmp_shap.NPP_R),'0',2);
        if tmp_shap.wTypeFld<>1
        { cfsSetProp(_Field_name  ,'Visible'  ,False);
          continue;
        }
        _Field_Title:='\'+string(tmp_shap.Razr)+'p[|-]366`666`666`666`666'
                  +if(tmp_shap.Razr<>0,'.'+PadCh('','8',tmp_shap.Razr ),'');
        cfsSetProp(_Field_name,cfpPassiveFormat,_Field_Title);

      }
      end;
      _Field_title:=GroupWrapStrWithNewRow(tmp_shap.Razdel_name+' - '+tmp_shap.Name,1,tmp_shap.Len,7);
      cfsSetProp(_Field_name,cfpTitle,_Field_title);
      cfsSetProp(_Field_name,cfpHelpLine,tmp_shap.Name);
      cfsSetProp(_Field_name,'DefaultWidth',tmp_shap.Len);
      if tmp_shap.Itog>0 // Итоги
      { cfsSetProp(_Field_name,cfpFontBold,True);
        cfsSetProp(_Field_name,cfpFontBackColor,ColorSysSilver );
      }
      else
      { cfsSetProp(_Field_name,cfpFontBold,false);
        cfsSetProp(_Field_name,cfpFontBackColor,0 );
      }
      //SetColumnWidth(MyGetBrowSpByNpp(_wNpp),MyGetFieldSpByNpp  (GP_KPI_Fields.NPP),TMP_KPI_Raise.fArrLen  [GP_KPI_Fields.NPP]);
    }//for(ww_err:=1;ww_err<=2;ww_err++)
  } //_Loop tmp_shap
  for(wErr:=kol_fld+1;wErr<=100;wErr++)
  { _Field_name  :='c_TRMAIN_tmp_rep_k_r_sv.DMS['+string(wErr)+']_Поле_'+LpadCh(string(wErr),'0',2);
    cfsSetProp(_Field_name  ,'Visible'  ,False);
    _Field_name  :='c_TRMAIN_tmp_rep_k_r_sv.DMD['+string(wErr)+']_Поле_'+LpadCh(string(wErr),'0',2);
    cfsSetProp(_Field_name  ,'Visible'  ,False);
  } //for(wErr:=kol_fld+1;wErr<=100;wErr++)
  _Field_name:='c_TRMAIN_TMP_REP_K_R_SV.ITOGO_Итого_премий,_руб.';
  cfsSetProp(_Field_name,cfpFontBold,True);
  cfsSetProp(_Field_name,cfpFontBackColor,ColorSysSilver );
  timelog('SborData:Настроим колонки для отображения<<<<< kol_fld='+string(kol_fld));
  //Настроим колонки для отображения
  //------------------------------------------
  //-----------------------------
  if UserDeskRep.ResName[2]<>''
  { StopVisual('',0);
    StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak, 'Отбор данных, этап 2...', RecordsInTable(#tmp_rep_k_r_sv));
    _Loop fullcache tmp_rep_k_r_sv where (( 1000 == tmp_rep_k_r_sv.pr))
               ordered by index tmp_rep_k_r_sv04
    { if not NextVisual then Exit;
      MakeIER;
    } //_Loop fullcache tmp_rep_k_r_sv where (( 1000 == tmp_rep_k_r_sv.pr))
  }

  Result:=true;
} //Function SborData:boolean;



//=======================================
//Формирование древа
//=======================================
Function FormDoc : Boolean;
{ Result:=False;
  ClearFuncCache;
  //------------------------
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak, 'Отбор данных, этап 1...', 1);
  //------------------------
  pGP_PodrFilterDef.katpodrGetLevelInit;
  //------------------------
  oGP_Log.Init('KPI_RAISE_SVOD.log', true, true, true);
  //--------------- Инициализация массива группировок
  MySetGroupMas(UserDeskRep.ResName[2]);
  //--------------- почистим
  MTRetrieve(#tmp_rep_k_r_sv,mfFilters + mfClear); //+mfClearFilters
  MTRetrieve(#tmp_Fields,mfFilters + mfClear); //+mfClearFilters
  MTRetrieve(#tmp_shap  ,mfFilters + mfClear); //+mfClearFilters
  ResetBounds(#tmp_rep_k_r_sv);
  Delete all tmp_rep_k_r_sv;
  //---- соберем
  //-----------------------------
  // Сформируем карту полей

  if not MakeFieldMap then exit;
  if not NextVisual then Exit;

  Result:=SborData;
  //--- выведем
  SetBounds(#tmp_rep_k_r_sv);
  ReReadRecord(#tmp_rep_k_r_sv);
  TreeJumpToRecord(fCurrMainFormat,0);
  ReScanPanel(#tmp_rep_k_r_sv);
  StopVisual('',0);
  oGP_Log.Done(true);
} //Function FormDoc : Boolean;

//-----------------------------------
// Формирование отчета
//-----------------------------------
Function PrintDoc(ww_type:word):boolean;
VAR
 boIsTerm :boolean;
 wnpp:longint;
 wwkl:boolean;
 wLevel_Start: word;
 wCurLevel,wPrevLevel:longint;
 ww_str:string;
{ Result:=True;
  wCurLevel:=wPrevLevel:=0;

  XlKillExcel;
  if ExcelInit(nmtemplate,true,2009)<>0
  { message('Ошибка инициализации шаблона');
    exit ;
  }

  //----- Делаем шапку
  wexrow:=4;
  wexcol:=10;
  ww_str:='???????';
  wnpp:=0;
  _Loop tmp_shap
  { wCurLevel:=tmp_shap.len;
    if length(tmp_shap.name)/3>tmp_shap.len
      wCurLevel:=length(tmp_shap.name)/3;
    if wCurLevel<12 wCurLevel:=12;
    xlSetColumnWidth(wCurLevel,1,wexcol,5,wexcol);//01
    if ww_str<>tmp_shap.Razdel_name
    or wnpp=0
    { if wnpp<>0
      if wNpp<wexcol-1
      { xlMergeCells(wexrow,wNpp, wexrow,wexcol-1); //
      }
      wnpp:=wexcol;
      ww_Str:=tmp_shap.Razdel_name;
      MyPutExcel(chr(39)+tmp_shap.Razdel_name,10,0,-1,-1);
    }
    else wexcol++;
  } //_Loop tmp_shap
  if wnpp<>0
  if wNpp<wexcol-1
  { xlMergeCells(wexrow,wNpp, wexrow,wexcol-1); //
  }

  xlSetColumnWidth(15,1,wexcol,5,wexcol);//01
  xlSetFontStyle(xlBold, wexrow,wexcol,wexrow,wexcol);
  MyPutExcel(chr(39)+'Всего премий',10,0,-1,-1);

  wexrow:=5;
  wexcol:=10;
  _Loop tmp_shap
  { if tmp_shap.Itog>0
      xlSetFontStyle(xlBold, wexrow,wexcol,wexrow,wexcol);

    MyPutExcel(chr(39)+tmp_shap.name,10,0,-1,-1);
  }
  MyxlFrameCells(63, 2, 1, 1, 4,1,wexrow,10+kol_fld);
  xlWrapText(4 ,10,wexrow,10+kol_fld);
  //----- Делаем шапку
  StartNewVisual(vtIndicatorVisual,vfTimer+vfBreak,'Идет печать...', RecordsInTable(#tmp_rep_k_r_sv));
  wexrow:=2;wexcol:=1;
  xlMergeCells(wexrow,1, wexrow,10+kol_fld); //

  MyPutExcel('Сводная ведомость премирования за период с '
    +DateToStr(Date(1,UserDeskRep.RESLNGINT[01],UserDeskRep.RESLNGINT[03]),'month YYYY')
    +if(UserDeskRep.RESLNGINT[01]<>UserDeskRep.RESLNGINT[02]
      or UserDeskRep.RESLNGINT[03]<>UserDeskRep.RESLNGINT[04]
      ,' по '+DateToStr(Date(1,UserDeskRep.RESLNGINT[02],UserDeskRep.RESLNGINT[04]),'month YYYY')
      ,'')
    ,10,0,-1,-1);
  HeaderStrCount:=5;
  wexrow:=HeaderStrCount+1;
  MyXlCreaMatrix(10000,10+kol_fld);
  wexrow:=wexrow-1;
  wwkl:=false;
  TreePushPos(fCurrMainFormat);
  case ww_type of
  0,2: wwkl:=TreeGetFirstEx(fCurrMainFormat );
  1: { wwkl:=true; wLevel_Start:=TreeLevel(fCurrMainFormat);}
  end;
  wnpp:=0;
  if  wwkl
  do
  {   if not nextvisual then break;
      wPrevLevel := wCurLevel;
      wCurLevel  := TreeLevel(fCurrMainFormat);
      boIsTerm   := TreeIsTerminal( fCurrMainFormat );
      wexrow:=wexrow+1; wexcol:=1;
      if (not boIsTerm)
      { xlSetFontStyle(xlBold, wexrow,1,wexrow,10+kol_fld);
        wexcol:=2;
        MyPutExcelNumber(1,0,10,0,-1,-1);//Для группировки B
        MyPutExcelNumber(wCurLevel+1,0,10,0,-1,-1); //Для группировки C

        xlMergeCells(wexrow,4, wexrow,9); //
        wexcol:=4;
        MyPutExcel(lpad(' ',wcurlevel*2)+tmp_rep_k_r_sv.fio,10,0,-1,-1);
        xlSetbackcolor(GetColorLevel(0), wexrow,1,wexrow,10+kol_fld);

        wexcol:=10
      } //
      else
      { MyPutExcel(tmp_rep_k_r_sv.MesN,10,0,-1,-1);//месяц
        MyPutExcelNumber(1,0,10,0,-1,-1);//Для группировки B
        MyPutExcelNumber(wCurLevel+1,0,10,0,-1,-1);         //Для группировки C
        MyPutExcel(tmp_rep_k_r_sv.YearN,10,0,-1,-1);//год
        MyPutExcel(chr(39)+tmp_rep_k_r_sv.Podr_kod,10,0,-1,-1);//подразделение, №
        MyPutExcel(chr(39)+MyGetInitial(tmp_rep_k_r_sv.Fio,true),10,0,-1,-1);//ФИО
        MyPutExcel(chr(39)+tmp_rep_k_r_sv.StrTabn,10,0,-1,-1);//табельный номер
        MyPutExcel(tmp_rep_k_r_sv.Post,10,0,-1,-1);//должность/профессия
        MyPutExcel(tmp_rep_k_r_sv.Kateg,10,0,-1,-1);//категория
      } // //if (not boIsTerm)
      _Loop tmp_shap
      { if tmp_shap.wTypeFld=1
        { MyPutExcelNumber(tmp_rep_k_r_sv.dmd[tmp_shap.NPP_R],tmp_shap.Razr,10,0,-1,-1);
        }
        else
        { MyPutExcel(chr(39)+tmp_rep_k_r_sv.dms[tmp_shap.NPP_R],10,0,-1,-1);
        }
      } //_Loop tmp_shap
      MyPutExcelNumber(tmp_rep_k_r_sv.Itogo,2,10,0,-1,-1);

      case ww_type of
      0:
      { wwkl:=TreeGetNextEx(fCurrMainFormat);
      }
      1:
      { wwkl:=TreeGetNextEx(fCurrMainFormat);
        if wwkl
        if  ww_type=1 and TreeLevel(fCurrMainFormat)<=wLevel_Start wwkl:=false;
      }
      2:
      { wwkl:=TreeGetNext(fCurrMainFormat);
      }
      else
      { wwkl:=false;
      }
      end;
  }
  While ( wwkl );
  MyxlWriteMatrix(wexrow);
  xlFreeMatrix;
  wexcol:=10;
  //-------------------------
  //наведем марафет
  _Loop tmp_shap
  { if tmp_shap.Itog>0
    { xlSetFontStyle(xlBold, HeaderStrCount,wexcol,wexrow,wexcol);
      xlSetbackcolor(GetColorLevel(1), HeaderStrCount,wexcol,wexrow,wexcol);
    }

    wexcol++;
  } //
  xlSetFontStyle(xlBold, HeaderStrCount,wexcol,wexrow,wexcol);
  xlSetbackcolor(GetColorLevel(1), HeaderStrCount,wexcol,wexrow,wexcol);
  //наведем марафет
  //-------------------------
  matrixkl:=False;
  MyxlFrameCells(63, 2, 1, 1, HeaderStrCount,1,wexrow,10+kol_fld);
  xlWrapText(HeaderStrCount ,1,wexrow,10+kol_fld);
  //wexrow++; wexcolL-3
  //MyPutExcelNumber(wCurLevel+1,0,10,0,-1,-1);         //Для группировки C

  xlAddRangeNameInBook('MainTable_TreeLevel',HeaderStrCount+1,3,wexrow,3);

  xlRunMacro('LoadReport');

  TreePopPos(fCurrMainFormat);
  ReScanPanel(#tmp_rep_k_r_sv);

  StopVisual('',0);

  MyXlEnd;
} //Function PrintDoc:boolean;





//******************************************************************************
//***************** О С Н О В Н О Й    Ф О Р М А Т        **********************
//******************************************************************************
#undef Fld_Itog
#define Fld_itog [14,'\2p[|-]366`666`666`666.88'],Protect, NoAutoSize,browseSum(' ');
#undef Fld_View
#declare Fld_View (wNum)
 [Fld_#(wNum)] tmp_rep_k_r_sv_sp_v.dms[3+#(wNum)] '#(wNum)'
    ('День #(wNum)',,sci14Esc) :[6],Protect, CustomSorting, {Font={BackColor=GetBackColorDay(#(wNum));}},NoAutoSize;
#end
//-------------------------
tree trMain '' (,,sci14EnEscTree);//sci14EscExTree_InsLevel)
Table tmp_rep_k_r_sv;
Fields
 tmp_rep_k_r_sv.fio         'ФИО','Группировка' ('Фамилия, Имя, Отчество или наименование группировки'): [30],Protect,NoDel;
 tmp_rep_k_r_sv.StrTabn     'Таб.','номер'      ('Табельный номер '      ): [10],Protect,NoDel;
 tmp_rep_k_r_sv.Podr_Kod    'Подр.','Код'       ('Подразделение,код '    ): [10],Protect,NoDel;
 tmp_rep_k_r_sv.Podr_Name   'Подразделение','Наименование'  ('Подразделение,наименование '): [15],Protect,NoDel;
 tmp_rep_k_r_sv.Podr_Kod_V  'П.вед.','Код'      ('Подразделение ведомости,код ') : [10],Protect,NoDel;
 tmp_rep_k_r_sv.Podr_Name_V 'Подр.ведомости','Наименование'  ('Подразделение ведомости,наименование '): [15],Protect,NoDel;
 tmp_rep_k_r_sv.Kateg       'Кате-','гория'     ('Категория персонала'    ) :[5],Protect,NoDel;
 tmp_rep_k_r_sv.Post        'Должность','/профессия'     ('Должность персонала'    ) :[20],Protect,NoDel;
 tmp_rep_k_r_sv.YearN       'Период','Год '     ('Период, год ведомости'  ) :[5],Protect,NoDel;
 tmp_rep_k_r_sv.MesN        'Период','месяц'    ('Период, месяц ведомости') :[5],Protect,NoDel;
 tmp_rep_k_r_sv.Itogo       'Итого ','премий, руб.' ('Итого премий, руб.') :#Fld_itog
 tmp_rep_k_r_sv.dms[01]     'Поле 01' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[01]     'Поле 01' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[02]     'Поле 02' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[02]     'Поле 02' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[03]     'Поле 03' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[03]     'Поле 03' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[04]     'Поле 04' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[04]     'Поле 04' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[05]     'Поле 05' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[05]     'Поле 05' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[06]     'Поле 06' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[06]     'Поле 06' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[07]     'Поле 07' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[07]     'Поле 07' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[08]     'Поле 08' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[08]     'Поле 08' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[09]     'Поле 09' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[09]     'Поле 09' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[10]     'Поле 10' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[10]     'Поле 10' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[11]     'Поле 11' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[11]     'Поле 11' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[12]     'Поле 12' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[12]     'Поле 12' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[13]     'Поле 13' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[13]     'Поле 13' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[14]     'Поле 14' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[14]     'Поле 14' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[15]     'Поле 15' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[15]     'Поле 15' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[16]     'Поле 16' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[16]     'Поле 16' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[17]     'Поле 17' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[17]     'Поле 17' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[18]     'Поле 18' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[18]     'Поле 18' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[19]     'Поле 19' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[19]     'Поле 19' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[20]     'Поле 20' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[20]     'Поле 20' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[21]     'Поле 21' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[21]     'Поле 21' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[22]     'Поле 22' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[22]     'Поле 22' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[23]     'Поле 23' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[23]     'Поле 23' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[24]     'Поле 24' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[24]     'Поле 24' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[25]     'Поле 25' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[25]     'Поле 25' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[26]     'Поле 26' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[26]     'Поле 26' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[27]     'Поле 27' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[27]     'Поле 27' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[28]     'Поле 28' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[28]     'Поле 28' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[29]     'Поле 29' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[29]     'Поле 29' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[30]     'Поле 30' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[30]     'Поле 30' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[31]     'Поле 31' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[31]     'Поле 31' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[32]     'Поле 32' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[32]     'Поле 32' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[33]     'Поле 33' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[33]     'Поле 33' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[34]     'Поле 34' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[34]     'Поле 34' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[35]     'Поле 35' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[35]     'Поле 35' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[36]     'Поле 36' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[36]     'Поле 36' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[37]     'Поле 37' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[37]     'Поле 37' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[38]     'Поле 38' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[38]     'Поле 38' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[39]     'Поле 39' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[39]     'Поле 39' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[40]     'Поле 40' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[40]     'Поле 40' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[41]     'Поле 41' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[41]     'Поле 41' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[42]     'Поле 42' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[42]     'Поле 42' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[43]     'Поле 43' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[43]     'Поле 43' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[44]     'Поле 44' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[44]     'Поле 44' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[45]     'Поле 45' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[45]     'Поле 45' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[46]     'Поле 46' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[46]     'Поле 46' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[47]     'Поле 47' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[47]     'Поле 47' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[48]     'Поле 48' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[48]     'Поле 48' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[49]     'Поле 49' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[49]     'Поле 49' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[50]     'Поле 50' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[50]     'Поле 50' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[51]     'Поле 51' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[51]     'Поле 51' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[52]     'Поле 52' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[52]     'Поле 52' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[53]     'Поле 53' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[53]     'Поле 53' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[54]     'Поле 54' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[54]     'Поле 54' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[55]     'Поле 55' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[55]     'Поле 55' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[56]     'Поле 56' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[56]     'Поле 56' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[57]     'Поле 57' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[57]     'Поле 57' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[58]     'Поле 58' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[58]     'Поле 58' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[59]     'Поле 59' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[59]     'Поле 59' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[60]     'Поле 60' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[60]     'Поле 60' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[61]     'Поле 61' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[61]     'Поле 61' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[62]     'Поле 62' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[62]     'Поле 62' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[63]     'Поле 63' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[63]     'Поле 63' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[64]     'Поле 64' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[64]     'Поле 64' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[65]     'Поле 65' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[65]     'Поле 65' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[66]     'Поле 66' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[66]     'Поле 66' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[67]     'Поле 67' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[67]     'Поле 67' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[68]     'Поле 68' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[68]     'Поле 68' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[69]     'Поле 69' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[69]     'Поле 69' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[70]     'Поле 70' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[70]     'Поле 70' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[71]     'Поле 71' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[71]     'Поле 71' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[72]     'Поле 72' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[72]     'Поле 72' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[73]     'Поле 73' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[73]     'Поле 73' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[74]     'Поле 74' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[74]     'Поле 74' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[75]     'Поле 75' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[75]     'Поле 75' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[76]     'Поле 76' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[76]     'Поле 76' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[77]     'Поле 77' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[77]     'Поле 77' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[78]     'Поле 78' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[78]     'Поле 78' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[79]     'Поле 79' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[79]     'Поле 79' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[80]     'Поле 80' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[80]     'Поле 80' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[81]     'Поле 81' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[81]     'Поле 81' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[82]     'Поле 82' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[82]     'Поле 82' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[83]     'Поле 83' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[83]     'Поле 83' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[84]     'Поле 84' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[84]     'Поле 84' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[85]     'Поле 85' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[85]     'Поле 85' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[86]     'Поле 86' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[86]     'Поле 86' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[87]     'Поле 87' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[87]     'Поле 87' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[88]     'Поле 88' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[88]     'Поле 88' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[89]     'Поле 89' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[89]     'Поле 89' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[90]     'Поле 90' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[90]     'Поле 90' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[91]     'Поле 91' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[91]     'Поле 91' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[92]     'Поле 92' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[92]     'Поле 92' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[93]     'Поле 93' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[93]     'Поле 93' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[94]     'Поле 94' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[94]     'Поле 94' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[95]     'Поле 95' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[95]     'Поле 95' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[96]     'Поле 96' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[96]     'Поле 96' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[97]     'Поле 97' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[97]     'Поле 97' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[98]     'Поле 98' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[98]     'Поле 98' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[99]     'Поле 99' :[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[99]     'Поле 99' :[10],Protect,noDel,noAutoSize;
 tmp_rep_k_r_sv.dms[100]    'Поле 100':[10],Protect,noDel,noAutoSize,QuickChoice;
 tmp_rep_k_r_sv.dmd[100]    'Поле 100':[10],Protect,noDel,noAutoSize;
end;//tree trMain


//-----------------------------
//Отработанное время
/*
по графику
фактически
сверхурочно
выходные и нерабочие праздничные дни
*/
//Начисления, руб.
/*
ИТОГО
сдельно
повременно
одинарно за сверхурочные
одинарно за выходные и праздничные дни
*/
//Премия за качество и дисциплину
/*
нормативный %
фактический %
Факт. сумма
*/
//Премия за результаты работы
/*
коэффициент выполнения показателей премирования
оценка эффективности деятельности работника
коэффициент оценки
нормативный %
фактический %
план. сумма
факт. сумма
*/
//Премия из фонда руководителя
/*
нормативный %
фактический %
план. сумма
факт. сумма
*/
//Премия за выполнение показателей
/*
%
Сумма
фактический %
фактическая сумма
нормативный %
коэффициент выполнения показателей премирования
*/
//Премия итого

//******************************************************************************
/////////////////////// ОБРАБОТЧИК СОБЫТИЙ tmp_rep_k_r_sv /////////////////////////
//******************************************************************************
TableEvent table tmp_rep_k_r_sv;
//--------------------------
cmTreeTop         :
{ pNode := 0;
}
//--------------------------
cmTreeUp          :
{ pNode := tmp_rep_k_r_sv.cRec;
}
//--------------------------
cmTreeDown        :
{ pNode := tmp_rep_k_r_sv.Nrec;
}
//--------------------------
cmTreeNodeType    :
{ //onSetPosition(U_XML_TABLE.Nrec);
  if (TreeIsTerminal(fCurrMainFormat))
  if getfirst tmp_rep_k_r_sv_Sub<>tsok
   TreeSetNodeType(fCurrMainFormat, ntfText);
}
//--------------------------
cmTreeNeedOwner:
{ TreeJumpToRecord(fCurrMainFormat, tmp_rep_k_r_sv.cRec);
}
//--------------------------
cmTreeInsLevel:
{ //message('1111')
  //TreeJumpToRecordEx(trTable, #U_XML_TABLE, U_XML_TABLE.Nrec)
}

end;//TableEvent table tmp_rep_k_r_sv_gr_v


//******************************************************************************
/////////////////////// ОБРАБОТЧИК СОБЫТИЙ USERDESKREP /////////////////////////
//******************************************************************************
TableEvent  Table AllMemo;
//--------------------------
cmSetDefault:
{ Clearbuffer(#AllMemo);
  AllMemo.Nrec:=GetNextNrec(#AllMemo,0);
  set UserDeskRep.ResComp[1] :=AllMemo.Nrec;
}
//--------------------------
cmInsertRecord:
{ insert current AllMemo

}
//--------------------------
cmUpdateRecord:
{ update current AllMemo
}
end;//TableEvent  Table AllMemo;



//******************************************************************************
/////////////////////////// ОБРАБОТКА СОБЫТИЙ ИНТЕРФЕЙСА ///////////////////////
//******************************************************************************
HandleEvent
  //--------------------------
  cmInit:
  { timelog_init;
    //GetVipRef(piTuneIer, 'iTuneIer');
    fCurrMainFormat:=trMain;
    if getfirst UserDeskRep<>tsok
    { message('Ошибка поиска настройки!');
      CloseInterface(cmDone);
      Exit;

    }
    LogFileKl:=IsBitCTW(UserDeskRep.RESWORD[01],1);
    sUserName:=UserName();
    nmtemplate:='GP_KPI_DOC_RaiseSvod.xlsm';
    Logfilenm:=GetStringParameter('Files','OutputFilesDirectory',0)+'!GP_KPI.Log';

    //-------- настройки
    NPOEM_OWN_Raise_Protect   :=wGetTune('NPOEM_OWN.Raise.Protect');//Использовать ограничения по подразделениям
    if vZar_User.getfirst Zar_user=tsok {}
    isPodrShare:=GetPodrShare;

    FormDoc;
    SetTitle('Свод по премиям:'+UserDeskRep.RepName+':'
       +DateToStr(Date(1,UserDeskRep.RESLNGINT[01],UserDeskRep.RESLNGINT[03])
                  ,'MM'+if(UserDeskRep.RESLNGINT[03]=UserDeskRep.RESLNGINT[04],'','/YYYY')
                 )
       +DateToStr(Date(1,UserDeskRep.RESLNGINT[02],UserDeskRep.RESLNGINT[04]),'-MM/YYYY'));
  }
  //--------------------------
  cmFilterSave:
  { //UpdateTable;
    //if RunWindowModal(wnGetNastr)=cmValue3
      FormDoc;
  }
  //--------------------------
  cmHotKeys:
  {
      case CurTable of
      #tmp_rep_k_r_sv:
      { ProcessCommand(RunMenu('GP_KPI_RaiseSvod_Main_HotKey'));
      }
      end;
  }
  //--------------------------
  cmValue2: PrintDoc(2);
  //--------------------------
  cmPrintDoc:
  { PrintDoc(0);
  }
  //--------------------------
  cmPlansNo:
  { PrintDoc(1);
  }
end;
end.

GP_KPI_RaiseSvod_Main_HotKey Menu
{
 - 'Обновить'     , cmFilterSave, 'Обновить', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
// -----------;
- '~П~ечать',cmPrintDoc,'Вывод в Excel отчета Дисциплина труда',hcNoContext,'Ctrl+P',kbCtrlP,sci1Esc,,,, bmpPrint;
- 'Печать текущей ветки',cmPlansNo,'Печать документа  только текущей ветки',hcctxSoprPrintDoc,'Alt+P',kbAltP,sci1Esc;
- 'Печать по развороту',cmValue2,'Печать документа только развернутых веток',hcctxSoprPrintDoc,'Alt+P',kbAltP,sci1Esc;
}
