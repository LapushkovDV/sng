/*************************************************************************************************\
* Наименование: Настройки доступа к документам по ролям                                           *
* Контур/Модуль: *                                                                                *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер задачи  |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
* Разработка  |#195          |29/08/17|Кузьмин П.Ю.             |НПО Энергомаш                    *
\*************************************************************************************************/

#include GP_UserAccessService.vih
#include GP_RolesView.vih

#include GP_RoleAccessEdit.vih
interface GP_RoleAccessEdit 'Настройки доступа к документам', Gray;
show(20,5,120,25);

var cCurRoleGroup,cCurTypeDoc:comp;
    UserAccessService:GP_UserAccessService NoAuto;
    RolesView:GP_RolesView NoAuto;

create view
from
  GP_Roles,GP_StatusRoles,GP_Status,
  GP_StatusChangeRoles,GP_StatusChange,
  GP_Status StatusFrom, GP_Status StatusTo,
  GP_Status GP_Status2,GP_StatusRoles GP_StatusRoles2,
  GP_StatusChangeRoles StatusChangeRoles2
where((
  cCurRoleGroup==GP_Roles.cRoleGroup and
  GP_Roles.NRec==GP_StatusRoles.cRole and
  GP_StatusRoles.cStatus/==GP_Status.NRec and
  cCurTypeDoc==GP_Status.cTypeDoc(noindex) and

  GP_Roles.NRec==GP_StatusChangeRoles.cRole and
  GP_StatusChangeRoles.cStatusChange/==GP_StatusChange.NRec and
  GP_StatusChange.cStatusFrom/==StatusFrom.NRec and
  cCurTypeDoc==StatusFrom.cTypeDoc(noindex) and
  GP_StatusChange.cStatusTo==StatusTo.NRec
));

browse brRoles (,,sci14Esc);
show(,,,10);
table GP_Roles;
fields
  {font={Bold=GP_Roles.IsAdmin}};
  GP_Roles.Name 'Наименование роли' ('Наименование роли',,):[50],Protect;
  if(GP_Roles.IsAdmin,'Да','Нет') 'Адм.' ('Роль администратора',,):[5],Protect,NoAutoSize;
end;

TabbedSheet bottom tabRoleAccessEdit;
show(,11,,);

FormatsGroup fgAccess 'Настройка доступа';
browse brStatus (,,sci178Esc);
show(,11,75,);
table GP_StatusRoles;
fields
  {font={Bold=GP_Status.IsDefault}};
  GP_Status.Code 'Код':[5], Protect,NoDel,NoAutoSize;
  GP_Status.Name 'Наименование статуса':[40], Protect,NoDel;
  if(GP_Status.IsDefault,'Да','Нет')
    'По умол.' ('Статус по умолчанию',,):[8],Protect,NoAutoSize;
end;

screen scAccess (,,sci1Esc);
show(76,11,,);
table GP_StatusRoles;
fields
  GP_StatusRoles.Access ('Доступ',,):NoProtect;
<<
 `Доступ`
 [.] Просмотр`
 [.] Редактирование`
 [.] Добавление`
 [.] Удаление`
 [.] Только свои документы`
>>
end;
end;

browse brStatusChange 'Настройка изменений статуса' (,,sci178Esc);
table GP_StatusChangeRoles;
fields
  StatusFrom.Name 'Из статуса':[40],Protect,NoDel;
  StatusTo.Name 'В статус':[40],Protect,NoDel;
end;
end;

TableEvent table GP_StatusRoles;
cmPositionChanged:{
  ClusterDisabledField(#GP_StatusRoles.Access,if(GP_Status.IsDefault,0,100b));//Добавление доступно только в статусе по умолчанию
}
cmCheckField:{
  if (GP_StatusRoles.Access>1) //Любое редактирование предполагает и Просмотр
    set GP_StatusRoles.Access:=GP_StatusRoles.Access or 1b;

  if ((GP_StatusRoles.Access and 100b)<>0) //Добавление предполагает Редактирование
    set GP_StatusRoles.Access:=GP_StatusRoles.Access or 10b;
}
cmUpdateRecord:{
  update current GP_StatusRoles;
}
cmDeleteRecord:{
  delete current GP_StatusRoles;
}
end;

TableEvent table GP_StatusChangeRoles;
cmDeleteRecord:{
  delete current GP_StatusChangeRoles;
}
end;

HandleEvent
cmInsert:{
  if (not IsValidAll(tnGP_Roles)) exit;

  var m : tptr;
  var i : longint;
  if (CurTable=tnGP_StatusRoles) {
    m:=InitMarker('',8,0,1);
    if (RunInterface(GP_StatusPickAndEdit,cCurTypeDoc,cgiPickMult,0,m,'')=cmDefault) {
      _loop GP_Status2
      where((
        cCurTypeDoc==GP_Status2.cTypeDoc and GP_Status2.Nrec==GP_StatusRoles2.cStatus
        and GP_Roles.NRec==GP_StatusRoles2.cRole
      )) {
        if (not FoundMarker(m,GP_Status2.NRec)) continue;
        if (IsValidAll(tnGP_StatusRoles2)) continue;

        ClearBuffer(tnGP_StatusRoles);
        GP_StatusRoles.cStatus:=GP_Status2.NRec;
        GP_StatusRoles.cRole:=GP_Roles.Nrec;
        GP_StatusRoles.Access:=1;
        if (insert current GP_StatusRoles <> tsok) {
          message('Ошибка вставки записи в таблицу GP_StatusRoles!',error);
          break;
        }
      }
      ReReadRecord(tnGP_StatusRoles);
    }
    DoneMarker(m,'');
  } else if (CurTable=tnGP_StatusChangeRoles) {
    m := InitMarker('',8,0,1);
    if (RunInterface(GP_StatusChangePickAndEdit,cCurTypeDoc,m)=cmDefault) {
      var cRec:comp;
      for(i:=0;i<GetMarkerCount(m);i++) {
        GetMarker(m,i,cRec);
        if (getfirst fastfirstrow StatusChangeRoles2
            where((GP_Roles.NRec==StatusChangeRoles2.cRole and cRec==StatusChangeRoles2.cStatusChange))=tsok) continue;

        ClearBuffer(tnGP_StatusChangeRoles);
        GP_StatusChangeRoles.cStatusChange:=cRec;
        GP_StatusChangeRoles.cRole:=GP_Roles.Nrec;
        if (insert current GP_StatusChangeRoles <> tsok) {
          message('Ошибка вставки записи в таблицу GP_StatusChangeRoles!',error);
          break;
        }
      }
      ReReadRecord(tnGP_StatusChangeRoles);
    }
    DoneMarker(m,'');
  }
  stop;
}
cmEdit:{
  if (RolesView=Nullref)
    RolesView:=New(GP_RolesView,InitForRoleGroup(cCurRoleGroup));

  if (RolesView<>Nullref)
    RolesView.ShowWinEdit(GP_Roles.NRec);

  ReReadRecord(tnGP_Roles);
}
cmHotKeys:{
  if (brStatus=GetCurrentFormat or brStatusChange=GetCurrentFormat)
    PutContextMenuCommand('GP_RoleAccessEdit_HotKeys');
}
cmValue1:{//Перейти к статусу
  if (brStatus=GetCurrentFormat) {
    if (IsValidAll(tnGP_StatusRoles))
      GoToStatus(GP_StatusRoles.cStatus);
  } else if (brStatusChange=GetCurrentFormat) {
    if (IsValidAll(tnGP_StatusChange))
      GoToStatus(GP_StatusChange.cStatusFrom);
  }
}
end;

constructor Init;
{
  result:=false;
}

constructor InitForRoleGroupAndTypeDoc(cRoleGroup,cTypeDoc:comp);
{
  cCurRoleGroup:=cRoleGroup;
  cCurTypeDoc:=cTypeDoc;
  result:=cCurRoleGroup<>0 and cCurTypeDoc<>0;
}

procedure SelectRole(cRole:comp);
{
  if (getfirst GP_Roles where((cRole==GP_Roles.NRec))=tsok)
    ReReadRecord(tnGP_Roles);
}

end.

GP_RoleAccessEdit_HotKeys Menu
{
- '~П~ерейти к статусу', cmValue1, 'Перейти в представление по статусам', , , , sci1Esc,,;
}
