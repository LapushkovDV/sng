#include SQLFilts.vih
#include ViewResult.vih
#include SQLPrintToXLT.vih
//include SQLRunReport.vih
#include SQLBuildReport.vih

vipinterface SQLRunReport #Licensed_Free Parameters(_OborCFG: comp);

Interface SQLRunReport 'Отчет', EscClose,cyan;
  Show at (,,90,20);

 File MacroFile;
Create view
var
 _OborCFG : comp;
 sDescr, sDesgr : string;
 wSQLFilts : SQLFilts;
 wViewResult : ViewResult;
 wSQLBuildReport : SQLBuildReport;
 ColumnCol : LongInt;

 SQLPrint : SQLPrintToXLT;

 _logQRY_DSQL : string;

As Select
 *
from
    OborCfg
  , TableCaption
  , tempView
  , UserDeskRep

  , AttrNam MacrosAttrNam
  , AttrVal MacrosAttrVal
  , AttrNam ExcelFileAttrNam
  , AttrVal ExcelFileAttrVal

 where
((
    _OborCFG == OborCfg.Nrec
    and    UserName      == UserDeskRep.OwnName
   and OborCFG.Nrep + cgReport_30000  == UserDeskRep.nRep

   and 'Макрос'     == MacrosAttrNam.Name
   and word(9400)   == MacrosAttrNam.WTABLE
   and word(9400)   == MacrosAttrVal.WTABLE
   and OborCfg.Nrec == MacrosAttrVal.cRec
   and MacrosAttrNam.Nrec == MacrosAttrVal.CATTRNAM

   and 'EXCEL-файл' == ExcelFileAttrNam.Name
   and word(9400)   == ExcelFileAttrNam.WTABLE
   and word(9400)   == ExcelFileAttrVal.WTABLE
   and OborCfg.Nrec == ExcelFileAttrVal.cRec
   and ExcelFileAttrNam.Nrec == ExcelFileAttrVal.CATTRNAM


))
;
parameters
 _OborCFG
;

tabbedSheet top RunSql
  Show at (,,,17);
embedded embSQLFilts 'Фильтры' interface wSQLFilts end;
embedded embViewResult 'Результат' interface wViewResult end;
end;
Screen scSets 'Основная'('',,sci14Esc);
Show at (,18,,);
buttons
  cmValue12,,, 'Выполнить',,;
  cmValue13,Default,, 'Печать',,;
  cmClose,,, 'Выход',,;
<<
             <. Сформировать .>       <.    Печать    .>       <.    Отмена    .>

>>

end;
Function GenerateNewFilePath: string; {
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ 'DSQL_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS');
}
function GetLogFile : string; {
  if _logQRY_DSQL = '' then _logQRY_DSQL := GenerateNewFilePath+'.log';
  result := _logQRY_DSQL;
}

Procedure MyLog(_str: string; _needlog : boolean = false); {
  exit;
//  if isvalidall(tnQRY_TMPLT)
//  if not (QRY_TMPLT.isLogging or _needlog) then exit;// debud
  LogStrToFile(GetLogFile,DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + shortstrtowin(_str));
}

function RunMacros : boolean;
{
 if OborCFG.iFILTER[3] = 0
   Exit;
 var s,SQLmacros : string;
 SQLmacros:= GetPathParameter('Files','TmpFilesDirectory',0)+'SQLmacros.bas';
 DeleteFile(SQLmacros);
 if GetFirst MacrosAttrNam = tsOk
   if GetFirst MacrosAttrVal = tsOk
   {
     MacroFile.OpenMemo(MacrosAttrVal.vLvar);
     if MacroFile.GetSize > 0
     {
       MacroFile.seek(0);
       while not MacroFile.EOF do
       {
         MacroFile.ReadLn(s);
         LogStrToFile(SQLmacros, Oem2Ansi(s));
       }
     }
   }

 if not xlImportModule(SQLmacros) message ('Ошибка загрузки макроса');
   if not xlRunMacro(OborCfg.sRep[9]) message('Ошибка запуска макроса');

   RunMacros:=true;
 //    DeleteFile(SQLFmacros);


}
procedure PrintField(row1 : LongInt; num, col1 : word);
{
   case tableCaption.fldType[num] of
     ftComp                              : XlStWriteToMatrix(row1, col1, ''''+String(tempView.cComp[tableCaption.fldOrd[num]],0,0));
     ftChar,ftString,ftZString           : XlStWriteToMatrix(row1, col1, ''''+tempView.sString[tableCaption.fldOrd[num]]);
     ftSingle,ftDouble                   : XlDoWriteToMatrix(row1, col1, tempView.dDouble[tableCaption.fldOrd[num]]);
     ftByte,ftWord,ftInteger, ftLongInt  : XlDoWriteToMatrix(row1, col1, tempView.wWord[tableCaption.fldOrd[num]]);
     ftDate                              : XlDtWriteToMatrix(row1, col1, tempView.dDate[tableCaption.fldOrd[num]]);
     ftTime                              : XlStWriteToMatrix(row1, col1, TimeToStr(tempView.tTime[tableCaption.fldOrd[num]],'HH:MM:SS'));
   end;
}

procedure PrintExcel;
{
  MyLog('PrintExcel');
  ColumnCol := wSQLBuildReport.ColumnsCol;
//  MyLog('PrintExcel');

  wViewResult.ReDrawCaption;
  wViewResult.ReDrawTable;

  var col1, k1 : word;
  var r1 : LongInt;
//  var NewExcel : boolean;
  StartNewVisual(vtRotateVisual, vftimer, 'Печать отчета...', 0);
  xlKillExcel;
  var _ExcelFile : string = GenerateNewFilePath;
  if OborCFG.column <> '' {
      _ExcelFile := _ExcelFile + '_' + OborCFG.column;
       ExportMemoToFile(ExcelFileAttrVal.VLVAR, _ExcelFile, false)
   }
  MyLog('_ExcelFile = ' + _ExcelFile);
  //message(_ExcelFile);
  if OborCFG.column<>'' {
    XLCreateNewExcelWithTemplate(_ExcelFile,true);
//    NewExcel := false;
    if (not xlIsExcelValid)
    {
     if (VisualizationActive())
      stopvisual('',0);
      message('Ошибки при вызове Excel!файл шаблона не обработан'+Chr(13)+'Обратитесь к системному администратору',OkButton+error);
      exit;
      abort;
    }
  }
  else {
    // открыть файл
    _ExcelFile := GenerateNewFilePath+'.xlsx';
    xlCreateExcel(_ExcelFile, true);
//    NewExcel := true;
  }

  MyLog('_ExcelFile = ' + _ExcelFile);
  MyLog('xlIsExcelValid = ' + xlIsExcelValid);

  if (xlIsExcelValid) {
    xlCreateMatrix( RecordsInTable(#tempView), ColumnCol);
    if GetFirst tableCaption = tsok {
      r1:=0;

      _loop tempView {
        col1:=0;
        r1++;
        for (k1:=1;k1<=ColumnCol;k1++) {
          col1++;
          if tableCaption.fldName[k1] <> '' or  tableCaption.fldType[k1] <> 0 {
            PrintField(r1,k1,col1);
          }
        }
      }
    }
  }

  xlWriteMatrixToExcel(OborCFG.IFilter[0],1);
  xlFreeMatrix();
  RunMacros;
  xlKillExcel;
//  putfiletoclient(_ExcelFile, false);
  if (VisualizationActive())
    stopvisual('',0);
}
procedure SetVisRes;
{
  if OborCFG.IFILTER[2] = 1
  {
    SetTabbedSheetVisible (embViewResult,true);
    ShowButton (scSets,  cmValue12, true);
    wViewResult.ReDrawCaption;
    wViewResult.ReDrawTable;
  }
  else
  {
    SetTabbedSheetVisible (embViewResult,false);
    ShowButton (scSets,  cmValue12, false);
  }
}
function CheckDates : boolean;
{
  CheckDates := true;
  if (OborCfg.WFILTER[8] and 1)<> 0
  {
    if UserDeskRep.RESDATE[2] < UserDeskRep.RESDATE[1]
    {
      message('Дата начала не может быть больше даты конца', Error);
      CheckDates := false;
    }
     if word(UserDeskRep.RESDATE[2])=0 or word(UserDeskRep.RESDATE[1])=0
     {
       message('Не заполнены даты!', Error);
       CheckDates := false;
     }

  }
}
HandleEvent
cmValue36:
{

}
cmInit:
{
  if boGetTune('USERTUNE.AccessToCreateSQlRep')=false
    SetHelpAndStatusContext (embSQLFilts,-1, sci1Esc, '');
  delete all from tableCaption;
  delete all from tempView;
  SetWindowTitle(wnMainWindow, OborCFG.nRep +' '+OborCFG.RepName);
  SetVisRes;
  wSQLFilts.ReInit(OborCFG.Nrec);
  cfsSetProp('F_USERREPORT::SQLRUNREPORT', cfpRectA_X, 0);
  cfsSetProp('F_USERREPORT::SQLRUNREPORT', cfpRectA_Y, 0);
  cfsSetProp('F_USERREPORT::SQLRUNREPORT', cfpRectB_X, 90);
  cfsSetProp('F_USERREPORT::SQLRUNREPORT', cfpRectB_Y, 20);
 //  LocateWin(0, 0, 90, 20: single; Win: integer);
//  cfsSetPropDefault('F_USERREPORT::SQLRUNREPORT',cfpRectA_X);
 // cfsSetPropDefault('F_USERREPORT::SQLRUNREPORT',cfpRectA_Y);
  //cfsSetPropDefault('F_USERREPORT::SQLRUNREPORT',cfpRectB_X);
  //cfsSetPropDefault('F_USERREPORT::SQLRUNREPORT',cfpRectB_Y);
}
cmValue12:
{
  if GetFirst OborCFG = tsok
    if GetFirst UserDeskRep = tsOk
    { }

  if not CheckDates
    exit;

  if wSQLBuildReport.SQL_Run(OborCFG.Nrec)
    if GetFirst tableCaption = tsok
      if OborCFG.IFILTER[2] = 1
      {
        wViewResult.ReDrawCaption;
        wViewResult.ReDrawTable;
        SetFormat(embViewResult);
      }
}

cmValue13:
{
  var bCanPrint : boolean = false;
  if GetFirst OborCFG = tsok
    if GetFirst UserDeskRep = tsOk
    { }
  if not CheckDates
    exit;

  if wSQLBuildReport.SQL_Run(OborCFG.Nrec)
    if GetFirst tableCaption = tsok
      bCanPrint := true;

  if bCanPrint
    if OborCfg.iFilter[1] = 0
      PrintExcel
//    else
//      SQLPrint.PrintToShablon(OborCFG.Nrec);
}

cmEdit:
{
  if boGetTune('USERTUNE.AccessToCreateSQlRep')=true
  {
    wSQLBuildReport.SQLEdit(OborCFG.Nrec);
    SetVisRes;
  }
}

End;
end.
