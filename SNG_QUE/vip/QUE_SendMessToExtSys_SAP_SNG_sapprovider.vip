
/*************************************************************************************************\
* Наименование: Выбор адреса по иерархии                                                          *
* Контур/Модуль: Абстрактный конструктор JSON                                                     *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/
/*
вот такой JSON отсылаем в Галактику
 "action":"atmcall"
  , "jsonrpc":"2.0"
  , "id":3
  , "class": "SNG_QUE::QUE_REST"
  , "method": "oQUE_REST_PutMessageToIncomeQueue"
  , "params":{"body": "тут наш JSON перекодированный в base64"
            , "isbase64":true
            , "system_code":"KATKAUSPKAU"
            }


*/
#include SNG_IntegrDirectum_out_base.Vih
#include SNG_Provider.vih
#include QUE_SendMessToExtSys.vih
#include QUE_BASE.vih
//************************************************************

vipinterface QUE_SendMessToExtSys_SAP_SNG_sapprovider implements oQUE_SendMessToExtSys
  Licensed(free);

Interface QUE_SendMessToExtSys_SAP_SNG_sapprovider;

var _iPass: SNG_IntegrDirectum_out_base;
    iQUE_BASE : QUE_BASE;
    sMessage: string;

create view
var
    _cQUE_Handler_tune : comp;
from
  QUE_Handler_tune Handler_tune
where ((
       _cQUE_Handler_tune == Handler_tune.nrec
      ))
;

function SendMessage(_cQueue : comp; _bodyMessage : TpTr; _InstanceCode: string; _typeEvent: string; __cQUE_Handler_tune : comp; var _retStatus, _retFileLog: string) : boolean; 
{
  result := false;
  _retStatus  := 'Начало отправки запроса';
  _retFileLog := '';

  var _isDebug  : boolean = false; //тестовый режим

  var lResponse : TPtr;
  var httpCon   : TPtr = longint(0);
  var lHeader   : TPtr = longint(0);

  var API_Host     : string = sgettune('SAPIntegration_URL');
  var API_Method   : string = sgettune('SAPIntegration_MET1');
  var Api_url      : string = 'https://'+API_Host+'/'+API_Method;  
  var API_Username : string = sgettune('SAPIntegration_UserName'); 
  var API_Password : string = _iPass.decrypt(sgettune('SAPIntegration_Password'));
  var API_Basic: string;

  var _ResponseLog : string = iQUE_BASE.GenerateNewFile + '_Response.log';

  httpCon := HttpConnect_CreateEx(Api_url, API_Username, API_Password, True);
  HttpConnect_SetUserAgent(httpCon, 'Mozilla/5.0');
  HttpConnect_ResponseLogEnable(httpCon);

  _try
  {
    //формируем заголовок
    lHeader := HttpConnect_CreateLongString(httpCon);
    HttpConnect_AddValueToLongString(httpCon, 'Content-Type: application/json' + chr(13), lHeader);
    HttpConnect_AddValueToLongString(httpCon, 'Accept: application/json'       + chr(13), lHeader);
    var API_Basic: string;
    encodeToBase64(API_Username+':'+API_Password, API_Basic)
    HttpConnect_AddValueToLongString(httpCon, 'Authorization: Basic '+ API_Basic + chr(13), lHeader);
//---------------------------------------------------------------------------------------------------
    //формируем адрес
    var lAddUrl: TPtr = HttpConnect_CreateLongString(httpCon);
    HttpConnect_AddValueToLongString(httpCon, API_Method, lAddUrl);

    _try
    {
       //формируем тело запроса
      var lRequest: TPtr = _bodyMessage;

      if _isDebug  //тестовый. сохраним сформированный запрос для проверки
      {
        var _sfileoutJSON : string = iQUE_BASE.GenerateNewFile + OleGenerateGUID +'_JSON.txt';
        HttpConnect_SaveToFileEx(httpCon, lRequest, _sfileoutJSON, cpUTF8, false);
        PutFileToClient(_sfileoutJSON,false);
      }

      _try
      {
        //отправляем запрос
        lResponse := HttpConnect_SendRequestPostJSON(httpCon, lAddUrl, lHeader, lRequest, false);

        HttpConnect_ResponseLogToFile(httpCon, _ResponseLog);

        if (HttpConnect_LastError(httpCon) <> 0) 
        {
           sMessage  := 'Ошибка обработки документа: ' + HttpConnect_LastErrorText(httpCon);
           result := false;

        } 
        else 
        {
           //обработка ответа lResponse
           var JSONResponse : TPtr   = HttpConnect_JSONObjectByLongString(httpCon, lResponse);

           //пример обработки полей ответа
           sMessage := HttpConnect_JsonObjectValueByName(httpCon,JSONResponse,'RESPONSE_SAP_FM');
           if sMessage = ''
           {
              sMessage := 'Документ обработан успешно. Ответ пустой. Код обработки: 200';
              result     := true;
           }
           else
           {
              sMessage   := 'Обработано. Код обработки SAP: '+sMessage;
              result     := true;
           }

           /*
           sMessage := HttpConnect_JsonObjectValueByName(httpCon,JSONResponse,'EV_ERROR_TEXT');
           if (upcase(HttpConnect_JsonObjectValueByName(httpCon,JSONResponse,'EV_STATUS'))) = 'E'
           {
              sMessage   := 'Ошибка обработки документа: ' + if(sMessage <> '', sMessage, 'Неизвестная ошибка');
              result     := false;
           }
           else
           {
              var lSapId : longint = longint(HttpConnect_JsonObjectValueByName(httpCon,JSONResponse,'EV_SAP_ID'));
              sMessage   := 'Обработано. SapId='+string(lSapId);
              result     := true;
           }
           */
        }

        if _isDebug //тестовый. сохраним сформированный ответ для проверки
        {
           LogStrToFile(_ResponseLog, sMessage);
           PutFileToClient(_ResponseLog,false);
        }

        _retStatus  := sMessage;
        _retFileLog := _ResponseLog;

      }
      _finally
      {
        HttpConnect_DestroyLongString(httpCon, lRequest);
      }
    }
    _finally
    {
      HttpConnect_DestroyLongString(httpCon, lHeader);
      HttpConnect_DestroyLongString(httpCon, lAddUrl);
    }
  }
  _finally
  {
    HttpConnect_DestroyLongString(httpCon, lResponse);
    HttpConnect_Free(httpCon);
  }    

}

function GetDescription : string; {
  result := 'Интеграция с SAP посредством JSON (СНГ) SapProvider'
}

procedure Setup(__cQUE_Handler_tune : comp);{
  set _cQUE_Handler_tune := __cQUE_Handler_tune;
  if getfirst Handler_tune = tsOK {
    update current Handler_tune set Handler_tune.name = 'Настроек не предусмотрено';
  }
  message('Настроек не предусмотрено',error);
}

end.