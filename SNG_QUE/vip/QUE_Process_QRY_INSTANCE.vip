
/*************************************************************************************************\
* Наименование: Тестовый интерфейс обработки сообщения, генерирует польз аналитику и ее значения  *
*               из сообщения                                                                      *
* Контур/Модуль: Абстрактный конструктор JSON                                                     *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/
/*
структура JSON
[
      {
        "QRY_INSTANCE" :
        [
          {
            "ADDWHERETERMS" : "",
            "CODE" : "JSON_QRY_INSTANCE",
            "DESCRIPTION" : "",
            "NAME" : "JSON_QRY_INSTANCE",
            "QRY_INSTANCE_FLD" :
            [
              {
                "CLEVEL" : "16",
                "DESCRIPTION" : "",
                "FIELDJSON" : "NOTALWAYSARRAY",
                "FIELDNAME" : "QRY_INSTANCE_FLD_LVL.NOTALWAYSARRAY",
                "FIELDSYNONIM" : "NOTALWAYSARRAY_46F7BC6BAB954A35A25821791CF1C6B6",
                "POSTFUNCTION" : "",
                "TABLECODE" : "13583",
                "TABLENAME" : "QRY_INSTANCE_FLD_LVL"
              },
              .....
            ],
            "QRY_INSTANCE_FLD_LVL" :
            [
              {
                "CLEVEL" : "0",
                "DESCRIPTION" : "MESSAGE",
                "FLD_JSON_NAME" : "MESSAGE",
                "NOTALWAYSARRAY" : "TRUE",
                "NREC" : "12"
              },
              ..........
            ],
            "TEMPLATE_CODE" : "JSON_QRY_INSTANCE"
          },
          ...
        ]
      }
]
*/
#include QUE_ProcessMessIncomeMessageGalaktika.vih
#include QUE_BASE.vih

//************************************************************

vipinterface QUE_Process_QRY_INSTANCE implements oQUE_ProcessMessIncomeMessageGalaktika
  Licensed(free);

Interface QUE_ProcessMessIncomeQueue_QRY;

table struct tQRY_Instance (
    Nrec          : comp
  , CODE          : string
  , DESCRIPTION   : string
  , NAME1         : string
  , template_code : string
  , ADDWHERETERMS : widestring[2000]
)
with index(
   ind0 = nrec (unique, surrogate)
);

table struct tQRY_INSTANCE_FLD (
    ctQRY_Instance : comp
  , CLEVEL         : comp
  , DESCRIPTION    : string
  , FIELDJSON      : string
  , FIELDNAME      : string
  , FIELDSYNONIM   : string
  , POSTFUNCTION   : string
  , TABLECODE      : word
  , TABLENAME      : string
)
with index(
  ind0 = ctQRY_Template
);

table struct tQRY_INSTANCE_FLDLVL (
    ctQRY_Instance : comp
  , CLEVEL         : comp
  , DESCRIPTION    : string
  , FLD_JSON_NAME  : string
  , NOTALWAYSARRAY : boolean
  , NREC_SRC       : comp
  , nrec_dstn      : comp
)
with index (
   ind0 = ctQRY_Instance + CLEVEL
 , ind2 = NREC_SRC
);

create view
var _logQUE_OUT : string = '';
    _cQUE_Handler_tune : comp;
from
   QUE_Handler_tune Handler_tune

 , QRY_Instance
 , QRY_INSTANCE_FLD
 , QRY_INSTANCE_FLD_LVL
 , tQRY_Instance
 , tQRY_INSTANCE_FLD
 , tQRY_INSTANCE_FLDLVL

where ((
        _cQUE_Handler_tune == Handler_tune.nrec
      ))
;

Function GenerateNewFile: string; {
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ '\QUE_INCOME_'+olegenerateguid+'_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS');
}

function GetLogFile : string; {
  if _logQUE_OUT = '' then _logQUE_OUT := GenerateNewFile+'.log';
  result := _logQUE_OUT;
}

Procedure MyLog(_str: string; _needlog : boolean = false); {
  exit;
  LogStrToFile(GetLogFile,DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + shortstrtowin(_str));
}


function ProcessMessage(_message:TpTr; _cQUE_Handler_tune : comp; var _answerLong : tptr; var _answer : string) : boolean; {
 result := false;
 delete all tQRY_Instance;
 delete all tQRY_INSTANCE_FLD;
 delete all tQRY_INSTANCE_FLDLVL;


 var iQUE_BASE : QUE_BASE new;
 var m_service : tptr = HttpConnect_CreateEx('http://ya.ru', '', '', true);


  _answerLong :=  HttpConnect_CreateLongString( m_service);


  //debug
  /*
    var _FilePath_retMessage : string = iQUE_INCOME_BASE.GenerateNewFile+'_messageQRY_TEMPLATE.txt';
    HttpConnect_SaveToFileEx(m_service, _message, _FilePath_retMessage, cpUTF8, false);
    putfiletoclient(_FilePath_retMessage, false);
    */
  // end debug

  var JSON_Object : tptr = HttpConnect_JSONObjectByLongString(m_service, _message);
   if JSON_Object = 0 {
      _answer := 'не смогли преобразовать сообщение в JSON';
      HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
      exit;
    }

    var JSON_BODY_ARRCount : longint = HttpConnect_JsonCount(m_service, JSON_Object);
    if JSON_BODY_ARRCount =  0 {
      _answer := 'Пустой массив BODY';
      HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
       exit;
     }

   var i_JSON_QRY_BODY_ARR : longint = 0;
   for (i_JSON_QRY_BODY_ARR := 0; i_JSON_QRY_BODY_ARR  <= JSON_BODY_ARRCount - 1; i_JSON_QRY_BODY_ARR++) {
//
    var _JSON_Element_Body : TPtr = HttpConnect_JSONObjectByIndexOfArray(m_service, JSON_Object, i_JSON_QRY_BODY_ARR);


      var JSON_MSG_QRY_TEMPLATE_ARR : TPTr = HttpConnect_JSONArrayByName(m_service,_JSON_Element_Body,'QRY_INSTANCE');
        if JSON_MSG_QRY_TEMPLATE_ARR = 0 {
          _answer := 'Ошибка в массиве BODY элемент № "'+string(i_JSON_QRY_BODY_ARR)+'" не найден массив QRY_INSTANCE';
           HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
          exit;
        }

       var JSON_QRY_TEMPLATE_ARRCount : longint = HttpConnect_JsonCount(m_service, JSON_MSG_QRY_TEMPLATE_ARR);
        if JSON_QRY_TEMPLATE_ARRCount =  0 {
          _answer := 'Пустой массив QRY_INSTANCE';
          HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
           exit;
         }

       var i_JSON_QRY_TEMPLATE_ARR : longint = 0;
       for (i_JSON_QRY_TEMPLATE_ARR := 0; i_JSON_QRY_TEMPLATE_ARR <= JSON_QRY_TEMPLATE_ARRCount - 1; i_JSON_QRY_TEMPLATE_ARR++) {
    //     MyLog('Идем по массиву QRY_TEMPLATE');
         var _JSON_Element : TPtr = HttpConnect_JSONObjectByIndexOfArray(m_service, JSON_MSG_QRY_TEMPLATE_ARR, i_JSON_QRY_TEMPLATE_ARR);

              clearbuffer(tntQRY_Template);
               tQRY_Instance.CODE          := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element, 'CODE');
               tQRY_Instance.DESCRIPTION   := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element, 'DESCRIPTION');
               tQRY_Instance.NAME1         := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element, 'NAME');
               tQRY_Instance.TEMPLATE_CODE := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element, 'TEMPLATE_CODE');
              var _WHERETERMS : tptr = HttpConnect_JsonObjectLongValueByName( m_service, _JSON_Element, 'ADDWHERETERMS');
               if _WHERETERMS <> 0
                then tQRY_Instance.WHERETERMS := iQUE_INCOME_BASE.longstring_to_widestring(iQUE_INCOME_BASE.convertLongstringFromBase64(_WHERETERMS));

             insert current tQRY_Instance;

          if tQRY_Template.NAME1 = '' {
            _answer := 'Элемент массива QRY_INSTANCE "'+string(i_JSON_QRY_TEMPLATE_ARR)+'" пустое поле "NAME"';
            HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
            exit;
          }

          if tQRY_Template.CODE = '' {
            _answer := 'Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATE_ARR)+'" пустое поле "CODE"';
            HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
            exit;
          }

          if tQRY_Template.TEMPLATE_CODE = '' {
            _answer := 'Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATE_ARR)+'" пустое поле "TEMPLATE_CODE"';
            HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
            exit;
          }

          var JSON_QRY_instance_fld_lvl_ARR : TPTr = HttpConnect_JSONArrayByName(m_service,_JSON_Element,'QRY_INSTANCE_FLD_LVL');
          var JSON_QRY_instance_fld_lvl_ARRCount : longint = HttpConnect_JsonCount(m_service, JSON_QRY_instance_fld_lvl_ARR);

                if JSON_QRY_instance_fld_lvl_ARRCount =  0 {
                  _answer :=  'Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATE_ARR)+'" Пустой массив QRY_INSTANCE_FLD_LVL';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                   exit;
                 }

          if JSON_QRY_instance_fld_lvl_ARRCount > 0 {
              var i_JSON_QRY_instance_fld_lvl_ARR : longint = 0;
              for i_JSON_QRY_instance_fld_lvl_ARR := 0; i_JSON_QRY_instance_fld_lvl_ARR  <= JSON_QRY_instance_fld_lvl_ARRCount - 1; i_JSON_QRY_instance_fld_lvl_ARR++) {
               var _JSON_Element_fld_lvl : TPtr = HttpConnect_JSONObjectByIndexOfArray(m_service, JSON_QRY_instance_fld_lvl_ARR, i_JSON_QRY_instance_fld_lvl_ARR);
    //             MyLog('Идем по массиву JSON_QRY_TEMPLATESP_ARR ');


                  var _NOTALWAYSARRAY : boolean  = false;
                  var _NOTALWAYSARRAYstr : string = '';
                  _NOTALWAYSARRAYstr := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'NOTALWAYSARRAY');
                  if UPCASE(_NOTALWAYSARRAYstr) = 'TRUE' {
                       _NOTALWAYSARRAY := true;
                  }

                 clearbuffer(tntQRY_INSTANCE_FLDLVL);
                  tQRY_INSTANCE_FLDLVL.ctQRY_Instance := tQRY_Instance.nrec;
                  tQRY_INSTANCE_FLDLVL.CLEVEL         := comp(HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'CLEVEL'));
                  tQRY_INSTANCE_FLDLVL.DESCRIPTION    := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'DESCRIPTION');
                  tQRY_INSTANCE_FLDLVL.FLD_JSON_NAME  := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'FLD_JSON_NAME');
                  tQRY_INSTANCE_FLDLVL.NOTALWAYSARRAY := _NOTALWAYSARRAY
                  tQRY_INSTANCE_FLDLVL.NREC_SRC       := comp(HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'NREC'));
                  tQRY_INSTANCE_FLDLVL.nrec_dstn      := comp(0)
                 insert current tQRY_INSTANCE_FLDLVL;

                 if tQRY_TEMPLATESP.FLD_JSON_NAME = '' {
                  _answer := '"Экземпляр "'+ tQRY_Instance.CODE +'". Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATESP_ARR)+'" QRY_INSTANCE_FLD_LVL № '+string(i_JSON_QRY_instance_fld_lvl_ARR)+' пустое поле "QRY_INSTANCE_FLD_LVL"';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                  exit;
                }

                 if tQRY_TEMPLATESP.NREC_SRC = 0 {
                  _answer := '"Экземпляр "'+ tQRY_Instance.CODE +'". Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATESP_ARR)+'" QRY_INSTANCE_FLD_LVL № '+string(i_JSON_QRY_instance_fld_lvl_ARR)+' пустое поле "NREC"';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                  exit;
                }
              //  MyLog('Идем по массиву JSON_QRY_TEMPLATESP_ARR ' + _KAUCODE +'|'+ _CODE+'|'+  _NAME+'|'+  _NREC+'|'+  _CPARENT);
           }
         }


          var JSON_QRY_instance_fld_ARR : TPTr = HttpConnect_JSONArrayByName(m_service,_JSON_Element,'QRY_INSTANCE_FLD');
          var JSON_QRY_instance_fld_ARRCount : longint = HttpConnect_JsonCount(m_service, JSON_QRY_instance_fld_ARR);

                if JSON_QRY_instance_fld_ARRCount =  0 {
                  _answer :=  'Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATE_ARR)+'" Пустой массив QRY_INSTANCE_FLD';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                   exit;
                 }

          if JSON_QRY_instance_fld_ARRCount > 0 {
              var i_JSON_QRY_instance_fld_ARR : longint = 0;
              for i_JSON_QRY_instance_fld_ARR := 0; i_JSON_QRY_instance_fld_ARR  <= JSON_QRY_instance_fld_ARRCount - 1; i_JSON_QRY_instance_fld_ARR++) {
               var _JSON_Element_fld : TPtr = HttpConnect_JSONObjectByIndexOfArray(m_service, JSON_QRY_instance_fld_ARR, i_JSON_QRY_instance_fld_ARR);
    //             MyLog('Идем по массиву JSON_QRY_TEMPLATESP_ARR ');


                  var _NOTALWAYSARRAY : boolean  = false;
                  var _NOTALWAYSARRAYstr : string = '';
                  _NOTALWAYSARRAYstr := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'NOTALWAYSARRAY');
                  if UPCASE(_NOTALWAYSARRAYstr) = 'TRUE' {
                       _NOTALWAYSARRAY := true;
                  }

                 clearbuffer(tntQRY_INSTANCE_FLDLVL);
                  tQRY_INSTANCE_FLDLVL.ctQRY_Instance := tQRY_Instance.nrec;
                  tQRY_INSTANCE_FLDLVL.CLEVEL         := comp(HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'CLEVEL'));
                  tQRY_INSTANCE_FLDLVL.DESCRIPTION    := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'DESCRIPTION');
                  tQRY_INSTANCE_FLDLVL.FLD_JSON_NAME  := HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'FLD_JSON_NAME');
                  tQRY_INSTANCE_FLDLVL.NOTALWAYSARRAY := _NOTALWAYSARRAY
                  tQRY_INSTANCE_FLDLVL.NREC_SRC       := comp(HttpConnect_JsonObjectValueByName( m_service, _JSON_Element_fld_lvl, 'NREC'));
                  tQRY_INSTANCE_FLDLVL.nrec_dstn      := comp(0)
                 insert current tQRY_INSTANCE_FLDLVL;

                 if tQRY_TEMPLATESP.FLD_JSON_NAME = '' {
                  _answer := '"Экземпляр "'+ tQRY_Instance.CODE +'". Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATESP_ARR)+'" QRY_INSTANCE_FLD_LVL № '+string(i_JSON_QRY_instance_fld_lvl_ARR)+' пустое поле "QRY_INSTANCE_FLD_LVL"';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                  exit;
                }

                 if tQRY_TEMPLATESP.NREC_SRC = 0 {
                  _answer := '"Экземпляр "'+ tQRY_Instance.CODE +'". Элемент массива QRY_INSTANCE № "'+string(i_JSON_QRY_TEMPLATESP_ARR)+'" QRY_INSTANCE_FLD_LVL № '+string(i_JSON_QRY_instance_fld_lvl_ARR)+' пустое поле "NREC"';
                  HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
                  exit;
                }
              //  MyLog('Идем по массиву JSON_QRY_TEMPLATESP_ARR ' + _KAUCODE +'|'+ _CODE+'|'+  _NAME+'|'+  _NREC+'|'+  _CPARENT);
           }
         }

       }
  }
   if SynchQRY_Template(_answer) then result := true;
   _answer := 'Сообщение успешно обработано';
   HttpConnect_AddValueToLongString (m_service, _answer,_answerLong);
}

function GetDescription : string; {
  result := 'Создание / обновление экземпляров запросов'
}
procedure Setup(__cQUE_Handler_tune : comp);{
  set _cQUE_Handler_tune := __cQUE_Handler_tune;
  if getfirst Handler_tune = tsOK {
    update current Handler_tune set Handler_tune.name = 'Настроек не предусмотрено';
  }
  message('Настроек не предусмотрено',error);
}

end.
