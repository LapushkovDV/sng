#component "Z_STAFF"

const
  cmStaffSearchPersons = 20000;
  cmStaffDoWin99       = 20001; //VAA номер уникальный в пределах данного интерфейса
  coSysCodePassport: integer = 502;
  coSysCodePassSnils: integer = 501;
end;

#include ReceptAddWindow.vih
#include DepartmentsLimiter.vih  //Интерфейс разграничения прав доступа к подразделениям
#include ReceptionToolbarExtention.vih  //VAA Тулбар SNG для картотеки
#include Pickcat.vih //Для работы с подразделениями
#include PAXRefsBrowserSNG.vih
#include Query.vih

Alter InterFace ReceptionMain;

Overload
  procedure ReceptionInit;
  Procedure FullFilling;
  Procedure NewFiltr;
  procedure RunFoto;
  procedure SetApprTitle;
  procedure OnInsertedPerson;
  procedure OnDeletedPerson;
  procedure CheckAndPutCommand(wEvent: word; sNameInt: string[30]);
  procedure OnlyNeedRunWindow(bKindWindow: byte);
  procedure UnBindHotKeys;
  function BrSets(wArg: word): boolean;
  Procedure FillAccDepartment;
  Procedure ReInittmpPersons(cNRec: comp);
end;

toolbar Z_STAFF:: tlbrReceptionMainWinExtention;   //VAA кнопка для Безопасности
toolbar Z_STAFF:: tlbrReceptionMainSearch;

table struct PersFio
(
  Nrec: comp,
  IsEmployee: string,
  AppDate: date,
  DisDate: date,
  Fio: string,
  Dept: comp
)
with index
(
  indexByNrec = Nrec(unique),
  indexByIsEmployeD = IsEmployee + Dept + DisDate + AppDate,
  indexByIsEmployee = IsEmployee + DisDate + AppDate
//  indexByOldnRec = OldnRec
);

table struct tpDept
(
  Nrec: comp,
  Pr:word
)
with index
(
  indexByNrec = Nrec(unique),
  indexByPr = Pr
);

var JobTypes : array[1..1] of string;
var JobChar : array[1..1] of string;
var KatTypes : array[1..1] of string;
var coJobTypes : array[1..1] of comp;
var coJobChar : array[1..1] of comp;
var coKatTypes : array[1..1] of comp;

create view
var
  wFltPre,wTestSQL,wNoRegistr,wStartFind,
  PreStatPers:word;
  PreFltPersonsFio,
  PreFltPersonsTab:string;
  PreFltPersonsBornDate:date;
  PreFltPassNmb:string;
  PreFltPassSer:string;
  PreFltPassSnils:string;
  PreFltPersonsKat:string;
  PreFltJobChar:string;
  PreFltJobType:string;
  PredDateFiltr:date;
  IsFltDep,IsFltTab,IsFltFio,IsAgain,IsFltBornDate,IsFltPassSnils,IsFltPass:boolean;
  tmpComp      : Comp;
  DeptMarker   : TPtr;
  PreDeptCount : LongInt;  // количество в маркере
  FltDept      : Comp;     // если единичный выбор, то что выбрано
  _countAllPers: LongInt;   // Количество работников всего
  _countWorkPers: LongInt;   // Количество работающих работников
  _countCurPers: LongInt;   // Количество текущих работников
  _countRedunPers: LongInt;   // Количество уволенных работников
  _countPersK: LongInt;
  _countPersF: LongInt;
  IsInitOk:boolean;
  SerTmp         : string;
  NmbTmp         : string;
  NmbTmpS         : string;
as select
  if(PreDeptCount = 1, CatalogsFlt.Name,
    if(PreDeptCount > 1, 'множественный выбор: ' + string(PreDeptCount), 'не установлен'))
      (FieldName = PreFltDepartment)
  , if (Persons.AppointCur = comp(0), LastStaffStr.LongName, StaffStruct.LongName)
      (fieldname = StaffStrLongNameAny),
    if(SerTmp <> '', 'шаблон: ' + SerTmp, '') (FieldName = stSerTmp), // шаблон на серию

    if(NmbTmp <> '', 'шаблон: ' + NmbTmp, '') (FieldName = stNmbTmp), // шаблон на номер
    if(NmbTmpS <> '', 'шаблон: ' + NmbTmpS, '') (FieldName = stNmbTmpS) // шаблон на номер
from
    Catalogs CatalogsFlt
    
  , GroupMembers GrpMems4Serv //HR303, FIM
  , ServStav ServStavPhoto    //HR303, FIM
  , ServStav ServStavPhotoGrp //HR303, FIM
  , ServStav ServStavSafety   //HR303, FIM
  , ServStav SrvStvSafetyGrp  //HR303, FIM
  
  , CasePsn //HR-327, FIM
  , PersFio
  , tpDept
  , Appointments LastAppoint //HR380, FIM
  , StaffStruct              //HR380, FIM
  , StaffStruct LastStaffStr //HR380, FIM
  , Passports   //HR392, FIM
  , X$Users SNG_X$Users
  , Catalogs JobNatureCat
  , Catalogs CatalogsTmp
  , KLKATEGO
  , KLSOVM
  , Catalogs NameDocCat
  , Catalogs NameDocCat2
where
((
      FltDept == CatalogsFlt.NRec

  and UserId  == ServStavPhoto.cUnit                   //HR303, FIM
  and 16      == ServStavPhoto.wTblCode                //HR303, FIM
  and UserId  == GrpMems4Serv.ObjCode                  //HR303, FIM
  and GrpMems4Serv.GroupCode == ServStavPhotoGrp.cUnit //HR303, FIM
  and 16      == ServStavPhotoGrp.wTblCode             //HR303, FIM
  
  and CurAppoint.StaffStr  == StaffStruct.NRec  //HR380, FIM
  and Persons.AppointLast  == LastAppoint.Nrec  //HR380, FIM
  and LastAppoint.StaffStr == LastStaffStr.NRec //HR380, FIM
  
  and Persons.Nrec == Passports.Person  //HR392, FIM
  and 501          == Passports.SysCode //HR392, FIM
//  and Persons.JobNature == JobNatureCat.NRec
  and coSysCodePassport == NameDocCat.SysCode
  and coSysCodePassSnils == NameDocCat2.SysCode
))
;

procedure SNG_fnUnLockCurr;
{
  ClearSemaphore('ReceptionMain_'+string(Persons.NRec));
  UnLockAll(#Persons);
}

function SNG_fnLockCurrAndMsg(var sUser: string): integer;
{
  var tmpSemafors: type$X$Semafors;

  if (GetSemaphoreBlocker('ReceptionMain_'+string(Persons.NRec), sfExclusive, tmpSemafors) <> tsOk)
    UnLockAll(#Persons);
  else
  {
    if (GetFirst SNG_X$Users where (( tmpSemafors.UserCode == SNG_X$Users.ATL_NREC )) = tsOk)
      sUser := SNG_X$Users.XU$FULLNAME;
  }

  result := LockCurrent(#Persons);

  if (result = tsOk)
    SetSemaphore('ReceptionMain_'+string(Persons.NRec), sfExclusive);
}

procedure OnlyNeedRunWindow(bKindWindow: byte);
{
  var sUser: string = '';

  if (SNG_fnLockCurrAndMsg(sUser) <> tsOk)
    if (message(chr(3) + 'Карточка заблокирована ' + if(sUser <> '', 'пользователем ' + sUser, 'другим пользователем') + '!' +
                chr(13) + chr(3) + 'Хотите открыть в режиме просмотра?', Warning + YesNo) <> Yes)
      exit;

  inherited::OnlyNeedRunWindow(bKindWindow);
}

procedure UnBindHotKeys;
{
  var tmpSemafors: type$X$Semafors;
  if (GetSemaphoreBlocker('ReceptionMain_'+string(Persons.NRec), sfExclusive, tmpSemafors) = tsOk)
    if (tmpSemafors.UserCode = UserID)
      SNG_fnUnLockCurr;

  inherited::UnBindHotKeys;
}

function CheckRight2ViewPhotos : boolean; //HR303, FIM
{
  result := false;
  if IsValidAll(#ServStavPhoto)
    result := true;
  else
    _loop GrpMems4Serv
      if IsValidAll(#ServStavPhotoGrp)
      {
        result := true;
        break;
      }
}

function CheckRight2ViewSafety : boolean; //HR303, FIM
{
  result := false;
  if (ServStavSafety.wTblCode = 15)
    result := true;
  else
    _loop GrpMems4Serv where ((UserId == GrpMems4Serv.ObjCode))
      if (GetFirst SrvStvSafetyGrp where ((GrpMems4Serv.GroupCode == SrvStvSafetyGrp.cUnit
                                           and 15 == SrvStvSafetyGrp.wTblCode)) = tsOk)
      {
        result := true;
        break;
      }
}

//******************************************************************************
// Процедура набивки маркера доступных подразделений согласно правам доступа
//******************************************************************************
Procedure FillAccDepartment;
{
  AccDepartment := InitMarker('', 8, 30, 30); // список доступных СЕ ШР
  InsertMarker (AccDepartment, 0);

  mtClear(#tpDept, mfNormal);
  var Subject: comp;
  Subject := vUserAcs.First;

  if Subject <> comp(0)
    Do
    {
      set tpDept.Nrec:=Subject;
      insert current tpDept;
      InsertMarker (AccDepartment, Subject);
      Subject := vUserAcs.Next;
    }
    while Subject <> comp(0);

  nAccDepartment := GetMarkerCount(AccDepartment);
}
//******************************************************************************

overloadFormats brwPersons;

Browse brwPersons (, hcStaffReceptn2Main, );
  show at (,,,26);
  table tmpPersons;
Fields
  {font = {color  = if ( ( _MarkRecord ), ColorSysGray, 0 ) }};
  Persons.IsEmployee   'Статус'                 ('Статус'):                             [6],  protect; //HR475, GKS
  tmpPersons.FIO       'Фамилия, Имя, Отчество' ('Фамилия, имя и отчество сотрудника'): [31], Protect;
  tmpPersons.TabNmb    'Табельный №'            ('Табельный номер сотрудника'):         [12], Protect;
  tmpPersons.StrTabN   'Табельный №'            ('Табельный номер сотрудника'):         [12], Protect;
  tmpPersons.sSovmTabN 'Таб. совм.'             ('Табельный номер совмещения'):         [12], Protect;
  tmpPersons.sDepCode  'Код'                    ('Код подразделения'):                  [10], Protect;
  PersKatPodrFull      'Подразделение'          ('Подразделение сотрудника'):           [20], Protect;
  tmpPersons.sPost     'Должность'              ('Должность по основному назначению'):  [15], Protect;
  StaffStrLongNameAny  'Штатная должность'      ('Штатная должность'):                  [15], Protect; //HR380, FIM
  Persons.BornDate     'Дата рождения'          ('Дата рождения'):                      [12], Protect; //HR392, FIM
  Passports.Nmb        'СНИЛС'                  ('СНИЛС'):                              [10], Protect; //HR392, FIM
  tmpPersons.CodeProf  'Код'                    ('Код профессии'):                      [10], Protect;
  tmpPersons.AppDate   'Дата приема'            ('Дата приема на работу'):              [12], Protect;
  tmpPersons.DisDate   'Дата увольнения'        ('Дата увольнения'):                    [12], Protect;
  tmpPersons.sCategory 'Категория'              ('Категория'):                          [10], Protect;
  FilialRef            'Ф'                      ('ФПФ',,):                              [3], image;
  HistoryRef           'И'                      ('История',,):                          [3], image;
End;
Screen scrInfo;
  show at (,27,,) fixed_y;
  <<
  Статус: С - работающий сотрудник; У - уволенный; К - кандидат; Ф - физическое лицо.
  >>
end;
//******************************************************************************
// HR-327, поиск по ФИО или предыдущему ФИО
//******************************************************************************
function CheckFioExtended(nrec4PsnCase: comp; fio4PsnCase: string; fioMask4PsnCase: string): boolean;
{
  result := false;

  if (UpCase(fio4PsnCase) like fioMask4PsnCase)
    result := true;
  else
    _loop CasePsn where (( nrec4PsnCase == CasePsn.cPsn ))
      if (UpCase(CasePsn.PsnD) like fioMask4PsnCase)
      {
        result := true;
        break;
      }
}
//******************************************************************************
Function CheckLimitsDept(cPsn, cDept: comp; var bAccessDep: boolean; var iCountNoAccess: integer; PersonsFIO: string; var sFIO: string): boolean;
{
  Result := false;

  if (PreDeptCount > 0)
  {
    if (not foundMarker(DeptMarker, cDept))
    {
      exit;
    }
  }
//считаем что при выборе подразделения в фильтре, он уже с учетом прав доступа
/*
  if (nAccDepartment > 0)
    if (not foundMarker(AccDepartment, cDept))
    {
      if (CFC.ppFiltr = 1)
      {
        bAccessDep := false;
        iCountNoAccess++;
        sFIO := PersonsFIO;
      }

      exit;
    }
*/
  Result := true;
}

#include doc_tmpl.vpp

//******************************************************************************
// Макроподстановка для наполнения временной таблицы, показываемой в браузе
//******************************************************************************
#declare FillFieldsTmpTablePersons
  insert into tmpPersons
    select
      Persons.NRec,
      word(0),
      Persons.FIO,
      Persons.TabNmb,
      Persons.StrTabN,
      Persons.Department,
      0,
      Persons.AppointLast,
      Persons.AppDate,
      Persons.DisDate,
      Catalogs2.Code,
      Catalogs2.Name,
      Catalogs.Name,
      Catalogs.Code,
      KlKatego.NaiKat,
       Persons.IsEmployee, //для 11100
#end

#declare FillFieldsTmpTablePersons1
  insert into tmpPersons
    select
      Persons.NRec,
      word(0),
      PersFio.FIO,
      Persons.TabNmb,
      Persons.StrTabN,
      Persons.Department,
      0,
      Persons.AppointLast,
      Persons.AppDate,
      Persons.DisDate,
      Catalogs2.Code,
      Catalogs2.Name,
      Catalogs.Name,
      Catalogs.Code,
      KlKatego.NaiKat,
      Persons.IsEmployee, //для 11100
#end
//******************************************************************************
// Макроподстановка для наполнения временной таблицы, показываемой в браузе
//******************************************************************************
#declare SimilarConditionsForSelect
  and Appointments.Post == Catalogs.nRec
  and Persons.Department == Catalogs2.nRec
  and Appointments.EmpCategory == KlKatego.Nrec
#end
#define __Hide_SelectMethods__
#include markcopy.vpp // Копирование маркеров юзающих Catalogs
#undef __Hide_SelectMethods__
//******************************************************************************
procedure PreSelectPodr;
{
  if(PreDeptCount>0)
  {
    if(Message('Очистить ранее выбранные значения?', YesNo + Confirmation) = cmYes)
    {
      ClearMarker(DeptMarker);
    }
  }
  CopyPostToCat_andSoOn(DeptMarker, true);
  if (RunInterface('PickCatalog2', -11, tmpComp, 100) = cmDefault)
  {
    CopyPostToCat_andSoOn(DeptMarker, false);
    set PreDeptCount := GetMarkerCount(DeptMarker);
    GetMarker(DeptMarker, 0, FltDept);
  }
}
//*****************набивка временной по фио*************************************
Procedure MysqlAddStr(var query_handle: TPtr; add_query_str: string);
{
   sqlAddStr(query_handle, add_query_str);
 //LogStrToFile(_log, add_query_str);
}

Procedure FillTmpPersFio;
{
  var FioMask:string='%'+Trim(UpCase(PreFltPersonsFio))+'%';

  mtClear(#PersFio, mfNormal);
//******************************************************************************
  if(wTestSQL=0)
  {
//******************************************************************************
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      Persons.Fio,
      Persons.Department
    From
      Persons
    where (UpCase(Persons.Fio) like FioMask)
    ignore_errors (tsDuplicateKey);
//******************************************************************************
//старые фио
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      Persons.Fio+'('+CasePsn.PsnV+')',
      Persons.Department
    From
      CasePsn,
      Persons
    where ((CasePsn.cPsn == Persons.nRec)) and (UpCase(CasePsn.PsnV) like FioMask)
    ignore_errors (tsDuplicateKey);
//******************************************************************************
  }
  else
  {
    StartNewVisual(vtRotateVisual, vfTimer, 'Выполняется запрос по поиску ФИО', 0);
    var Q:iQuery;
    var RS:IResultSet;
    var qStr : TPtr = 0;
    MysqlAddStr(qStr, 'select                              ');
    MysqlAddStr(qStr, ' Persons.NRec        as Nrec,       ');
    MysqlAddStr(qStr, ' Persons.IsEmployee  as IsEmployee, ');
    MysqlAddStr(qStr, ' Persons.AppDate     as AppDate,    ');
    MysqlAddStr(qStr, ' Persons.DisDate     as DisDate,    ');
    MysqlAddStr(qStr, ' Persons.Fio         as Fio,        ');
    MysqlAddStr(qStr, ' Persons.Department  as Dept        ');
    MysqlAddStr(qStr, 'from Persons                        ');
    if(wNoRegistr=0)
      MysqlAddStr(qStr, 'where (Upper(Persons.Fio) like '''+FioMask+''')');
    else
      MysqlAddStr(qStr, 'where (Persons.Fio like '''+FioMask+''')');

    Q := queryManager.CreateQuery(qStr);
    if Q.execute.errorCode = tsOk
    {
      RS:=Q.GetResultSet;
      sqlCopyInto(RS, #PersFio, true);
    }
    else
    {
      Message('Ошибка выполнения запроса '+ Q.errorCode);
    }
    StopVisual;
//******************************************************************************
//старые фио
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      Persons.Fio+'('+CasePsn.PsnV+')',
      Persons.Department
    From
      CasePsn,
      Persons
    where ((CasePsn.cPsn == Persons.nRec)) and (UpCase(CasePsn.PsnV) like FioMask)
    ignore_errors (tsDuplicateKey);
//******************************************************************************
  }
}
//*********************Фильтрация с помощью новых фильтров**********************
Procedure Filter;
{
  var cJobChar:comp=coJobChar[LongInt(Trim(PreFltJobChar)) + 1];
  var cJobType:comp=coJobTypes[LongInt(Trim(PreFltJobType)) + 1];
  var cKat:comp=coKatTypes[LongInt(Trim(PreFltPersonsKat)) + 1];
  if(cJobChar=0 and cJobType=0 and cKat=0)
    exit;
  _loop tmpPersons
  {
    if cKat != 0
    {
      if Persons.AppointCur = 0
      {
        delete current tmpPersons;
        continue;
      }
      if CurAppoint.EMPCATEGORY != cKat
      {
        delete current tmpPersons;
        continue;
      }
    }
    if cJobChar != 0
    {
      if Persons.JOBNATURE != cJobType
      {
        delete current tmpPersons;
        continue;
      }
    }
    if cJobType != 0
    {
      if Persons.CSOVM != cJobType
      {
        delete current tmpPersons;
        continue;
      }
    }
  }
}
//*********************Фильтрация с помощью новых фильтров**********************

//******************************************************************************
Procedure FullFilling;
{
  var bAccessDep: boolean = true;
  var iCountNoAccess: integer = 0;
  var sFIO: string = '';

  if(IsFltDep and not(IsFltFio))
  {
    StatPers:=PreStatPers;

    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
  else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
  Filter;
  if ( not bAccessDep )
    if ( iCountNoAccess = 1 )
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'сотрудника ' + sFIO + '!' + chr(13) +
              ''#3'Данный сотрудник отображаться не будет.', Information);
    else
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
              ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }

  if(IsFltBornDate)
  {
    StatPers:=PreStatPers;
    var dBornDate:date = PreFltPersonsBornDate;

    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
  else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate(noindex)
                and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate(noindex)
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and dBornDate /== Persons.BornDate
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and dBornDate /== Persons.BornDate(noindex)
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and dBornDate /== Persons.BornDate(noindex)
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and dBornDate /== Persons.BornDate(noindex)
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and dBornDate /== Persons.BornDate(noindex)
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and dBornDate /== Persons.BornDate(noindex)
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and dBornDate /== Persons.BornDate(noindex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and dBornDate /== Persons.BornDate(noindex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and dBornDate /== Persons.BornDate
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and dBornDate /== Persons.BornDate
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
  Filter;
  if ( not bAccessDep )
    if ( iCountNoAccess = 1 )
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'сотрудника ' + sFIO + '!' + chr(13) +
              ''#3'Данный сотрудник отображаться не будет.', Information);
    else
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
              ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }

  if(IsFltPassSnils)
  {
    StatPers:=PreStatPers;
    var sSnilsNmb:string = Trim(PreFltPassSnils);

    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
  else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and coSysCodePassSnils == Passports.SysCode
                and sSnilsNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and coSysCodePassSnils == Passports.SysCode
                  and sSnilsNmb == Passports.Nmb
                  and Passports.Person == Persons.NRec (NoIndex)
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and coSysCodePassSnils == Passports.SysCode
                    and sSnilsNmb == Passports.Nmb
                    and Passports.Person == Persons.NRec (NoIndex)
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and coSysCodePassSnils == Passports.SysCode
                      and sSnilsNmb == Passports.Nmb
                      and Passports.Person == Persons.NRec (NoIndex)
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and coSysCodePassSnils == Passports.SysCode
                      and sSnilsNmb == Passports.Nmb
                      and Passports.Person == Persons.NRec (NoIndex)
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and coSysCodePassSnils == Passports.SysCode
                          and sSnilsNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and coSysCodePassSnils == Passports.SysCode
                          and sSnilsNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and coSysCodePassSnils == Passports.SysCode
                          and sSnilsNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and coSysCodePassSnils == Passports.SysCode
                          and sSnilsNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and coSysCodePassSnils == Passports.SysCode
                            and sSnilsNmb == Passports.Nmb
                            and Passports.Person == Persons.NRec (NoIndex)
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
  Filter;
  if ( not bAccessDep )
    if ( iCountNoAccess = 1 )
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'сотрудника ' + sFIO + '!' + chr(13) +
              ''#3'Данный сотрудник отображаться не будет.', Information);
    else
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
              ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }

  if(IsFltPass)
  {
    StatPers:=PreStatPers;
    var sPassSer:string = Trim(PreFltPassSer);
    var sPassNmb:string = Trim(PreFltPassNmb);

    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
  else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and coSysCodePassport == Passports.SysCode
                and sPassSer == Passports.Ser (NoIndex)
                and sPassNmb == Passports.Nmb
                and Passports.Person == Persons.NRec (NoIndex)
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and coSysCodePassport == Passports.SysCode
                  and sPassSer == Passports.Ser (NoIndex)
                  and sPassNmb == Passports.Nmb
                  and Passports.Person == Persons.NRec (NoIndex)
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and coSysCodePassport == Passports.SysCode
                    and sPassSer == Passports.Ser (NoIndex)
                    and sPassNmb == Passports.Nmb
                    and Passports.Person == Persons.NRec (NoIndex)
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and coSysCodePassport == Passports.SysCode
                      and sPassSer == Passports.Ser (NoIndex)
                      and sPassNmb == Passports.Nmb
                      and Passports.Person == Persons.NRec (NoIndex)
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and coSysCodePassport == Passports.SysCode
                      and sPassSer == Passports.Ser (NoIndex)
                      and sPassNmb == Passports.Nmb
                      and Passports.Person == Persons.NRec (NoIndex)
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and coSysCodePassport == Passports.SysCode
                          and sPassSer == Passports.Ser (NoIndex)
                          and sPassNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and coSysCodePassport == Passports.SysCode
                          and sPassSer == Passports.Ser (NoIndex)
                          and sPassNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and coSysCodePassport == Passports.SysCode
                          and sPassSer == Passports.Ser (NoIndex)
                          and sPassNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and coSysCodePassport == Passports.SysCode
                          and sPassSer == Passports.Ser (NoIndex)
                          and sPassNmb == Passports.Nmb
                          and Passports.Person == Persons.NRec (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and coSysCodePassport == Passports.SysCode
                            and sPassSer == Passports.Ser (NoIndex)
                            and sPassNmb == Passports.Nmb
                            and Passports.Person == Persons.NRec (NoIndex)
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
  Filter;
  if ( not bAccessDep )
    if ( iCountNoAccess = 1 )
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'сотрудника ' + sFIO + '!' + chr(13) +
              ''#3'Данный сотрудник отображаться не будет.', Information);
    else
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
              ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }

  if(IsFltTab)
  {
    StatPers:=PreStatPers;
    var lTabN:LongInt=Longint(Trim(PreFltPersonsTab));

    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and lTabN /== Persons.TabNmb
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and lTabN /== Persons.TabNmb
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and lTabN /== Persons.TabNmb
                  and date(0, 0, 0) /== Persons.DisDate (NoIndex) // работающие
                  and Persons.AppointCur == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                 and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                 ignore_errors (tsDuplicateKey);
      }

      if StatPers = 3 // все
      {
        // значит, закачать еще и архив и уволенных, но текущих
        #FillFieldsTmpTablePersons
            '',  // не бывает действующего совмещения у архивной карточки
            0,
            0
          From
            Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
          where (('У' /== Persons.IsEmployee
                  and lTabN /== Persons.TabNmb
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
        // текущие
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and lTabN /== Persons.TabNmb
                  and date(1, 1, 1900) << Persons.DisDate (NoIndex) // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);

        #FillFieldsTmpTablePersons
            '',  // не бывает действующего совмещения у архивной карточки
            0,
            0
          From
            Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
          where (('К' /== Persons.IsEmployee
                  and lTabN /== Persons.TabNmb
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);

        #FillFieldsTmpTablePersons
            '',  // не бывает действующего совмещения у архивной карточки
            0,
            0
          From
            Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
          where (('Ф' /== Persons.IsEmployee
                  and lTabN /== Persons.TabNmb
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      }
      else
      {
        // теперь, если "текущие", то надо еще уволенных сюда
        if StatPers = 1// текущие
        {
          #FillFieldsTmpTablePersons
             TmpSovm.TabN,
             0,
             0
            From
              Persons, Appointments, Catalogs
              , Catalogs Catalogs2, KlKatego
              , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and lTabN /== Persons.TabNmb
                    and date(1, 1, 1900) << Persons.DisDate (NoIndex) // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        } // текущие
        else
        {
          if ( StatPers = 4 ) //  "Уволенные"
          {
            #FillFieldsTmpTablePersons
              TmpSovm.TabN,
              0,
              0
              From
                Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and lTabN /== Persons.TabNmb
                      and date(0, 0, 0) << Persons.DisDate (NoIndex) // уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
          else
          {
            if StatPers = 0 // работающие и принятые будущим периодом
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                  TmpSovm.TabN,
                  0,
                  0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                        and lTabN /== Persons.TabNmb
                        and ZeroDate /== Persons.DisDate (NoIndex) // не уволенные
                        and Persons.AppointLast == Appointments.nRec
                        #SimilarConditionsForSelect
                        and Persons.nRec == TmpSovm.cPsn
                        ))
                        and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                        ignore_errors (tsDuplicateKey);
              #FillFieldsTmpTablePersons
                  TmpSovm.TabN,
                  0,
                  0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                        and lTabN /== Persons.TabNmb
                        and LocalDate <<= Persons.DisDate (NoIndex)
                        and Persons.AppointLast == Appointments.nRec
                        #SimilarConditionsForSelect
                        and Persons.nRec == TmpSovm.cPsn
                        ))
                        and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                        ignore_errors (tsDuplicateKey);
            }
          else  // работающие на дату
          {
            if StatPers = 5
            {
              if (day(dDateFiltr) <> 0)
              {
                var LocalDate: date;
                LocalDate := dDateFiltr;

                #FillFieldsTmpTablePersons
                     TmpSovm.TabN,
                     0,
                     0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                            and lTabN /== Persons.TabNmb
                            and ZeroDate  /== Persons.DisDate (NoIndex) // работающие
                            and LocalDate >>= Persons.AppDate (NoIndex)
                            and Persons.AppointCur == Appointments.nRec
                            #SimilarConditionsForSelect
                            and Persons.nRec == TmpSovm.cPsn
                            ))
                           and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                           ignore_errors (tsDuplicateKey);

                  #FillFieldsTmpTablePersons
                      TmpSovm.TabN,
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs
                      , Catalogs Catalogs2, KlKatego
                      , TmpSovm
                    where (('С' /== Persons.IsEmployee
                            and lTabN /== Persons.TabNmb
                            and LocalDate <<= Persons.DisDate (NoIndex)
                            and LocalDate >>= Persons.AppDate (NoIndex)
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            and Persons.nRec == TmpSovm.cPsn
                            ))
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);

                  #FillFieldsTmpTablePersons
                      TmpSovm.TabN,
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs
                      , Catalogs Catalogs2, KlKatego
                      , TmpSovm
                    where (('У' /== Persons.IsEmployee
                            and lTabN /== Persons.TabNmb
                            and LocalDate <<= Persons.DisDate (NoIndex)
                            and LocalDate >>= Persons.AppDate (NoIndex)
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            and Persons.nRec == TmpSovm.cPsn
                            ))
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                } // if (day(dDateFiltr) <> 0)
              }
              else
              {
                if StatPers = 6
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('К' /== Persons.IsEmployee
                            and lTabN /== Persons.TabNmb
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
                else
                {
                  if StatPers = 7
                  {
                    #FillFieldsTmpTablePersons
                        '',  // не бывает действующего совмещения у архивной карточки
                        0,
                        0
                      From
                        Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                      where (('Ф' /== Persons.IsEmployee
                              and lTabN /== Persons.TabNmb
                              and Persons.AppointLast == Appointments.nRec
                              #SimilarConditionsForSelect
                              ))
                              and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                              ignore_errors (tsDuplicateKey);
                  }
                }
              }
            }
          }
        }
      }
    } // не архив
    Filter;
    if ( not bAccessDep )
      if ( iCountNoAccess = 1 )
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'сотрудника ' + sFIO + '!' + chr(13) +
                ''#3'Данный сотрудник отображаться не будет.', Information);
      else
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
                ''#3'Отображаться такие сотрудники не будут.', Information);

    exit;
  }

  if(IsFltFio and not(IsFltDep))
  {
    StatPers:=PreStatPers;
/*
    var FioMask:string='%'+Trim(UpCase(PreFltPersonsFio))+'%';
    //попробуем иначе
//******************************************************************************
    mtClear(#PersFio, mfNormal);
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      '',
      0
    From
      Persons
//    where CheckFioExtended(Persons.nRec, Persons.Fio, FioMask)//(UpCase(Persons.Fio) like FioMask)
    where (UpCase(Persons.Fio) like FioMask)
    ignore_errors (tsDuplicateKey);

//******************************************************************************
//старые фио
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      CasePsn.PsnV,
      CasePsn.cPsn
    From
      CasePsn,
      Persons
//    where CheckFioExtended(Persons.nRec, Persons.Fio, FioMask)//(UpCase(Persons.Fio) like FioMask)
    where ((CasePsn.cPsn == Persons.nRec)) and (UpCase(CasePsn.PsnV) like FioMask)
    ignore_errors (tsDuplicateKey);
//******************************************************************************
*/
    FillTmpPersFio;
/*
    if StatPers = 8 // архив
    { 
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Х' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== PersFio.IsEmployee
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== PersFio.IsEmployee
                and date(0, 0, 0) /== PersFio.DisDate // работающие
                and PersFio.nRec == Persons.nRec
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== PersFio.IsEmployee
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== PersFio.IsEmployee
                and date(1, 1, 1900) << PersFio.DisDate // уволенные
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== PersFio.IsEmployee
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== PersFio.IsEmployee
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            PersFio, Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== PersFio.IsEmployee
                  and date(1, 1, 1900) << PersFio.DisDate // уволенные
                  and PersFio.nRec == Persons.nRec
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== PersFio.IsEmployee
                    and date(0, 0, 0) << PersFio.DisDate // уволенные
                    and PersFio.nRec == Persons.nRec
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== PersFio.IsEmployee
                      and ZeroDate /== PersFio.DisDate // не уволенные
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== PersFio.IsEmployee
                      and LocalDate <<= PersFio.DisDate
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  PersFio, Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== PersFio.IsEmployee
                          and ZeroDate  /== PersFio.DisDate // работающие
                          and LocalDate >>= PersFio.AppDate
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== PersFio.IsEmployee
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== PersFio.IsEmployee
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== PersFio.IsEmployee
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== PersFio.IsEmployee
                            and PersFio.nRec == Persons.nRec
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
*/
    if StatPers = 8 // архив
    {
      #FillFieldsTmpTablePersons1
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'Х' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons1
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons1
         TmpSovm.TabN,
         0,
         0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and date(0, 0, 0) /== PersFio.DisDate // работающие
                and PersFio.nRec == Persons.nRec
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
//               and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons1
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons1
         TmpSovm.TabN,
         0,
         0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and date(1, 1, 1900) << PersFio.DisDate // уволенные
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons1
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'К' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons1
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'Ф' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons1
           TmpSovm.TabN,
           0,
           0
          From
            tpDept, PersFio, Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                  and tpDept.nRec /== PersFio.Dept
                  and date(1, 1, 1900) << PersFio.DisDate // уволенные
                  and PersFio.nRec == Persons.nRec
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
//                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons1
            TmpSovm.TabN,
            0,
            0
            From
              tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                    and tpDept.nRec /== PersFio.Dept
                    and date(0, 0, 0) << PersFio.DisDate // уволенные
                    and PersFio.nRec == Persons.nRec
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
//                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons1
                TmpSovm.TabN,
                0,
                0
              From
                tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                      and tpDept.nRec /== PersFio.Dept
                      and ZeroDate /== PersFio.DisDate // не уволенные
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
//                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons1
                TmpSovm.TabN,
                0,
                0
              From
                tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                      and tpDept.nRec /== PersFio.Dept
                      and LocalDate <<= PersFio.DisDate
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
//                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons1
                   TmpSovm.TabN,
                   0,
                   0
                From
                  tpDept, PersFio, Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                          and tpDept.nRec /== PersFio.Dept
                          and ZeroDate  /== PersFio.DisDate // работающие
                          and LocalDate >>= PersFio.AppDate
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                         and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons1
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                          and tpDept.nRec /== PersFio.Dept
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons1
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                          and tpDept.nRec /== PersFio.Dept
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons1
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where ((0 == tpDept.Pr
                and 'К' /== PersFio.IsEmployee
                          and tpDept.nRec /== PersFio.Dept
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons1
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where ((0 == tpDept.Pr
                and 'Ф' /== PersFio.IsEmployee
                            and tpDept.nRec /== PersFio.Dept
                            and PersFio.nRec == Persons.nRec
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
//                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив

//******************************************************************************
/*    // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                )) and (UpCase(Persons.Fio) like FioMask)
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                )) and (UpCase(Persons.Fio) like FioMask)
               and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                )) and (UpCase(Persons.Fio) like FioMask)
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                )) and (UpCase(Persons.Fio) like FioMask)
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                )) and (UpCase(Persons.Fio) like FioMask)
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                )) and (UpCase(Persons.Fio) like FioMask)
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  )) and (UpCase(Persons.Fio) like FioMask)
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    )) and (UpCase(Persons.Fio) like FioMask)
                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      )) and (UpCase(Persons.Fio) like FioMask)
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      )) and (UpCase(Persons.Fio) like FioMask)
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          )) and (UpCase(Persons.Fio) like FioMask)
                         and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          )) and (UpCase(Persons.Fio) like FioMask)
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          )) and (UpCase(Persons.Fio) like FioMask)
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          )) and (UpCase(Persons.Fio) like FioMask)
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            )) and (UpCase(Persons.Fio) like FioMask)
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив
*/
//    //HR-327
//    _loop tmpPersons
//      _loop CasePsn where (( tmpPersons.nRec == CasePsn.cPsn ))
//        if ((UpCase(CasePsn.PsnD) like FioMask) and not (tmpPersons.FIO = CasePsn.PsnD))
//        {
//          set tmpPersons.FIO := tmpPersons.FIO + ' (' + CasePsn.PsnD + ')';
//          update current tmpPersons;
//        }

    //HR-327
//    _loop tmpPersons
//      if GetFirst PersFio where (( tmpPersons.nRec == PersFio.OldnRec )) = TsOk
//      {
//        set tmpPersons.FIO := tmpPersons.FIO + ' (' + PersFio.OldFio + ')';
//        update current tmpPersons;
//      }
    Filter;
    if ( not bAccessDep )
      if ( iCountNoAccess = 1 )
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'сотрудника ' + sFIO + '!' + chr(13) +
                ''#3'Данный сотрудник отображаться не будет.', Information);
      else
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
                ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }

  //Подразделение + ФИО
  if(IsFltDep and IsFltFio)
  {
    StatPers:=PreStatPers;
/*
    var FioMask:string='%'+Trim(UpCase(PreFltPersonsFio))+'%';
    //попробуем иначе
//******************************************************************************
    mtClear(#PersFio, mfNormal);
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      '',
      0
    From
      Persons
//    where CheckFioExtended(Persons.nRec, Persons.Fio, FioMask)//(UpCase(Persons.Fio) like FioMask)
    where (UpCase(Persons.Fio) like FioMask)
    ignore_errors (tsDuplicateKey);

//******************************************************************************
//старые фио
    insert into PersFio
    select
      Persons.NRec,
      Persons.IsEmployee,
      Persons.AppDate,
      Persons.DisDate,
      CasePsn.PsnV,
      CasePsn.cPsn
    From
      CasePsn,
      Persons
//    where CheckFioExtended(Persons.nRec, Persons.Fio, FioMask)//(UpCase(Persons.Fio) like FioMask)
    where ((CasePsn.cPsn == Persons.nRec)) and (UpCase(CasePsn.PsnV) like FioMask)
    ignore_errors (tsDuplicateKey);
//******************************************************************************
*/
    FillTmpPersFio;

    if StatPers = 8 // архив
    { 
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'Х' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == PerSons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else

    if StatPers = 2 // архив
    {
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and date(0, 0, 0) /== PersFio.DisDate // работающие
                and PersFio.nRec == Persons.nRec
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
//               and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and date(1, 1, 1900) << PersFio.DisDate // уволенные
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'К' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where ((0 == tpDept.Pr
                and 'Ф' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                and PersFio.nRec == Persons.nRec
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
//                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            tpDept, PersFio, Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                  and date(1, 1, 1900) << PersFio.DisDate // уволенные
                  and PersFio.nRec == Persons.nRec
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
//                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                    and date(0, 0, 0) << PersFio.DisDate // уволенные
                    and PersFio.nRec == Persons.nRec
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
//                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                      and ZeroDate /== PersFio.DisDate // не уволенные
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
//                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                tpDept, PersFio, Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                      and LocalDate <<= PersFio.DisDate
                      and PersFio.nRec == Persons.nRec
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
//                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  tpDept, PersFio, Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                          and ZeroDate  /== PersFio.DisDate // работающие
                          and LocalDate >>= PersFio.AppDate
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                         and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where ((0 == tpDept.Pr
                and 'С' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where ((0 == tpDept.Pr
                and 'У' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                          and LocalDate <<= PersFio.DisDate
                          and LocalDate >>= PersFio.AppDate (NoIndex)
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where ((0 == tpDept.Pr
                and 'К' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                          and PersFio.nRec == Persons.nRec
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
//                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      tpDept, PersFio, Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where ((0 == tpDept.Pr
                and 'Ф' /== PersFio.IsEmployee
                and tpDept.nRec /== PersFio.Dept
                            and PersFio.nRec == Persons.nRec
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
//                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            and CheckLimitsDept(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив

//    //HR-327
//    _loop tmpPersons
//      _loop CasePsn where (( tmpPersons.nRec == CasePsn.cPsn ))
//        if ((UpCase(CasePsn.PsnD) like FioMask) and not (tmpPersons.FIO = CasePsn.PsnD))
//        {
//          set tmpPersons.FIO := tmpPersons.FIO + ' (' + CasePsn.PsnD + ')';
//          update current tmpPersons;
//        }

    //HR-327
//    _loop tmpPersons
//      if GetFirst PersFio where (( tmpPersons.nRec == PersFio.OldnRec )) = TsOk
//      {
//        set tmpPersons.FIO := tmpPersons.FIO + ' (' + PersFio.OldFio + ')';
//        update current tmpPersons;
//      }
    Filter;
    if ( not bAccessDep )
      if ( iCountNoAccess = 1 )
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'сотрудника ' + sFIO + '!' + chr(13) +
                ''#3'Данный сотрудник отображаться не будет.', Information);
      else
        message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
                ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
                ''#3'Отображаться такие сотрудники не будут.', Information);
    exit;
  }
  //стандартное пока закрываю
  exit;

  // сначала надо проверить какие сейчас стоят ограничения на Персонс (текущие\работающие\архив)
  if StatPers = 2 // архив
  {
    #FillFieldsTmpTablePersons
        '',  // не бывает действующего совмещения у архивной карточки
        0,
        0
      From
        Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
      where (('У' /== Persons.IsEmployee
              and Persons.AppointLast == Appointments.nRec
              #SimilarConditionsForSelect
              ))
              and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
              ignore_errors (tsDuplicateKey);
  }
  else
  {
    if ( StatPers <> 4 and StatPers <> 5 and StatPers <> 6 and StatPers <> 7)
    {
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
               and date(0, 0, 0) /== Persons.DisDate // работающие
                and Persons.AppointCur == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
               and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
               ignore_errors (tsDuplicateKey);
    }

    if StatPers = 3 // все
    {
      // значит, закачать еще и архив и уволенных, но текущих
      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('У' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
      // текущие
      #FillFieldsTmpTablePersons
         TmpSovm.TabN,
         0,
         0
        From
          Persons, Appointments, Catalogs
          , Catalogs Catalogs2, KlKatego
          , TmpSovm
        where (('С' /== Persons.IsEmployee
                and date(1, 1, 1900) << Persons.DisDate // уволенные
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                and Persons.nRec == TmpSovm.cPsn
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('К' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);

      #FillFieldsTmpTablePersons
          '',  // не бывает действующего совмещения у архивной карточки
          0,
          0
        From
          Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
        where (('Ф' /== Persons.IsEmployee
                and Persons.AppointLast == Appointments.nRec
                #SimilarConditionsForSelect
                ))
                and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                ignore_errors (tsDuplicateKey);
    }
    else
    {
      // теперь, если "текущие", то надо еще уволенных сюда
      if StatPers = 1// текущие
      {
        #FillFieldsTmpTablePersons
           TmpSovm.TabN,
           0,
           0
          From
            Persons, Appointments, Catalogs
            , Catalogs Catalogs2, KlKatego
            , TmpSovm
          where (('С' /== Persons.IsEmployee
                  and date(1, 1, 1900) << Persons.DisDate // уволенные
                  and Persons.AppointLast == Appointments.nRec
                  #SimilarConditionsForSelect
                  and Persons.nRec == TmpSovm.cPsn
                  ))
                  and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                  ignore_errors (tsDuplicateKey);
      } // текущие
      else
      {
        if ( StatPers = 4 ) //  "Уволенные"
        {
          #FillFieldsTmpTablePersons
            TmpSovm.TabN,
            0,
            0
            From
              Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
            where (('С' /== Persons.IsEmployee
                    and date(0, 0, 0) << Persons.DisDate // уволенные
                    and Persons.AppointLast == Appointments.nRec
                    #SimilarConditionsForSelect
                    and Persons.nRec == TmpSovm.cPsn
                    ))
                    and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                    ignore_errors (tsDuplicateKey);
        }
        else
        {
          if StatPers = 0 // работающие и принятые будущим периодом
          {
            var LocalDate: date;
            LocalDate := dDateFiltr;

            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and ZeroDate /== Persons.DisDate // не уволенные
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
            #FillFieldsTmpTablePersons
                TmpSovm.TabN,
                0,
                0
              From
                Persons, Appointments, Catalogs
                , Catalogs Catalogs2, KlKatego
                , TmpSovm
              where (('С' /== Persons.IsEmployee
                      and LocalDate <<= Persons.DisDate
                      and Persons.AppointLast == Appointments.nRec
                      #SimilarConditionsForSelect
                      and Persons.nRec == TmpSovm.cPsn
                      ))
                      and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                      ignore_errors (tsDuplicateKey);
          }
        else  // работающие на дату
        {
          if StatPers = 5
          {
            if (day(dDateFiltr) <> 0)
            {
              var LocalDate: date;
              LocalDate := dDateFiltr;

              #FillFieldsTmpTablePersons
                   TmpSovm.TabN,
                   0,
                   0
                From
                  Persons, Appointments, Catalogs
                  , Catalogs Catalogs2, KlKatego
                  , TmpSovm
                where (('С' /== Persons.IsEmployee
                          and ZeroDate  /== Persons.DisDate // работающие
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointCur == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                         and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                         ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('С' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);

                #FillFieldsTmpTablePersons
                    TmpSovm.TabN,
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs
                    , Catalogs Catalogs2, KlKatego
                    , TmpSovm
                  where (('У' /== Persons.IsEmployee
                          and LocalDate <<= Persons.DisDate
                          and LocalDate >>= Persons.AppDate (NoIndex)
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          and Persons.nRec == TmpSovm.cPsn
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              } // if (day(dDateFiltr) <> 0)
            }
            else
            {
              if StatPers = 6
              {
                #FillFieldsTmpTablePersons
                    '',  // не бывает действующего совмещения у архивной карточки
                    0,
                    0
                  From
                    Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                  where (('К' /== Persons.IsEmployee
                          and Persons.AppointLast == Appointments.nRec
                          #SimilarConditionsForSelect
                          ))
                          and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                          ignore_errors (tsDuplicateKey);
              }
              else
              {
                if StatPers = 7
                {
                  #FillFieldsTmpTablePersons
                      '',  // не бывает действующего совмещения у архивной карточки
                      0,
                      0
                    From
                      Persons, Appointments, Catalogs, Catalogs Catalogs2, KlKatego
                    where (('Ф' /== Persons.IsEmployee
                            and Persons.AppointLast == Appointments.nRec
                            #SimilarConditionsForSelect
                            ))
                            and CheckLimits(Persons.nRec, Persons.Department, bAccessDep, iCountNoAccess, Persons.FIO, sFIO)
                            ignore_errors (tsDuplicateKey);
                }
              }
            }
          }
        }
      }
    }
  } // не архив

  if ( not bAccessDep )
    if ( iCountNoAccess = 1 )
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'сотрудника ' + sFIO + '!' + chr(13) +
              ''#3'Данный сотрудник отображаться не будет.', Information);
    else
      message(''#3'У вас нет прав доступа для просмотра текущих подразделений' + chr(13) +
              ''#3'некоторых сотрудников, выбранных в фильтре!' + chr(13) +
              ''#3'Отображаться такие сотрудники не будут.', Information);
} // Procedure FullFilling;

procedure SetApprTitle;
  var sDeptName: String;
{
  // Находим правильное имя подразделения
  if (cDepSelect = 0)
    sDeptName := '';
  else
  {
    PushPos(#Catalogs);

    if (GetFirst Catalogs where (( cDepSelect == Catalogs.NRec )) = tsOk)
      sDeptName := Catalogs.Name;
    else
      sDeptName := '';

    PopPos(#Catalogs);
  }

  var sTitle: string;

  if (sDeptName = '')
    sTitle := sCurWinName;
  else
    sTitle := sDeptName + ': ' + LoCase(SubStr(sCurWinName, 1, 1)) + SubStr(sCurWinName, 2, Length(sCurWinName) - 1);

  if (wExistTree = 1) and (wTypeView = 1)
    sTitle += ' [*]'; // Индикатор работы "под родителя"

  if (boGetTune('UP.Staff.Reception.Count'))
  {
    GetCountPersons; // Подсчет количества персон
    sTitle += ' ( ' + string(RecordsInTable(#tmpPersons)) + '/ ' + string(_countAllPers) + ' )';
  }

  SetTitle(sTitle);
} // procedure SetApprTitle

// Добавлен новый сотрудник
procedure OnInsertedPerson;
{
   countAllPers := countAllPers + 1;
   _countAllPers := _countAllPers + 1;
   SetApprTitle;
}
// Уменьшаем общее количество сотрудников
procedure OnDeletedPerson;
{
  countAllPers := countAllPers - 1;
  _countAllPers := _countAllPers - 1;
  SetApprTitle;
}

Procedure RunFoto;
{
  if (not CheckRight2ViewPhotos)                                //HR303
    Message(''#3'Нет прав на просмотр фотографий', Information) //HR303
  else if (not isValid(#Appendix))
    Message(''#3'Фотография отсутствует!', Information)
  else
    RunWindow(winPhoto);
} // Procedure RunFoto
//******************************************************************************
Procedure ReInittmpPersons(cNRec: comp);
{
  //Появился новый сотрудник
  if (getfirst MyPers where ((cNRec == MyPers.nRec)) = tsOk)
  { //Если сотрудник удовлетворяет условиям фильтра, поднимаем его в память...
    // Проверим фильтр
    //подразделение
    if (PreDeptCount > 0)
      if (not foundMarker(DeptMarker, MyPers.Department))
      {
        abort;
        exit;
      }
//------------------------------------------------------------------------------
    //табельный
    if (IsFltTab)
      if (Longint(Trim(PreFltPersonsTab)) <> MyPers.TabNmb)
      {
        abort;
        exit;
      }
//------------------------------------------------------------------------------
    //Фио
    if (IsFltFio)
      if (Pos(Trim(UpCase(PreFltPersonsFio)),UpCase(MyPers.Fio)) = 0)
      {
        abort;
        exit;
      }
//------------------------------------------------------------------------------
    //Разграничение доступа
    //Нет доступа к подразделению
    if bDepartmentLock
      if (PreDeptCount = 0)
        if not VuserAcs.Exists(MyPers.Department)
        {
          abort;
          exit;
        }
//------------------------------------------------------------------------------
    //Если сотрудник уже есть, то позиционируемся на него, добавлять ничего не надо
      if getfirst tmpPersons where (( MyPers.Nrec == tmpPersons.Nrec )) = tsOk
      {
        ReReadRecord(tntmpPersons);
        ReReadRecord(tnPersons);
        exit;
      }
//------------------------------------------------------------------------------
    //Еще надо проверить: отображаются ли сейчас работающие
    if PreStatPers = 2
    {
      if (message(chr(3) + 'Новая запись: ' + MyPers.FIO +
                  chr(13) + chr(3) + 'не удовлетворяет условиям фильтра картотеки: архив!' +
                  chr(13) + chr(3) + 'Оставить запись для дальнейшей работы?', Warning + YesNo) <> Yes)
      {
        abort;
        exit;
      }
    }
    InsertInto_tmpPersons;
    LastTmpPersCount++;
    ReReadRecord(tntmpPersons);
    ReReadRecord(tnPersons);
  } //if (getfirst MyPers where ((cNRec == MyPers.nRec)) = tsOk)
} //Procedure ReInittmpPersons(cNRec: comp);
//******************************************************************************
//extendFormats winCommonData;        !!!! Думала к каждой странице 1..14 добавить новый тулбар, но в таком виде не компилится
window winCommonData ;//'1. Общие сведения'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winEducation ;// '2. Сведения об образовании'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winServLen;// '3. Анкетные данные, стаж'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winPsnLinks ;//'4. Семейное положение'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winConscription; //'5. Сведения о воинском учете'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winAppointments ;//'6. Сведения о работе на предприятии'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winVacations;// '7. Сведения об отпусках и неявках'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winExperience ;//'8. Сведения о трудовой деятельности работника'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winDopTbls;// '10. Дополнительные таблицы'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winPenStaj;// '11. Пенсионный стаж'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winCompetence;// '12. Компетенции'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winBankDetails ;//'13. Банковские реквизиты, ФСС'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;
window winOrders;// '14. Приказы'
  toolbar Z_STAFF:: tlbrReceptionMainWinExtention;//VAA
end;

window wnPrFlt 'Предварительный фильтр на картотеку' EscClose;
  show at (,, 78, 14);
screen scrPreFltFields 'Фильтр на картотеку' (,, sci1Esc);
  show at (,,, 11);
  fields
    // wFltPre ('Установить фильтр подразделение/табельный'): NoProtect;
    PreFltDepartment ('Выбранное подразделение',, sci13Esc): Protect, PickButton;
    PreFltPersonsTab ('Табельный сотрудника',, sci13Esc): NoProtect, NoPickButton;
    PreFltPersonsFio ('ФИО сотрудника',, sci13Esc): NoProtect, NoPickButton;
    PreFltPersonsBornDate ('Дата рождения',, sci13Esc): NoProtect;
    PreFltPassSnils ('СНИЛС'): NoProtect, {InputMask = NmbTmpS};
    stNmbTmpS: skip;
    PreFltPassSer ('Серия паспорта', hcStaffPassportsSer): NoProtect, { InputMask = SerTmp };
    stSerTmp: skip;
    PreFltPassNmb ('Номер паспорта', hcStaffPassportsNmb): NoProtect, { InputMask = NmbTmp };
    stNmbTmp: skip;
    PreFltPersonsKat ('Категория персонала',, sci13Esc): Protect;
    PreFltJobChar ('Характер работы',, sci13Esc): Protect;
    PreFltJobType ('Вид работы',, sci13Esc): Protect;
    PreStatPers('База для просмотра: работающие, текущие, архив'):
            [list 5 'работающие на дату',
                  0 'работающие и принятые будущим периодом',
                  1 'текущие',
                  2 'архив',
                  3 'вся картотека',
                  4 'уволенные, не переведенные в архив',
                  6 'кандидаты',
                  7 'физические лица',
                  8 'договор аннулирован'], Protect;
    PredDateFiltr('Дата, на которую сотрудники работают'): NoProtect;
//    wTestSQL ('Тест SQL'): NoProtect;
//    wNoRegistr ('Тест Регистра'): NoProtect;
//    wStartFind ('Тест начала строки'): NoProtect;
<<
   `Фильтры по:`
    `подразделению`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `табельный    `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `ФИО          `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Дата рождения`  .@@@@@@@@@@
    `СНИЛС`          .@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Серия паспорта` .@@@@@@.@@@@@@@@@@@@ `Номер`.@@@@@@.@@@@@@@@@@@
    `Категория    `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Характер работы`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Вид работы     `.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   `База для просмотра:  `  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@
!    [:] SQL` [:] Регистр` [:] с начала строки`
>>

end;
screen scrPreFltButtons;
  show at (, 12,,);
buttons
  cmOk, default,, 'Установка фильтра',, scStaffForButton;
  cmClose,,, 'Отмена',, scStaffForButton;
<<
    <. ~П~родолжить .>                                   <.   Отмена   .>
>>
end;

HandleEvent

cmInit:
{
  var strEmpty: string = '';
  GetTemplates(NameDocCat.CatData, Passports.Ser, Passports.NMB, SerTmp, NmbTmp);
  GetTemplates(NameDocCat2.CatData, Passports.Ser, Passports.NMB, strEmpty, NmbTmpS);
  if not (IsAgain)
  {
    set wFltPre:=0;
    set wTestSQL:=0;
    set wNoRegistr:=0;
    set wStartFind:=0;
    set PreFltPersonsTab:='';
    set PreFltPersonsFio:='';
    set PreStatPers:=3;
    set PredDateFiltr:=Cur_Date;
//    set KlKatego.NaiKat := '';
//    set JobNatureCat.Name := '';
    DeptMarker:=InitMarker('CommonFiltr_DeptMarker', 8, 200, 10);
    ClearMarker(DeptMarker);
    PreDeptCount := 0;
    FltDept := 0;
    var iter: integer;
    KatTypes[1] := 'все значения';
    JobChar[1] := 'все значения';
    JobTypes[1] := 'все значения';
    coKatTypes[1] := 0;
    coJobChar[1] := 0;
    coJobTypes[1] := 0;
    iter := 2;
    _loop KLKATEGO
    {
      KatTypes[iter] := KLKATEGO.NAIKAT;
      coKatTypes[iter] := KLKATEGO.NREC;
      iter++;
    }
    iter := 2;
    if getfirst fastfirstrow Catalogs where (( -12 == Catalogs.SysCode )) = tsOk
    {
        _loop JobNatureCat where (( 0 == JobNatureCat.lpr and Catalogs.NRec == JobNatureCat.MainLink ))
        {
          JobChar[iter] := JobNatureCat.Name;
          coJobChar[iter] := JobNatureCat.nRec;
          iter++;
        }
    }
    iter := 2;
    _loop KLSOVM 
    {
      JobTypes[iter] := KLSOVM.NSOVM;
      coJobTypes[iter] := KLSOVM.NREC;
      iter++;
    }
    SetEnumList(scrPreFltFields, #PreFltJobType, JobTypes);
    SetEnumList(scrPreFltFields, #PreFltJobChar, JobChar);
    SetEnumList(scrPreFltFields, #PreFltPersonsKat, KatTypes);
    set PreFltPersonsKat := KatTypes[1];
    set PreFltJobChar := JobChar[1];
    set PreFltJobType := JobTypes[1];
  }
  // ToggleFieldVisible(#PreFltPersonsTab, false);
  // ToggleFieldVisible(#PreFltPersonsFio, false);
  // ToggleFieldVisible(#PreFltDepartment, false);
  //ToggleFieldVisible(#StaffStruct.LongName, false); //HR380, FIM
  //ToggleFieldVisible(#Persons.BornDate, false); //HR392, FIM
  //ToggleFieldVisible(#Passports.Nmb, false);    //HR392, FIM
}

cmOk:
{
  if(PreDeptCount = 0 and Trim(PreFltPersonsTab) = '' and Trim(PreFltPersonsFio) = '' and
     PreFltPersonsBornDate = ZeroDate and PreFltPassSnils = '' and PreFltPassSer = '' and PreFltPassNmb = '')
  {
    Message('Заполните одно из обязательных полей! Подразделение, табельный номер или ФИО');
    exit;
  }
  // if(wFltPre=0)
  // {
  //   Message('Задайте фильтр!');
  //   exit;
  // }
  // if((wFltPre and Word(1)) = 1)
  // {
    // if(PreDeptCount=0)
    // {
    //   Message('Укажите подразделение!');
    //   exit;
    // }
  // }
  // if((wFltPre and Word(2)) = 2)
  // {
    // if(Trim(PreFltPersonsTab)='')
    // {
    //   Message('Укажите табельный номер!');
    //   exit;
    // }
  // }
  // if((wFltPre and Word(4)) = 4)
  // {
    // if(Trim(PreFltPersonsFio)='')
    // {
    //   Message('Укажите ФИО!');
    //   exit;
    // }
  // }
  CloseWindowEx(wnPrFlt, cmDefault);
}

cmPick:
{
  case CurField of

    #PreFltDepartment:
    {
      PreSelectPodr;
      ReReadRecord(#CatalogsFlt)
    }
  end;
}

end;

end;

function BrSets(wArg: word): boolean;
{
  BrSets := true;
  case wArg of
    0:
    {
      sCurWinName := 'Работающие сотрудники';
      iMode := icStaffWrkPersons;
    }
    1:
    {
      sCurWinName := 'Все сотрудники, не переведенные в архив';
      iMode := icStaffWrkDisPersons;
    }
    2:
    {
      sCurWinName := 'Сотрудники из архива';
      iMode := icStaffArcPersons;
    }
    3:
    {
      sCurWinName := 'Все сотрудники из картотеки';
      iMode := icStaffArcPersons;
    }
    4:
    {
      sCurWinName := 'Уволенные сотрудники, не переведенные в архив';
      iMode := icStaffArcPersons;
    }
    5:
    {
      sCurWinName := 'Сотрудники, работающие на дату';
      iMode := icStaffWrkPersons;
    }
    8:
    {
      sCurWinName := 'Сотрудники, у которых аннулирован трудовой договор';
      iMode := icStaffWrkPersons;
    }
    else
    {
      sCurWinName := 'Работающие сотрудники';
      iMode := icStaffWrkPersons;
    }
  end;
} // function BrSets

procedure ReceptionInit;
{
  bRWayInclude := CheckRWayInclude;
  IsRecWinAuto := true;
  IntInit;
  SaveMyDsk('RECEPTIONMAIN', 'ComFiltr_NameRunInterface');
  UserNameMain := UserName();
  set sIdUser := string(UserId);
  bDepartmentLock := (boGetTune('UP.STAFF.LOCK')); // разграничение прав доступа к подразделениям
  nAccDepartment := 0; // количество доступных подразделений

  if bDepartmentLock // если стоит разграничение, значит, набьем маркер сразу в целях
  {
    if not GetVipRef(VuserAcs, 'UserDepartmentsIterator')
    {
      Message('Не найден интерфейс разграничения прав доступа UserDepartmentsIterator.', Information);
      exit;
    }

    FillAccDepartment; // ускорения последующих перегрузок
  }
  else
  {
    mtClear(#tpDept, mfNormal);
    var cParentSe:comp
    if GetFirst CatalogsTmp where ((-11 == CatalogsTmp.SysCode)) = TsOk
      cParentSe:=CatalogsTmp.nRec

    insert into tpDept
    select
      Catalogs.NRec,
      0
    From
      Catalogs
    where ((0 == Catalogs.Lpr and cParentSe == Catalogs.MainLink))
    ignore_errors (tsDuplicateKey);
  }
  if (not isValid(#stafUserReceptMain))
  {
    ClearBuffer(#stafUserReceptMain);
    stafUserReceptMain.StUser := UserNameMain;
    stafUserReceptMain.wDop1 := 0;
    stafUserReceptMain.AFlt := 0;
    stafUserReceptMain.CurStr := 0;
    if (insert current stafUserReceptMain <> tsOk){};
  }
/*
  if (boGetTune('UP.Staff.Reception.Count'))
  {
    // Подсчет количества персон
    countAllPers := 0;
    countWorkPers := 0;
    countRedunPers := 0;

    _countAllPers := 0;
    _countWorkPers := 0;
    _countCurPers := 0;
    _countRedunPers := 0;
    _countPersK := 0;
    _countPersF := 0;
    // теперь пройдемся по персонам, чтобы отсечь обход студентов и
    // не утвержденных приказов
    // архив
    _loop MyPers where (( 'У' == MyPers.IsEmployee ))
    {
      //С учетом разграничения прав доступа к подразделениям
      if bDepartmentLock
        if not VuserAcs.Exists(MyPers.Department)
          continue; // нет доступа

      countRedunPers++;
      _countRedunPers++;
    }
    // текущие
    _loop MyPers where (( 'С' == MyPers.IsEmployee ))
    {
      //С учетом разграничения прав доступа к подразделениям
      if bDepartmentLock
        if not VuserAcs.Exists(MyPers.Department)
          continue; // нет доступа

      if (MyPers.DisDate = ZeroDate)
      {
        countWorkPers++; // работающие
        _countWorkPers++; // работающие
      }

      countCurPers++; // текущие
      _countCurPers++; // текущие
    }

    _loop MyPers where (( 'К' == MyPers.IsEmployee ))
    {
      //С учетом разграничения прав доступа к подразделениям
      if bDepartmentLock
        if not VuserAcs.Exists(MyPers.Department)
          continue; // нет доступа

      _countPersK++;
    }
    //
    _loop MyPers where (( 'Ф' == MyPers.IsEmployee ))
    {
      //С учетом разграничения прав доступа к подразделениям
      if bDepartmentLock
        if not VuserAcs.Exists(MyPers.Department)
          continue; // нет доступа

      _countPersF++;
    }

    countAllPers := countCurPers + countRedunPers;
    _countAllPers := _countCurPers + _countRedunPers + _countPersK + _countPersF;
  }
*/

  if (boGetTune('UP.Staff.Reception.Count'))
  {
    // Подсчет количества персон
    countAllPers := 0;
    countWorkPers := 0;
    countRedunPers := 0;

    _countAllPers := 0;
    _countWorkPers := 0;
    _countCurPers := 0;
    _countRedunPers := 0;
    _countPersK := 0;
    _countPersF := 0;
    // теперь пройдемся по персонам, чтобы отсечь обход студентов и
    // не утвержденных приказов
    // архив
    _loop MyPers
    {
      //С учетом разграничения прав доступа к подразделениям
      if bDepartmentLock
        if not VuserAcs.Exists(MyPers.Department)
          continue; // нет доступа

      Case MyPers.IsEmployee of
        'У':
           {
             countRedunPers++;
             _countRedunPers++;
           }
        'С':
           {
             if (MyPers.DisDate = ZeroDate)
             {
               countWorkPers++; // работающие
               _countWorkPers++; // работающие
             }
             countCurPers++; // текущие
             _countCurPers++; // текущие
           }
        'К':
           {
             _countPersK++;
           }
        'Ф':
           {
             _countPersF++;
           }
      else
        continue;
      end;
    }
    countAllPers := countCurPers + countRedunPers;
    _countAllPers := _countCurPers + _countRedunPers + _countPersK + _countPersF;
  }

//**********************
  IsFltDep:=false;
  IsFltTab:=false;
  IsFltFio:=false;
  IsFltBornDate:=false;
  IsFltPassSnils:=false;
  IsFltPass:=false;
  IsInitOk:=true;
  if(RunWindowModal(wnPrFlt)=cmDefault)
  {
    if(PreFltDepartment != 'не установлен')
    {
      IsFltDep:=true;
    }
    if(PreFltPersonsTab != '')
    {
      IsFltTab:=true;
    }
    if(PreFltPersonsFio != '')
    {
      IsFltFio:=true;
    }
    if(PreFltPersonsBornDate != ZeroDate)
    {
      IsFltBornDate:=true;
    }
    if(PreFltPassSnils != '')
    {
      IsFltPassSnils:=true;
    }
    if(PreFltPassSer != '' and PreFltPassNmb != '')
    {
      IsFltPass:=true;
    }
  }
  else
  {
    IsInitOk:=false;
//    CloseInterface(cmCancel);
  }

//**********************
  bNewFlt := false;
  WndCurrent := 0;
  cDepLink  := 0;

  if GetFirst FastFirstRow Catalogs where ((-epStaffDepartment == Catalogs.SysCode)) = tsOk
    cDepLink := Catalogs.NRec;

  if (cDepLink = 0)
    message(chr(3) + 'Не найден каталог единиц штатного расписания.' + chr(13) +
      chr(3)+'В сообщениях Зарплате не будет указываться подразделение.',
      OkButton+Warning);
  // навесить сортировку по умолчанию
  iSort := 1;
  SetColumnSorting( -1, #tmpPersons.FIO, 1);

  if ( not ReadMyDsk(wFiltr, 'ReceptionMain_wFiltr', false) )
    wFiltr := 0;

//  CFC.ppFiltr := wFiltr;
//  StatPers := CFC.GetPersonsState;
//  DeptCount := CFC.GetDeptCount;

//  CFC.ppFiltr := wFiltr;
  StatPers := PreStatPers;
  DeptCount := PreDeptCount;

  if (DeptCount = 1)// and (CFC.ppFiltr = 0)
  {
    var tmpComp: comp;
    tmpComp:= FltDept; //CFC.GetMarkedDepartment; //по одному подразделению
    stafUserReceptMain.CurStr:= tmpComp;
  }
  else
    stafUserReceptMain.CurStr:= 0;//считаем, что по всем подразделениям

  cDepSelect := stafUserReceptMain.CurStr;
  set stafUserReceptMain.wDop1:= StatPers;
  if (update current stafUserReceptMain <> tsOk){};

//  PsnCount := CFC.GetPsnCount;

  wShowHideFields := 0;
  bAddNewField := false;

  if ( getfirst StaffSet = tsOK )
    wShowHideFields := StaffSet.SeqNmb;

  if ( ( wShowHideFields and 1 ) > 0 )
    if ( ( wShowHideFields and 2 ) > 0 )
      if ( ( wShowHideFields and 4 ) > 0 )
        if ( ( wShowHideFields and 8 ) > 0 )
          bAddNewField := true;

  var v1, v2, v3, v4: word;
  VersionGet(false, 'Z_StaffAddFirst', v1, v2, v3, v4);

  if ( v1 = 0 and v2 = 0 and v4 < 1 )
    ClearFieldState(#tmpPersons.sSovmTabN, sfVisible);
  else
    FillTabSovm; // наполнить временную по совместителям
  //теперь набиваем временную таблицу работников

  FillTmpPresons;

  bMMM := BrSets(StatPers);
  SetApprTitle;

  bUsePersAccess := boGetTune('UP.STAFF.RECEPTION.Access'); //Взять значение из настройки

  if (getfirst tmpPersons <> tsOk){};
  // скрыть не адекватный табельный
  if wGetTune('FormatClockNumber') = 0
    ClearFieldState(#tmpPersons.StrTabN, sfVisible);
  else
    ClearFieldState(#tmpPersons.TabNmb, sfVisible);
  // разделяемая ссылка
  BindEvent(OnDeleteRecTmpPerson, vPersCh.OnDeleteRecTmpPerson);
  // получаем сообщения в картотеку
  GetVipRef(Notifier, 'ReceptNotify');
  BindEvent(ReceiveIntoRecept, Notifier.OnChanged);
  ShowHideFields;
  //проверим права и если потребуется вырубим пункт меню "Печать отчета по сотруднику ..."
  var wUsePersAccess : word;

  if bUsePersAccess
  {
    // пройдем по всем окнам картотеки, если хотя бы в одном нет прав - вырубаем пункт меню
    var i: word;
    for (i := 1; i <= 14; i++)
    {
      wUsePersAccess := VPerAccess.GetAccessMask(i);

      case i of
        1: wUsPersAccess_1 := wUsePersAccess;
        2: wUsPersAccess_2 := wUsePersAccess;
        3: wUsPersAccess_3 := wUsePersAccess;
        4: wUsPersAccess_4 := wUsePersAccess;
        5: wUsPersAccess_5 := wUsePersAccess;
        6: wUsPersAccess_6 := wUsePersAccess;
        7: wUsPersAccess_7 := wUsePersAccess;
        8: wUsPersAccess_8 := wUsePersAccess;
        9: wUsPersAccess_9 := wUsePersAccess;
        10: wUsPersAccess_10 := wUsePersAccess;
        11: wUsPersAccess_11 := wUsePersAccess;
        12: wUsPersAccess_12 := wUsePersAccess;
        13: wUsPersAccess_13 := wUsePersAccess;
        14: wUsPersAccess_14 := wUsePersAccess;
      end;

    } //for (i := 1; i < 12; i++)

    //Запрещен просмотр
    if (not VPerAccess.PrintAccess)
      DisableCommand(cmPrintDoc);

    if (wUsPersAccess_1 and 2) <> 2 // разрешен только просмотр
    {
      DisableCommand(cmDelete);
      DisableCommand(cmStaffEmplInsert);
    }
  } // if bUsePersAccess

  wExistTree := wGetTune('UP.Staff.Reception.Format.Main');
  // теперь проверить, а нужен ли встраиваемый интерфейс. Может, ну его вообще
  bExistBM := false;

  if LoadImplementationListByUniquePrefix('ReceptAddWindow_')
  {
    var i, numberOf: word;
    numberOf := GetImplementationCount;

    if (numberOf > 0) // есть хотя бы один плагин
    {
      var RAW: IReceptAddWindow;
      // теперь проверим а есть ли хоть один доступный, т.к. знания, что
      // есть плагины недостаточно. Ведь одни нужны для ШН, другие для списка
      for(i := 0; i < numberOf; inc(i))
      {
        LoadVipRef(RAW, GetImplementationName(i));

        if RAW.GetAbilityForShow(wExistTree)
        {
          bExistBM := true;
          break;
        }
      }

      if bExistBM
      {
        if not LoadVipRef(DBM, 'DummyBookMark')
        {
          Message('Не найден интерфейс реализации закладок с информацией по сотрудникам!', Error);
          abort;
          exit;
        }

        DBM.SetInputData('ReceptAddWindow_', wExistTree); // загнать точку входа
        // теперь вяжем события
        BindEvent(OnEventWorkLocal, DBM.OnEventWork); // связать динамичные события
        BindEvent(OnPositionChangePsn, DBM.OnPositionChangePsn); // связать динамичные события
      }
    }
  }

  if (wExistTree = 1) // древесный вид картотеки - ШН
  {
    FillTmpCatalogs; // набить временную по подразделениям
    var cPodr: comp;
    if (not ReadMyDsk(cPodr, 'ReceptionMain_CurPodr', false))
      TreeGetFirst(trTmpCatalogs);
    else
      if (not TreeJumpToRecord(trTmpCatalogs, cPodr))
        TreeGetFirst(trTmpCatalogs);

    if not bExistBM // нет закладок
      SetFormat(brwPersonsSecond); // грузим брауз людишек

    PushBounds(tbPersonsForTree);
    ReReadRecord(tnTmpCatalogs);
    wTypeView := 0;
    DisableCommand(cmStaffSort);
  }
  else
  {
    if not bExistBM // нет закладок
      SetFormat(brwPersons); // грузим брауз людишек
    else
    {
      BindEmbeddedInterface(mdf, DBM);// связать область с реализацией
      SetFormat(mdf);// грузим доп. скрины
    }
    DisableCommand(cmExp); // нет пока режима "отображение"
    wTypeView := 2;
  } // списочный вид
  ReReadRecord(tnTmpPersons);

  if (PersNRec <> 0)  // Обработка параметра PersNRec - открытие карточки
  {
    if (GetFirst tmpPersons where(( PersNRec == tmpPersons.NRec )) = tsOk)
      PutCommand(cmDefault);
  }
  else
  {
    if (GetFirst tmpPersons = tsOk) {}

    var cPers: comp;
    if (ReadMyDsk(cPers, 'ReceptionMain_CurPers', false))
      if (GetFirst tmpPersons where(( cPers == tmpPersons.NRec )) = tsOk) {}
  }
} // procedure ReceptionInit

//******************************************************************************
Procedure NewFiltr;
{
//**********************
  IsAgain:= true;
  IsFltDep:=false;
  IsFltTab:=false;
  IsFltFio:=false;
  IsFltBornDate:=false;
  IsFltPassSnils:=false;
  IsFltPass:=false;
  if(RunWindowModal(wnPrFlt)=cmDefault)
  {
    if(PreFltDepartment != 'не установлен')
    {
      IsFltDep:=true;
    }
    if(PreFltPersonsTab != '')
    {
      IsFltTab:=true;
    }
    if(PreFltPersonsFio != '')
    {
      IsFltFio:=true;
    }
    if(PreFltPersonsBornDate != ZeroDate)
    {
      IsFltBornDate:=true;
    }
    if(PreFltPassSnils != '')
    {
      IsFltPassSnils:=true;
    }
    if(PreFltPassSer != '' and PreFltPassNmb != '')
    {
      IsFltPass:=true;
    }
    FillTmpPresons; //набиваем временную таблицу работников
    if getfirst tmpPersons = tsOk {};
    SetApprTitle;
    ReReadRecord(#tmpPersons);
  }
//**********************
}
//******************************************************************************

Procedure CheckAndPutCommand(wEvent: word; sNameInt: string[30]);
{
  case wEvent of
    cmDefault, cmStaffDoCommonData, cmStaffDoWin1:
    {
      if (sNameInt <> 'ReceptnMain')
        RunWindow1; // запуск 1-го окна
      else
        case CurTable of
          #tmpPersons:
            RunWindow1; // запуск 1-го окна
        end;
    }

    cmDelete:
      if sNameInt <> 'ReceptnMain'
        DelOnePersonFromRecept;

    cmStaffEmplInsert:
    {
      if RunInterFace(wInsertPersons, nRecOld) = cmDefault // завели нового сотрудника
      {
        if Not NullVipRef(DBM) // если грузили закладки
        {
          DBM.SetData(wTypeView, tmpPersons.Nrec, tmpCatalogs.nRec);
          DBM.ReScan(2);
        }

        case wExistTree of
          0: //список
          {
            if GetFirst tmpPersons where ((nRecOld == tmpPersons.nRec)) = tsOk
            {
              RunWindow1;
            }
            else
              ReReadRecord(#tmpPersons); //восстановить позицию
          }
          1: // дерево
          {
            case wTypeView of
              0: // обычное дерево
              {
                if GetFirst tmpPersons where ((nRecOld == tmpPersons.nRec
                                              and tmpCatalogs.nRec == tmpPersons.Department(NoIndex))) = tsOk
                  RunWindow1
                else
                  ReReadRecord(#tmpPersons); //восстановить позицию
              }
              1: // под родителя
              {
                if GetFirst tmpPersons where ((nRecOld == tmpPersons.nRec
                                                and tmpCatalogs.nRec == tmpPersons.DepartmentDeep(NoIndex))) = tsOk
                  RunWindow1
                else
                  ReReadRecord(#tmpPersons); //восстановить позицию
              }
            end;
          }
        end;
      }

      ReReadRecord(#tmpPersons);
    } //cmStaffEmplInsert:

    cmStaffDoWin2:
      RunWindow2;

    cmStaffDoWin3:
      RunWindow3;

    cmStaffDoWin4:
      RunWindow4;

    cmStaffDoWin5:
      RunWindow5;

    cmStaffDoWin6:
      RunWindow6;

    cmStaffDoWin7:
      RunWindow7;

    cmStaffDoWin8:
      RunWindow8;

    cmStaffDoWin9:
    {
      if sNameInt <> 'ReceptAddWindow_1'
      {
        RunWindow9;
      }
      else // отложенное событие отсюда просто не вызывается!
      {
        var cLschet: comp;
        cLschet := 0;
        if MLFP.GetMainLschet(tmpPersons.Nrec, cLschet)
        {
          if GetFirst LSchetTabN where ((cLschet == LSchetTabN.nRec)) = tsOk
          RunInterface('ZBlisNet1',LSchetTabN.nRec, LSchetTabN.Cex, p2, word(0), word(1), Persons.NRec, comp(0));
        }
        else
        {
          if boGetTune('Up.UseSalary')
          {
            Message('Для данного работника не заведен лицевой счет', Information);
          }
          else
          {
            SaveMyDsk(tmpPersons.Nrec,'Blis_Person');
            Message('В системе отсутствует модуль "Заработная плата"', Information);
          }
        }
      }
    }

    cmStartDopTables:
      RunWindow10;

    cmStaffPens:
      RunWindow11;

    cmInsertEditKN:
      RunWindow12; // компетенции

    cmStaffDoWin13: // Банковские реквизиты
      RunWindow13;

    cmStaffDoWin14: // Приказы
      RunWindow14;


    cmStaffDoWinNext: RunNextWindow;

    cmStaffDoWinPrev: RunPrevWindow;

    cmStaffSeeDopInfo: RunDopInf;

    cmPrintDoc: RunInterface(StaffPersReports, Persons.Nrec);

    cmValue59:
    {
      var PaXrBrowser: IPersonalAccountXRefsBrowserSNG;

      var cLschet: comp = 0;

      if MLFP.GetMainLschetWithNotFiz(tmpPersons.Nrec, cLschet)
      {
        if ( getfirst LSchetTabN where ((cLschet == LSchetTabN.nRec)) = tsOk )
        {
          LoadVipRef(PaXrBrowser, 'Z_Lschet::PersonalAccountXRefsBrowserSNG');

          PaXrBrowser.Bind(cLschet);
          PaXrBrowser.RunReadOnly();
        }
      }
      else
      {
        if boGetTune('Up.UseSalary')
        {
          Message('Для данного работника не заведен лицевой счет', Information);
        }
        else
        {
          Message('В системе отсутствует модуль "Заработная плата"', Information);
        }
      }
    }

    cmValue60: RunInterface(BioSprav, Persons.nRec);

    cmStaffAnalytic: RunUserRep;

    cmStaffPrSetFlt: NewFiltr;// смена фильтра

    cmStaffSort: BrSort(CurField); //сортировка

    cmNal: RunFoto;

    cmSetupReport: RunInterface(BeforeReport, tmpPersons.nRec);

    cmValue15: // копирование карточки
      RunCopy;

    cmManagerId:  RunWindowModal(wndShowHideField);

    cmValue14: RunInterface('M_MnPlan::iShowInfoAboutWorkCentre'
                            , cgKau_Persons, tmpPersons.Nrec);

! -Key------------ <Alt-C> ----------------------------
    cmPickClass:
    {
      if (UpdateTable)
        if (Persons.nrec <> 0)
          if sNameInt <> 'ReceptnMain'
            runInterface(ExClassifier, word(CoPersons), Persons.Nrec);
          else
            case CurTable of
              #tmpPersons:
                runInterface(ExClassifier, word(CoPersons), Persons.Nrec);
            end;
    }
! -Key------------ <Alt-A> ----------------------------
    cmPickAttr:
    {
      if (UpdateTable)
        if (Persons.nrec <> 0)
          if sNameInt <> 'ReceptnMain'
            runInterface(Attribute, word(CoPersons), Persons.Nrec)
          else
            case CurTable of
              #tmpPersons:
                runInterface(Attribute, word(CoPersons), Persons.Nrec);
            end;

    }

  end;
} //Procedure CheckAndPutCommand(wEvent: word);

WindowEvent wnSecond;

cmValue28:
{
  inherited:: handleEvent(cmValue28);
  SNG_fnUnLockCurr;
}

cmValue59:
  CheckAndPutCommand(CurCommand, 'ReceptnMain');

end;

HandleEvent

  cmValue28:
  {
    inherited:: handleEvent(cmValue28);
    SNG_fnUnLockCurr;
  }
  cmInit:
  {
    ReceptionInit;
    if not IsInitOk
    {
      DoneMarker(AccDepartment, ''); // освобождаем память от нашего маркера доступных подразделений
      DoneMarker(DeptMarker, '');
      ExitProc; // закрыть лог
      DoneEmbedded;
      abort;
      exit;
    }
    PutCommand(cmValue44);
    ShowToolBar('Z_STAFF::tlbrReceptionMainIED', false);
    DisableCommand(cmDelete);
    DisableCommand(cmStaffEmplInsert);
    DisableCommand(cmInsLowLevel);
  }

  cmStaffSearchPersons:
  {
    RunInterface('SNG_PersonCardSearch::PersonCardSearch');
  }

  cmStaffDoWin99: //VAA
  {
    if (not CheckRight2ViewSafety)                                           //HR303, FIM
      Message(''#3'Нет прав на просмотр вкладки "Безопасность"', Information)//HR303, FIM
    else                                                                     //HR303, FIM
      RunInterface('SNG_SafetyRecwin::SafetyRecwin', Persons.Nrec);          //HR303, FIM
  }

  cmCheckField:
  {
    case CurField of

      #wFltPre:
      {
        // Установлен фильтр по подразделениям
        if ((Word(OldFieldValue) and Word(1)) = 0) and ((wFltPre and Word(1)) = 1)
        {
          ToggleFieldVisible(#PreFltDepartment, true);
          //если стоял фильтр по табельному - снимаем, очищаем поле, закрываем
          if((wFltPre and Word(2)) = 2)
          {
             set wFltPre:=wFltPre XOR 2;
             set PreFltPersonsTab:='';
             ToggleFieldVisible(#PreFltPersonsTab, false);
          }
          //если стоял фильтр по фио - снимаем, очищаем поле, закрываем
          if((wFltPre and Word(4)) = 4)
          {
             set wFltPre:=wFltPre XOR 4;
             set PreFltPersonsFio:='';
             ToggleFieldVisible(#PreFltPersonsFio, false);
          }
        }
        // Если был снят фильтр по подразделениям
        if ((Word(OldFieldValue) and Word(1)) <> 0) and ((wFltPre and Word(1)) = 0)
        {
          ClearMarker(DeptMarker);
          PreDeptCount := 0;
          FltDept := 0;
          ToggleFieldVisible(#PreFltDepartment, false);
        }
        // Установлен фильтр по табельному
        if ((Word(OldFieldValue) and Word(2)) = 0) and ((wFltPre and Word(2)) = 2)
        {
          ToggleFieldVisible(#PreFltPersonsTab, true);
          //если стоял фильтр по подразделению - снимаем, чистим маркер, закрываем
          if((wFltPre and Word(1)) = 1)
          {
            set wFltPre:=wFltPre XOR 1;
            ClearMarker(DeptMarker);
            PreDeptCount := 0;
            FltDept := 0;
            ToggleFieldVisible(#PreFltDepartment, false);
          }
          //если стоял фильтр по фио - снимаем, очищаем поле, закрываем
          if((wFltPre and Word(4)) = 4)
          {
             set wFltPre:=wFltPre XOR 4;
             set PreFltPersonsFio:='';
             ToggleFieldVisible(#PreFltPersonsFio, false);
          }
        }
        // Если был снят фильтр по табельному
        if ((Word(OldFieldValue) and Word(2)) <> 0) and ((wFltPre and Word(2)) = 0)
        {
          set PreFltPersonsTab:='';
          ToggleFieldVisible(#PreFltPersonsTab, false);
        }
        // Установлен фильтр по фио
        if ((Word(OldFieldValue) and Word(4)) = 0) and ((wFltPre and Word(4)) = 4)
        {
          ToggleFieldVisible(#PreFltPersonsFio, true);
          //если стоял фильтр по подразделению - снимаем, чистим маркер, закрываем
          if((wFltPre and Word(1)) = 1)
          {
            set wFltPre:=wFltPre XOR 1;
            ClearMarker(DeptMarker);
            PreDeptCount := 0;
            FltDept := 0;
            ToggleFieldVisible(#PreFltDepartment, false);
          }
          //если стоял фильтр по табельному - снимаем, очищаем поле, закрываем
          if((wFltPre and Word(2)) = 2)
          {
             set wFltPre:=wFltPre XOR 2;
             set PreFltPersonsTab:='';
             ToggleFieldVisible(#PreFltPersonsTab, false);
          }
        }
        // Если был снят фильтр по фио
        if ((Word(OldFieldValue) and Word(4)) <> 0) and ((wFltPre and Word(4)) = 0)
        {
          set PreFltPersonsFio:='';
          ToggleFieldVisible(#PreFltPersonsFio, false);
        }
        //
        ReDrawPanel(#CatalogsFlt)
      }
    else
      inherited:: handleEvent(cmCheckField);
    end;
  }

cmHotKeys:
{
  var wFunRes: word;
  var iTmp, iTmp2, iTmp3, iTmp4, iTmp5, iTmp6: Longint = 0;

  //Запрещен просмотр
  if (not VPerAccess.PrintAccess)
    DisableCommand(cmPrintDoc);

  if CurTable = tnTmpPersons
  {
    iTmp := LoadMenu('Z_Staff::ReceptionMenuSNG');
    wFunRes := GetFillialPersNrec(tmpPersons.nRec);
    iTmp3 := LoadMenu('Z_Staff::ReceptionShowHideMenu');

    if ( wExistTree = 0 )
      DelMenuItem(iTmp3, 'Показать/скрыть вложенные', cmExp, '');

    ConcatMenu(iTmp,iTmp3);

    if (wFunRes > 0)
    {
      iTmp2 := LoadMenu('Z_Staff::ReceptionMenuFilial');
      ConcatMenu(iTmp, iTmp2);

      if ( wFunRes = 4 )
        SetMenuItemState(iTmp, 'Сведения из предыдущего филиала', cmValue33, mfHidden);
      else
        SetMenuItemState(iTmp, 'Сведения из предыдущего филиала', cmValue33, mfEnabled);

      if (wFunRes = 6)
      {
        SetMenuItemState(iTmp, 'Карточка следующая за переводом', cmValue35, mfEnabled);
        SetMenuItemState(iTmp, 'Карточка предшествующая переводу', cmValue34, mfEnabled);
      }
      else
        if ((wFunRes = 7) or (wFunRes = 4))
        {
          SetMenuItemState(iTmp, 'Карточка следующая за переводом', cmValue35, mfEnabled);
          SetMenuItemState(iTmp, 'Карточка предшествующая переводу', cmValue34, mfHidden);
        }
        else
          if ((wFunRes = 8) or (wFunRes = 5))
          {
            SetMenuItemState(iTmp, 'Карточка следующая за переводом', cmValue35, mfHidden);
            SetMenuItemState(iTmp, 'Карточка предшествующая переводу', cmValue34, mfEnabled);
          }
          else
          {
            SetMenuItemState(iTmp, 'Карточка следующая за переводом', cmValue35, mfHidden);
            SetMenuItemState(iTmp, 'Карточка предшествующая переводу', cmValue34, mfHidden);
          }
    }

    if (HistoryRef <> '')
    {
      iTmp6 := LoadMenu('Z_Staff::ReceptionMenuHistory');
      ConcatMenu(iTmp, iTmp6);
    }

    SetMenuItemState(iTmp, 'Отчет о неиспользованных отпусках', cmValue21,mfHidden);

    var FunArr: array [1..10] of string;
    var bFun: boolean = false;
    var i: byte = 0;

    for(i := 1; i <= 10; i++)
    {
      FunArr[i] := sGetTune('UP.STAFF.RECEPTION.Format.Alg.DopFunc' + LPadCh(string(i), '0', 2));
      if (trim(FunArr[i]) <> '')
        bFun := true;
    }

    if (bFun)
    {
      iTmp5 := CreateMenu;

      for (i := 1; i <= 10; i++)
        if (trim(FunArr[i]) <> '')
        {
          var wCommand: word = case(i; 1: cmDopMenu1, 2: cmDopMenu2, 3: cmDopMenu3, 4: cmDopMenu4, 5: cmDopMenu5,
                                       6: cmDopMenu6, 7: cmDopMenu7, 8: cmDopMenu8, 9: cmDopMenu9, 10: cmDopMenu10; 0);
          if (wCommand <> 0)
            AddMenuItemEx(iTmp5, FunArr[i], FunArr[i], hcNoContext, wCommand, 0);
        }

      AddSubMenu(iTmp, iTmp5, 'Дополнительные функции', '', hcNoContext);
    }

    if (not bRWayInclude)
      SetMenuItemState(iTmp, 'Биографическая справка', cmValue60, mfHidden);

    PutHotCommand(RunLoadMenu(iTmp));
  }

  if ( CurTable = tnTmpCatalogs )
    {
      iTmp4 := LoadMenu('Z_Staff::ReceptionTmpCatalogsMenu');
      PutHotCommand(RunLoadMenu(iTmp4));
    }
}

cmValue59:
{
  CheckAndPutCommand(CurCommand, 'ReceptnMain');
}
cmDone:
{
  DoneMarker(DeptMarker, '');
  inherited:: handleEvent(cmDone);
}
end; // HandleEvent window 1
end. // interface

ReceptionMenuSNG Menu
{
 -' ~1~. Общие сведения', cmStaffDoWin1, 'Общие сведения',
          hcStaffReceptionMenu, 'Alt+1', kbAlt1,,,,, bmpW1_16;
 -' ~2~. Сведения об образовании', cmStaffDoWin2, 'Сведения об образовании',
          hcStaffReceptionMenu, 'Alt+2', kbAlt2,,,,, bmpW2_16;
 -' ~3~. Анкетные данные, стаж', cmStaffDoWin3, 'Анкетные данные, стаж',
          hcStaffReceptionMenu, 'Alt+3', kbAlt3,,,,, bmpW3_16;
 -' ~4~. Родственники', cmStaffDoWin4, 'Родственники',
          hcStaffReceptionMenu, 'Alt+4', kbAlt4,,,,, bmpW4_16;
 -' ~5~. Сведения о воинском учете', cmStaffDoWin5, 'Сведения о воинском учете',
          hcStaffReceptionMenu, 'Alt+5', kbAlt5,,,,, bmpW5_16;
 -' ~6~. Сведения о работе на предприятии', cmStaffDoWin6, 'Назначения и перемещения',
          hcStaffReceptionMenu, 'Alt+6', kbAlt6,,,,, bmpW6_16;
 -' ~7~. Сведения об отпусках и неявках', cmStaffDoWin7, 'Сведения об отпусках и неявках',
          hcStaffReceptionMenu, 'Alt+7', kbAlt7,,,,, bmpW7_16;
 -' ~8~. Сведения о трудовой деятельности', cmStaffDoWin8,
        'Сведения о трудовой деятельности',
          hcStaffReceptionMenu, 'Alt+8', kbAlt8,,,,, bmpW8_16;
 -' ~9~. Сведения о заболеваемости', cmStaffDoWin9, 'Сведения о заболеваемости',
          hcStaffReceptionMenu, 'Alt+9', kbAlt9,,,,, bmpW9_16;
 -'1~0~. Дополнительная информация', cmStartDopTables, 'Дополнительные таблицы',
          hcStaffReceptionMenu, 'Alt+I', kbAltI,,,,, bmpW10_16;
 -'11. Пенсионный ~с~таж', cmStaffPens, 'Пенсионный стаж',
          hcStaffReceptionMenu, 'Alt+P', kbAltP,,,,, bmpW11_16;
 -'12. Компетенции', cmInsertEditKN, 'Компетенции',
          hcStaffReceptionMenu, 'Alt+K', kbAltK,,,,, bmpW12_16;    ///  kbAltK
 -'13. Банковские реквизиты', cmStaffDoWin13, 'Банковские реквизиты',
          hcStaffReceptionMenu, 'Alt+L', kbAltL,,,,, bmpW13_16;
 -'14. Приказы', cmStaffDoWin14, 'Приказы',
          hcStaffReceptionMenu, 'Alt+T', kbAltT,,,,, bmpW14_16;


----------------------;
 = 'Печать', 'Печать', hcStaffReceptionMenu, sci1Esc,,, bmpPrintdoc;
 {
 - 'Печать отчета по сотруднику ...',cmPrintDoc,'Отчет по сотруднику',
          hcStaffReceptionMenu, 'Ctrl+P', kbCtrlP;
 - 'Личная ~к~арточка по  форме Т2  приказ N1  от 05.01.2004 (с учетом прав доступа)', cmValue32,,hcStaff_FormirOtchetovPoSotrudniku;
 - '~Г~енератор отчетов',cmSetupReport,'Генератор отчетов',
          hcStaffReceptionMenu, 'Ctrl+R', kbCtrlR;
 - 'По~л~ьзовательские отчеты', cmStaffAnalytic, 'Подключение пользовательских отчетов по сотруднику',
          hcStaffReceptionMenu, 'Alt+W', kbAltW;
 - 'Отчет о неиспользованных отпусках', cmValue21,
    'Печать отчета о неиспользованных на конкретную дату отпусках сотрудников', hcStaff_ReportOtpuskNotUsed,
    '', , sci1Esc;
 - 'Документы при увольнении',cmStaffDoc2Doc,'Документы при увольнении'
    ,hcFunMLocLicShet,'Alt+D',kbAltD,sci1Esc,,,, bmUnEmpl16;
 - 'Биографическая справка', cmValue60, 'Биографическая справка';
 }
-----------;
 - 'Копирование информации ...', cmValue15, 'Копирование информации другого сотрудника',
          hcStaffReceptionMenu,,,,,,, bmpCopyInfo;
-----------;
 - 'Внешняя классификация',cmPickClass,'Внешняя классификация',
          hcGkatalM1ExtClass,'Alt+C',kbAltC,sci1Esc,,,, bmpClassifier;
 - 'Внешние атрибуты'     ,cmPickAttr ,'Заполнение внешних атрибутов по данной позиции',
          hcGkatalM1Attr    ,'Alt+A',kbAltA,sci1Esc,,,, bmpAttribute;
-----------;
 - '~П~римечания к карточке',cmStaffSeeDopInfo,'Примечания к карточке сотрудника',
          hcStaffReceptionMenu, 'F9', kbF9,,,,, bmpKartNote;
 - 'Смежные лицевые счета',cmValue59,'Информация о дополнительных и основных лицевых счетах для учета совместителей',
          hcStaffReceptionMenu;
-----------;
 - 'Информация о производственном центре', cmValue14, 'Информация о производственном центре', hcStaffreceptionmenu;
}
